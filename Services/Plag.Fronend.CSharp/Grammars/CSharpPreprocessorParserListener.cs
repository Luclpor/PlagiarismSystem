//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\namofun\plagiarism\src\Plag.Frontend.Csharp\CSharpPreprocessorParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr4.Grammar.Csharp {
 using System.Linq; 
using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CSharpPreprocessorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
//[System.CLSCompliant(false)]
public interface ICSharpPreprocessorParserListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorDeclaration</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDeclaration([NotNull] CSharpPreprocessorParser.PreprocessorDeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorDeclaration</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDeclaration([NotNull] CSharpPreprocessorParser.PreprocessorDeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorConditional</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorConditional([NotNull] CSharpPreprocessorParser.PreprocessorConditionalContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorConditional</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorConditional([NotNull] CSharpPreprocessorParser.PreprocessorConditionalContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorLine</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorLine([NotNull] CSharpPreprocessorParser.PreprocessorLineContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorLine</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorLine([NotNull] CSharpPreprocessorParser.PreprocessorLineContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorDiagnostic</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorDiagnostic([NotNull] CSharpPreprocessorParser.PreprocessorDiagnosticContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorDiagnostic</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorDiagnostic([NotNull] CSharpPreprocessorParser.PreprocessorDiagnosticContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorRegion</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorRegion([NotNull] CSharpPreprocessorParser.PreprocessorRegionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorRegion</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorRegion([NotNull] CSharpPreprocessorParser.PreprocessorRegionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorPragma</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorPragma([NotNull] CSharpPreprocessorParser.PreprocessorPragmaContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorPragma</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorPragma([NotNull] CSharpPreprocessorParser.PreprocessorPragmaContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>PreprocessorNullable</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorNullable([NotNull] CSharpPreprocessorParser.PreprocessorNullableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>PreprocessorNullable</c>
	/// labeled alternative in <see cref="CSharpPreprocessorParser.preprocessorDirective"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorNullable([NotNull] CSharpPreprocessorParser.PreprocessorNullableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSharpPreprocessorParser.DirectiveNewLineOrSharp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDirectiveNewLineOrSharp([NotNull] CSharpPreprocessorParser.DirectiveNewLineOrSharpContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSharpPreprocessorParser.DirectiveNewLineOrSharp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDirectiveNewLineOrSharp([NotNull] CSharpPreprocessorParser.DirectiveNewLineOrSharpContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CSharpPreprocessorParser.PreprocessorExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPreprocessorExpression([NotNull] CSharpPreprocessorParser.PreprocessorExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CSharpPreprocessorParser.PreprocessorExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPreprocessorExpression([NotNull] CSharpPreprocessorParser.PreprocessorExpressionContext context);
}
} // namespace Antlr4.Grammar.Csharp
