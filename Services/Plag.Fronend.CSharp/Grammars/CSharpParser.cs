//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\namofun\plagiarism\src\Plag.Frontend.Csharp\CSharpParser.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr4.Grammar.Csharp {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
//[System.CLSCompliant(false)]
public partial class CSharpParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		BYTE_ORDER_MARK=1, SINGLE_LINE_DOC_COMMENT=2, DELIMITED_DOC_COMMENT=3, 
		SINGLE_LINE_COMMENT=4, DELIMITED_COMMENT=5, WHITESPACES=6, SHARP=7, ABSTRACT=8, 
		ADD=9, ALIAS=10, ARGLIST=11, AS=12, ASCENDING=13, ASYNC=14, AWAIT=15, 
		BASE=16, BOOL=17, BREAK=18, BY=19, BYTE=20, CASE=21, CATCH=22, CHAR=23, 
		CHECKED=24, CLASS=25, CONST=26, CONTINUE=27, DECIMAL=28, DEFAULT=29, DELEGATE=30, 
		DESCENDING=31, DO=32, DOUBLE=33, DYNAMIC=34, ELSE=35, ENUM=36, EQUALS=37, 
		EVENT=38, EXPLICIT=39, EXTERN=40, FALSE=41, FINALLY=42, FIXED=43, FLOAT=44, 
		FOR=45, FOREACH=46, FROM=47, GET=48, GOTO=49, GROUP=50, IF=51, IMPLICIT=52, 
		IN=53, INT=54, INTERFACE=55, INTERNAL=56, INTO=57, IS=58, JOIN=59, LET=60, 
		LOCK=61, LONG=62, NAMEOF=63, NAMESPACE=64, NEW=65, NULL=66, OBJECT=67, 
		ON=68, OPERATOR=69, ORDERBY=70, OUT=71, OVERRIDE=72, PARAMS=73, PARTIAL=74, 
		PRIVATE=75, PROTECTED=76, PUBLIC=77, READONLY=78, REF=79, REMOVE=80, RETURN=81, 
		SBYTE=82, SEALED=83, SELECT=84, SET=85, SHORT=86, SIZEOF=87, STACKALLOC=88, 
		STATIC=89, STRING=90, STRUCT=91, SWITCH=92, THIS=93, THROW=94, TRUE=95, 
		TRY=96, TYPEOF=97, UINT=98, ULONG=99, UNCHECKED=100, UNMANAGED=101, UNSAFE=102, 
		USHORT=103, USING=104, VAR=105, VIRTUAL=106, VOID=107, VOLATILE=108, WHEN=109, 
		WHERE=110, WHILE=111, YIELD=112, IDENTIFIER=113, LITERAL_ACCESS=114, INTEGER_LITERAL=115, 
		HEX_INTEGER_LITERAL=116, BIN_INTEGER_LITERAL=117, REAL_LITERAL=118, CHARACTER_LITERAL=119, 
		REGULAR_STRING=120, VERBATIUM_STRING=121, INTERPOLATED_REGULAR_STRING_START=122, 
		INTERPOLATED_VERBATIUM_STRING_START=123, OPEN_BRACE=124, CLOSE_BRACE=125, 
		OPEN_BRACKET=126, CLOSE_BRACKET=127, OPEN_PARENS=128, CLOSE_PARENS=129, 
		DOT=130, COMMA=131, COLON=132, SEMICOLON=133, PLUS=134, MINUS=135, STAR=136, 
		DIV=137, PERCENT=138, AMP=139, BITWISE_OR=140, CARET=141, BANG=142, TILDE=143, 
		ASSIGNMENT=144, LT=145, GT=146, INTERR=147, DOUBLE_COLON=148, OP_COALESCING=149, 
		OP_INC=150, OP_DEC=151, OP_AND=152, OP_OR=153, OP_PTR=154, OP_EQ=155, 
		OP_NE=156, OP_LE=157, OP_GE=158, OP_ADD_ASSIGNMENT=159, OP_SUB_ASSIGNMENT=160, 
		OP_MULT_ASSIGNMENT=161, OP_DIV_ASSIGNMENT=162, OP_MOD_ASSIGNMENT=163, 
		OP_AND_ASSIGNMENT=164, OP_OR_ASSIGNMENT=165, OP_XOR_ASSIGNMENT=166, OP_LEFT_SHIFT=167, 
		OP_LEFT_SHIFT_ASSIGNMENT=168, OP_COALESCING_ASSIGNMENT=169, OP_RANGE=170, 
		DOUBLE_CURLY_INSIDE=171, OPEN_BRACE_INSIDE=172, REGULAR_CHAR_INSIDE=173, 
		VERBATIUM_DOUBLE_QUOTE_INSIDE=174, DOUBLE_QUOTE_INSIDE=175, REGULAR_STRING_INSIDE=176, 
		VERBATIUM_INSIDE_STRING=177, CLOSE_BRACE_INSIDE=178, FORMAT_STRING=179, 
		DIRECTIVE_WHITESPACES=180, DIGITS=181, DEFINE=182, UNDEF=183, ELIF=184, 
		ENDIF=185, LINE=186, ERROR=187, WARNING=188, REGION=189, ENDREGION=190, 
		PRAGMA=191, NULLABLE=192, DIRECTIVE_HIDDEN=193, CONDITIONAL_SYMBOL=194, 
		DIRECTIVE_NEW_LINE=195, TEXT=196, DOUBLE_CURLY_CLOSE_INSIDE=197;
	public const int
		RULE_compilationUnit = 0, RULE_namespaceOrTypeName = 1, RULE_type = 2, 
		RULE_baseType = 3, RULE_tupleType = 4, RULE_tupleElement = 5, RULE_simpleType = 6, 
		RULE_numericType = 7, RULE_integralType = 8, RULE_floatingPointType = 9, 
		RULE_classType = 10, RULE_typeArgumentList = 11, RULE_argumentList = 12, 
		RULE_argument = 13, RULE_expression = 14, RULE_nonAssignmentExpression = 15, 
		RULE_assignment = 16, RULE_assignmentOperator = 17, RULE_conditionalExpression = 18, 
		RULE_nullCoalescingExpression = 19, RULE_conditionalOrExpression = 20, 
		RULE_conditionalAndExpression = 21, RULE_inclusiveOrExpression = 22, RULE_exclusiveOrExpression = 23, 
		RULE_andExpression = 24, RULE_equalityExpression = 25, RULE_relationalExpression = 26, 
		RULE_shiftExpression = 27, RULE_additiveExpression = 28, RULE_multiplicativeExpression = 29, 
		RULE_switchExpression = 30, RULE_switchExpressionArms = 31, RULE_switchExpressionArm = 32, 
		RULE_rangeExpression = 33, RULE_unaryExpression = 34, RULE_primaryExpression = 35, 
		RULE_primaryExpressionStart = 36, RULE_throwableExpression = 37, RULE_throwExpression = 38, 
		RULE_memberAccess = 39, RULE_bracketExpression = 40, RULE_indexerArgument = 41, 
		RULE_predefinedType = 42, RULE_expressionList = 43, RULE_objectOrCollectionInitializer = 44, 
		RULE_objectInitializer = 45, RULE_memberInitializerList = 46, RULE_memberInitializer = 47, 
		RULE_initializerValue = 48, RULE_collectionInitializer = 49, RULE_elementInitializer = 50, 
		RULE_anonymousObjectInitializer = 51, RULE_memberDeclaratorList = 52, 
		RULE_memberDeclarator = 53, RULE_unboundTypeName = 54, RULE_genericDimensionSpecifier = 55, 
		RULE_isType = 56, RULE_isTypePatternArms = 57, RULE_isTypePatternArm = 58, 
		RULE_lambdaExpression = 59, RULE_anonymousFunctionSignature = 60, RULE_explicitAnonymousFunctionParameterList = 61, 
		RULE_explicitAnonymousFunctionParameter = 62, RULE_implicitAnonymousFunctionParameterList = 63, 
		RULE_anonymousFunctionBody = 64, RULE_queryExpression = 65, RULE_fromClause = 66, 
		RULE_queryBody = 67, RULE_queryBodyClause = 68, RULE_letClause = 69, RULE_whereClause = 70, 
		RULE_combinedJoinClause = 71, RULE_orderbyClause = 72, RULE_ordering = 73, 
		RULE_selectOrGroupClause = 74, RULE_queryContinuation = 75, RULE_statement = 76, 
		RULE_declarationStatement = 77, RULE_localFunctionDeclaration = 78, RULE_localFunctionHeader = 79, 
		RULE_localFunctionModifiers = 80, RULE_localFunctionBody = 81, RULE_labeledStatement = 82, 
		RULE_embeddedStatement = 83, RULE_simpleEmbeddedStatement = 84, RULE_block = 85, 
		RULE_localVariableDeclaration = 86, RULE_localVariableType = 87, RULE_localVariableDeclarator = 88, 
		RULE_localVariableInitializer = 89, RULE_localConstantDeclaration = 90, 
		RULE_ifBody = 91, RULE_switchSection = 92, RULE_switchLabel = 93, RULE_caseGuard = 94, 
		RULE_statementList = 95, RULE_forInitializer = 96, RULE_forIterator = 97, 
		RULE_catchClauses = 98, RULE_specificCatchClause = 99, RULE_generalCatchClause = 100, 
		RULE_exceptionFilter = 101, RULE_finallyClause = 102, RULE_resourceAcquisition = 103, 
		RULE_namespaceDeclaration = 104, RULE_qualifiedIdentifier = 105, RULE_namespaceBody = 106, 
		RULE_externAliasDirectives = 107, RULE_externAliasDirective = 108, RULE_usingDirectives = 109, 
		RULE_usingDirective = 110, RULE_namespaceMemberDeclarations = 111, RULE_namespaceMemberDeclaration = 112, 
		RULE_typeDeclaration = 113, RULE_qualifiedAliasMember = 114, RULE_typeParameterList = 115, 
		RULE_typeParameter = 116, RULE_classBase = 117, RULE_interfaceTypeList = 118, 
		RULE_typeParameterConstraintsClauses = 119, RULE_typeParameterConstraintsClause = 120, 
		RULE_typeParameterConstraints = 121, RULE_primaryConstraint = 122, RULE_secondaryConstraints = 123, 
		RULE_constructorConstraint = 124, RULE_classBody = 125, RULE_classMemberDeclarations = 126, 
		RULE_classMemberDeclaration = 127, RULE_allMemberModifiers = 128, RULE_allMemberModifier = 129, 
		RULE_commonMemberDeclaration = 130, RULE_typedMemberDeclaration = 131, 
		RULE_constantDeclarators = 132, RULE_constantDeclarator = 133, RULE_variableDeclarators = 134, 
		RULE_variableDeclarator = 135, RULE_variableInitializer = 136, RULE_returnType = 137, 
		RULE_memberName = 138, RULE_methodBody = 139, RULE_formalParameterList = 140, 
		RULE_fixedParameters = 141, RULE_fixedParameter = 142, RULE_parameterModifier = 143, 
		RULE_parameterArray = 144, RULE_accessorDeclarations = 145, RULE_getAccessorDeclaration = 146, 
		RULE_setAccessorDeclaration = 147, RULE_accessorModifier = 148, RULE_accessorBody = 149, 
		RULE_eventAccessorDeclarations = 150, RULE_addAccessorDeclaration = 151, 
		RULE_removeAccessorDeclaration = 152, RULE_overloadableOperator = 153, 
		RULE_conversionOperatorDeclarator = 154, RULE_constructorInitializer = 155, 
		RULE_body = 156, RULE_structInterfaces = 157, RULE_structBody = 158, RULE_structMemberDeclaration = 159, 
		RULE_arrayType = 160, RULE_rankSpecifier = 161, RULE_arrayInitializer = 162, 
		RULE_variantTypeParameterList = 163, RULE_variantTypeParameter = 164, 
		RULE_varianceAnnotation = 165, RULE_interfaceBase = 166, RULE_interfaceBody = 167, 
		RULE_interfaceMemberDeclaration = 168, RULE_interfaceAccessors = 169, 
		RULE_enumBase = 170, RULE_enumBody = 171, RULE_enumMemberDeclaration = 172, 
		RULE_globalAttributeSection = 173, RULE_globalAttributeTarget = 174, RULE_attributes = 175, 
		RULE_attributeSection = 176, RULE_attributeTarget = 177, RULE_attributeList = 178, 
		RULE_attribute = 179, RULE_attributeArgument = 180, RULE_pointerType = 181, 
		RULE_fixedPointerDeclarators = 182, RULE_fixedPointerDeclarator = 183, 
		RULE_fixedPointerInitializer = 184, RULE_fixedSizeBufferDeclarator = 185, 
		RULE_stackallocInitializer = 186, RULE_rightArrow = 187, RULE_rightShift = 188, 
		RULE_rightShiftAssignment = 189, RULE_literal = 190, RULE_booleanLiteral = 191, 
		RULE_stringLiteral = 192, RULE_interpolatedRegularString = 193, RULE_interpolatedVerbatiumString = 194, 
		RULE_interpolatedRegularStringPart = 195, RULE_interpolatedVerbatiumStringPart = 196, 
		RULE_interpolatedStringExpression = 197, RULE_keyword = 198, RULE_classDefinition = 199, 
		RULE_structDefinition = 200, RULE_interfaceDefinition = 201, RULE_enumDefinition = 202, 
		RULE_delegateDefinition = 203, RULE_eventDeclaration = 204, RULE_fieldDeclaration = 205, 
		RULE_propertyDeclaration = 206, RULE_constantDeclaration = 207, RULE_indexerDeclaration = 208, 
		RULE_destructorDefinition = 209, RULE_constructorDeclaration = 210, RULE_methodDeclaration = 211, 
		RULE_methodMemberName = 212, RULE_operatorDeclaration = 213, RULE_argDeclaration = 214, 
		RULE_methodInvocation = 215, RULE_objectCreationExpression = 216, RULE_identifier = 217;
	public static readonly string[] ruleNames = {
		"compilationUnit", "namespaceOrTypeName", "type", "baseType", "tupleType", 
		"tupleElement", "simpleType", "numericType", "integralType", "floatingPointType", 
		"classType", "typeArgumentList", "argumentList", "argument", "expression", 
		"nonAssignmentExpression", "assignment", "assignmentOperator", "conditionalExpression", 
		"nullCoalescingExpression", "conditionalOrExpression", "conditionalAndExpression", 
		"inclusiveOrExpression", "exclusiveOrExpression", "andExpression", "equalityExpression", 
		"relationalExpression", "shiftExpression", "additiveExpression", "multiplicativeExpression", 
		"switchExpression", "switchExpressionArms", "switchExpressionArm", "rangeExpression", 
		"unaryExpression", "primaryExpression", "primaryExpressionStart", "throwableExpression", 
		"throwExpression", "memberAccess", "bracketExpression", "indexerArgument", 
		"predefinedType", "expressionList", "objectOrCollectionInitializer", "objectInitializer", 
		"memberInitializerList", "memberInitializer", "initializerValue", "collectionInitializer", 
		"elementInitializer", "anonymousObjectInitializer", "memberDeclaratorList", 
		"memberDeclarator", "unboundTypeName", "genericDimensionSpecifier", "isType", 
		"isTypePatternArms", "isTypePatternArm", "lambdaExpression", "anonymousFunctionSignature", 
		"explicitAnonymousFunctionParameterList", "explicitAnonymousFunctionParameter", 
		"implicitAnonymousFunctionParameterList", "anonymousFunctionBody", "queryExpression", 
		"fromClause", "queryBody", "queryBodyClause", "letClause", "whereClause", 
		"combinedJoinClause", "orderbyClause", "ordering", "selectOrGroupClause", 
		"queryContinuation", "statement", "declarationStatement", "localFunctionDeclaration", 
		"localFunctionHeader", "localFunctionModifiers", "localFunctionBody", 
		"labeledStatement", "embeddedStatement", "simpleEmbeddedStatement", "block", 
		"localVariableDeclaration", "localVariableType", "localVariableDeclarator", 
		"localVariableInitializer", "localConstantDeclaration", "ifBody", "switchSection", 
		"switchLabel", "caseGuard", "statementList", "forInitializer", "forIterator", 
		"catchClauses", "specificCatchClause", "generalCatchClause", "exceptionFilter", 
		"finallyClause", "resourceAcquisition", "namespaceDeclaration", "qualifiedIdentifier", 
		"namespaceBody", "externAliasDirectives", "externAliasDirective", "usingDirectives", 
		"usingDirective", "namespaceMemberDeclarations", "namespaceMemberDeclaration", 
		"typeDeclaration", "qualifiedAliasMember", "typeParameterList", "typeParameter", 
		"classBase", "interfaceTypeList", "typeParameterConstraintsClauses", "typeParameterConstraintsClause", 
		"typeParameterConstraints", "primaryConstraint", "secondaryConstraints", 
		"constructorConstraint", "classBody", "classMemberDeclarations", "classMemberDeclaration", 
		"allMemberModifiers", "allMemberModifier", "commonMemberDeclaration", 
		"typedMemberDeclaration", "constantDeclarators", "constantDeclarator", 
		"variableDeclarators", "variableDeclarator", "variableInitializer", "returnType", 
		"memberName", "methodBody", "formalParameterList", "fixedParameters", 
		"fixedParameter", "parameterModifier", "parameterArray", "accessorDeclarations", 
		"getAccessorDeclaration", "setAccessorDeclaration", "accessorModifier", 
		"accessorBody", "eventAccessorDeclarations", "addAccessorDeclaration", 
		"removeAccessorDeclaration", "overloadableOperator", "conversionOperatorDeclarator", 
		"constructorInitializer", "body", "structInterfaces", "structBody", "structMemberDeclaration", 
		"arrayType", "rankSpecifier", "arrayInitializer", "variantTypeParameterList", 
		"variantTypeParameter", "varianceAnnotation", "interfaceBase", "interfaceBody", 
		"interfaceMemberDeclaration", "interfaceAccessors", "enumBase", "enumBody", 
		"enumMemberDeclaration", "globalAttributeSection", "globalAttributeTarget", 
		"attributes", "attributeSection", "attributeTarget", "attributeList", 
		"attribute", "attributeArgument", "pointerType", "fixedPointerDeclarators", 
		"fixedPointerDeclarator", "fixedPointerInitializer", "fixedSizeBufferDeclarator", 
		"stackallocInitializer", "rightArrow", "rightShift", "rightShiftAssignment", 
		"literal", "booleanLiteral", "stringLiteral", "interpolatedRegularString", 
		"interpolatedVerbatiumString", "interpolatedRegularStringPart", "interpolatedVerbatiumStringPart", 
		"interpolatedStringExpression", "keyword", "classDefinition", "structDefinition", 
		"interfaceDefinition", "enumDefinition", "delegateDefinition", "eventDeclaration", 
		"fieldDeclaration", "propertyDeclaration", "constantDeclaration", "indexerDeclaration", 
		"destructorDefinition", "constructorDeclaration", "methodDeclaration", 
		"methodMemberName", "operatorDeclaration", "argDeclaration", "methodInvocation", 
		"objectCreationExpression", "identifier"
	};

	private static readonly string[] _LiteralNames = {
		null, "'\u00EF\u00BB\u00BF'", null, null, null, null, null, "'#'", "'abstract'", 
		"'add'", "'alias'", "'__arglist'", "'as'", "'ascending'", "'async'", "'await'", 
		"'base'", "'bool'", "'break'", "'by'", "'byte'", "'case'", "'catch'", 
		"'char'", "'checked'", "'class'", "'const'", "'continue'", "'decimal'", 
		"'default'", "'delegate'", "'descending'", "'do'", "'double'", "'dynamic'", 
		"'else'", "'enum'", "'equals'", "'event'", "'explicit'", "'extern'", "'false'", 
		"'finally'", "'fixed'", "'float'", "'for'", "'foreach'", "'from'", "'get'", 
		"'goto'", "'group'", "'if'", "'implicit'", "'in'", "'int'", "'interface'", 
		"'internal'", "'into'", "'is'", "'join'", "'let'", "'lock'", "'long'", 
		"'nameof'", "'namespace'", "'new'", "'null'", "'object'", "'on'", "'operator'", 
		"'orderby'", "'out'", "'override'", "'params'", "'partial'", "'private'", 
		"'protected'", "'public'", "'readonly'", "'ref'", "'remove'", "'return'", 
		"'sbyte'", "'sealed'", "'select'", "'set'", "'short'", "'sizeof'", "'stackalloc'", 
		"'static'", "'string'", "'struct'", "'switch'", "'this'", "'throw'", "'true'", 
		"'try'", "'typeof'", "'uint'", "'ulong'", "'unchecked'", "'unmanaged'", 
		"'unsafe'", "'ushort'", "'using'", "'var'", "'virtual'", "'void'", "'volatile'", 
		"'when'", "'where'", "'while'", "'yield'", null, null, null, null, null, 
		null, null, null, null, null, null, "'{'", "'}'", "'['", "']'", "'('", 
		"')'", "'.'", "','", "':'", "';'", "'+'", "'-'", "'*'", "'/'", "'%'", 
		"'&'", "'|'", "'^'", "'!'", "'~'", "'='", "'<'", "'>'", "'?'", "'::'", 
		"'??'", "'++'", "'--'", "'&&'", "'||'", "'->'", "'=='", "'!='", "'<='", 
		"'>='", "'+='", "'-='", "'*='", "'/='", "'%='", "'&='", "'|='", "'^='", 
		"'<<'", "'<<='", "'??='", "'..'", "'{{'", null, null, null, null, null, 
		null, null, null, null, null, "'define'", "'undef'", "'elif'", "'endif'", 
		"'line'", null, null, null, null, null, null, "'hidden'", null, null, 
		null, "'}}'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "BYTE_ORDER_MARK", "SINGLE_LINE_DOC_COMMENT", "DELIMITED_DOC_COMMENT", 
		"SINGLE_LINE_COMMENT", "DELIMITED_COMMENT", "WHITESPACES", "SHARP", "ABSTRACT", 
		"ADD", "ALIAS", "ARGLIST", "AS", "ASCENDING", "ASYNC", "AWAIT", "BASE", 
		"BOOL", "BREAK", "BY", "BYTE", "CASE", "CATCH", "CHAR", "CHECKED", "CLASS", 
		"CONST", "CONTINUE", "DECIMAL", "DEFAULT", "DELEGATE", "DESCENDING", "DO", 
		"DOUBLE", "DYNAMIC", "ELSE", "ENUM", "EQUALS", "EVENT", "EXPLICIT", "EXTERN", 
		"FALSE", "FINALLY", "FIXED", "FLOAT", "FOR", "FOREACH", "FROM", "GET", 
		"GOTO", "GROUP", "IF", "IMPLICIT", "IN", "INT", "INTERFACE", "INTERNAL", 
		"INTO", "IS", "JOIN", "LET", "LOCK", "LONG", "NAMEOF", "NAMESPACE", "NEW", 
		"NULL", "OBJECT", "ON", "OPERATOR", "ORDERBY", "OUT", "OVERRIDE", "PARAMS", 
		"PARTIAL", "PRIVATE", "PROTECTED", "PUBLIC", "READONLY", "REF", "REMOVE", 
		"RETURN", "SBYTE", "SEALED", "SELECT", "SET", "SHORT", "SIZEOF", "STACKALLOC", 
		"STATIC", "STRING", "STRUCT", "SWITCH", "THIS", "THROW", "TRUE", "TRY", 
		"TYPEOF", "UINT", "ULONG", "UNCHECKED", "UNMANAGED", "UNSAFE", "USHORT", 
		"USING", "VAR", "VIRTUAL", "VOID", "VOLATILE", "WHEN", "WHERE", "WHILE", 
		"YIELD", "IDENTIFIER", "LITERAL_ACCESS", "INTEGER_LITERAL", "HEX_INTEGER_LITERAL", 
		"BIN_INTEGER_LITERAL", "REAL_LITERAL", "CHARACTER_LITERAL", "REGULAR_STRING", 
		"VERBATIUM_STRING", "INTERPOLATED_REGULAR_STRING_START", "INTERPOLATED_VERBATIUM_STRING_START", 
		"OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", "CLOSE_BRACKET", "OPEN_PARENS", 
		"CLOSE_PARENS", "DOT", "COMMA", "COLON", "SEMICOLON", "PLUS", "MINUS", 
		"STAR", "DIV", "PERCENT", "AMP", "BITWISE_OR", "CARET", "BANG", "TILDE", 
		"ASSIGNMENT", "LT", "GT", "INTERR", "DOUBLE_COLON", "OP_COALESCING", "OP_INC", 
		"OP_DEC", "OP_AND", "OP_OR", "OP_PTR", "OP_EQ", "OP_NE", "OP_LE", "OP_GE", 
		"OP_ADD_ASSIGNMENT", "OP_SUB_ASSIGNMENT", "OP_MULT_ASSIGNMENT", "OP_DIV_ASSIGNMENT", 
		"OP_MOD_ASSIGNMENT", "OP_AND_ASSIGNMENT", "OP_OR_ASSIGNMENT", "OP_XOR_ASSIGNMENT", 
		"OP_LEFT_SHIFT", "OP_LEFT_SHIFT_ASSIGNMENT", "OP_COALESCING_ASSIGNMENT", 
		"OP_RANGE", "DOUBLE_CURLY_INSIDE", "OPEN_BRACE_INSIDE", "REGULAR_CHAR_INSIDE", 
		"VERBATIUM_DOUBLE_QUOTE_INSIDE", "DOUBLE_QUOTE_INSIDE", "REGULAR_STRING_INSIDE", 
		"VERBATIUM_INSIDE_STRING", "CLOSE_BRACE_INSIDE", "FORMAT_STRING", "DIRECTIVE_WHITESPACES", 
		"DIGITS", "DEFINE", "UNDEF", "ELIF", "ENDIF", "LINE", "ERROR", "WARNING", 
		"REGION", "ENDREGION", "PRAGMA", "NULLABLE", "DIRECTIVE_HIDDEN", "CONDITIONAL_SYMBOL", 
		"DIRECTIVE_NEW_LINE", "TEXT", "DOUBLE_CURLY_CLOSE_INSIDE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CSharpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CSharpParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CSharpParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CSharpParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CSharpParser.Eof, 0); }
		public ITerminalNode BYTE_ORDER_MARK() { return GetToken(CSharpParser.BYTE_ORDER_MARK, 0); }
		public ExternAliasDirectivesContext externAliasDirectives() {
			return GetRuleContext<ExternAliasDirectivesContext>(0);
		}
		public UsingDirectivesContext usingDirectives() {
			return GetRuleContext<UsingDirectivesContext>(0);
		}
		public GlobalAttributeSectionContext[] globalAttributeSection() {
			return GetRuleContexts<GlobalAttributeSectionContext>();
		}
		public GlobalAttributeSectionContext globalAttributeSection(int i) {
			return GetRuleContext<GlobalAttributeSectionContext>(i);
		}
		public NamespaceMemberDeclarationsContext namespaceMemberDeclarations() {
			return GetRuleContext<NamespaceMemberDeclarationsContext>(0);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public string RuleName { get { return "CompilationUnit"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext CompilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==BYTE_ORDER_MARK) {
				{
				State = 436; Match(BYTE_ORDER_MARK);
				}
			}

			State = 440;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 439; ExternAliasDirectives();
				}
				break;
			}
			State = 443;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 442; UsingDirectives();
				}
			}

			State = 448;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 445; GlobalAttributeSection();
					}
					} 
				}
				State = 450;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			State = 452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 451; NamespaceMemberDeclarations();
				}
			}

			State = 454; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceOrTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public QualifiedAliasMemberContext qualifiedAliasMember() {
			return GetRuleContext<QualifiedAliasMemberContext>(0);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		public NamespaceOrTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceOrTypeName; } }
		public string RuleName { get { return "NamespaceOrTypeName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceOrTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceOrTypeName(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceOrTypeNameContext NamespaceOrTypeName() {
		NamespaceOrTypeNameContext _localctx = new NamespaceOrTypeNameContext(Context, State);
		EnterRule(_localctx, 2, RULE_namespaceOrTypeName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				{
				State = 456; Identifier();
				State = 458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
				case 1:
					{
					State = 457; TypeArgumentList();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 460; QualifiedAliasMember();
				}
				break;
			}
			State = 470;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 463; Match(DOT);
					State = 464; Identifier();
					State = 466;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						State = 465; TypeArgumentList();
						}
						break;
					}
					}
					} 
				}
				State = 472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharpParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharpParser.INTERR, i);
		}
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public string RuleName { get { return "Type"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext Type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 4, RULE_type);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 473; BaseType();
			State = 479;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 477;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INTERR:
						{
						State = 474; Match(INTERR);
						}
						break;
					case OPEN_BRACKET:
						{
						State = 475; RankSpecifier();
						}
						break;
					case STAR:
						{
						State = 476; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 481;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,10,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeContext : ParserRuleContext {
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		public TupleTypeContext tupleType() {
			return GetRuleContext<TupleTypeContext>(0);
		}
		public BaseTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseType; } }
		public string RuleName { get { return "BaseType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBaseType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBaseType(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeContext BaseType() {
		BaseTypeContext _localctx = new BaseTypeContext(Context, State);
		EnterRule(_localctx, 6, RULE_baseType);
		try {
			State = 487;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOL:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; SimpleType();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; ClassType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484; Match(VOID);
				State = 485; Match(STAR);
				}
				break;
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 4);
				{
				State = 486; TupleType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleTypeContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TupleElementContext[] tupleElement() {
			return GetRuleContexts<TupleElementContext>();
		}
		public TupleElementContext tupleElement(int i) {
			return GetRuleContext<TupleElementContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public TupleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleType; } }
		public string RuleName { get { return "TupleType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTupleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTupleType(this);
		}
	}

	[RuleVersion(0)]
	public TupleTypeContext TupleType() {
		TupleTypeContext _localctx = new TupleTypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_tupleType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 489; Match(OPEN_PARENS);
			State = 490; TupleElement();
			State = 493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 491; Match(COMMA);
				State = 492; TupleElement();
				}
				}
				State = 495;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==COMMA );
			State = 497; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TupleElementContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TupleElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tupleElement; } }
		public string RuleName { get { return "TupleElement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTupleElement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTupleElement(this);
		}
	}

	[RuleVersion(0)]
	public TupleElementContext TupleElement() {
		TupleElementContext _localctx = new TupleElementContext(Context, State);
		EnterRule(_localctx, 10, RULE_tupleElement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Type();
			State = 501;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (UNMANAGED - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
				{
				State = 500; Identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeContext : ParserRuleContext {
		public NumericTypeContext numericType() {
			return GetRuleContext<NumericTypeContext>(0);
		}
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public SimpleTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleType; } }
		public string RuleName { get { return "SimpleType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimpleType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimpleType(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeContext SimpleType() {
		SimpleTypeContext _localctx = new SimpleTypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_simpleType);
		try {
			State = 505;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 503; NumericType();
				}
				break;
			case BOOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 504; Match(BOOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumericTypeContext : ParserRuleContext {
		public IntegralTypeContext integralType() {
			return GetRuleContext<IntegralTypeContext>(0);
		}
		public FloatingPointTypeContext floatingPointType() {
			return GetRuleContext<FloatingPointTypeContext>(0);
		}
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public NumericTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numericType; } }
		public string RuleName { get { return "NumericType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNumericType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNumericType(this);
		}
	}

	[RuleVersion(0)]
	public NumericTypeContext NumericType() {
		NumericTypeContext _localctx = new NumericTypeContext(Context, State);
		EnterRule(_localctx, 14, RULE_numericType);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BYTE:
			case CHAR:
			case INT:
			case LONG:
			case SBYTE:
			case SHORT:
			case UINT:
			case ULONG:
			case USHORT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 507; IntegralType();
				}
				break;
			case DOUBLE:
			case FLOAT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 508; FloatingPointType();
				}
				break;
			case DECIMAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 509; Match(DECIMAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegralTypeContext : ParserRuleContext {
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public IntegralTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integralType; } }
		public string RuleName { get { return "IntegralType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIntegralType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIntegralType(this);
		}
	}

	[RuleVersion(0)]
	public IntegralTypeContext IntegralType() {
		IntegralTypeContext _localctx = new IntegralTypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_integralType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 512;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BYTE) | (1L << CHAR) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 82)) & ~0x3f) == 0 && ((1L << (_la - 82)) & ((1L << (SBYTE - 82)) | (1L << (SHORT - 82)) | (1L << (UINT - 82)) | (1L << (ULONG - 82)) | (1L << (USHORT - 82)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatingPointTypeContext : ParserRuleContext {
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public FloatingPointTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatingPointType; } }
		public string RuleName { get { return "FloatingPointType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFloatingPointType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFloatingPointType(this);
		}
	}

	[RuleVersion(0)]
	public FloatingPointTypeContext FloatingPointType() {
		FloatingPointTypeContext _localctx = new FloatingPointTypeContext(Context, State);
		EnterRule(_localctx, 18, RULE_floatingPointType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 514;
			_la = TokenStream.LA(1);
			if ( !(_la==DOUBLE || _la==FLOAT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public string RuleName { get { return "ClassType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext ClassType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 20, RULE_classType);
		try {
			State = 520;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 516; NamespaceOrTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 517; Match(OBJECT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 518; Match(DYNAMIC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 519; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public TypeArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentList; } }
		public string RuleName { get { return "TypeArgumentList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentListContext TypeArgumentList() {
		TypeArgumentListContext _localctx = new TypeArgumentListContext(Context, State);
		EnterRule(_localctx, 22, RULE_typeArgumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 522; Match(LT);
			State = 523; Type();
			State = 528;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 524; Match(COMMA);
				State = 525; Type();
				}
				}
				State = 530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 531; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentListContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argumentList; } }
		public string RuleName { get { return "ArgumentList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentListContext ArgumentList() {
		ArgumentListContext _localctx = new ArgumentListContext(Context, State);
		EnterRule(_localctx, 24, RULE_argumentList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 533; Argument();
			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 534; Match(COMMA);
				State = 535; Argument();
				}
				}
				State = 540;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public IToken refout;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public string RuleName { get { return "Argument"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgument(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext Argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 26, RULE_argument);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 544;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				{
				State = 541; Identifier();
				State = 542; Match(COLON);
				}
				break;
			}
			State = 547;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,20,Context) ) {
			case 1:
				{
				State = 546;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (IN - 53)) | (1L << (OUT - 53)) | (1L << (REF - 53)))) != 0)) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 551;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				{
				State = 549; Match(VAR);
				}
				break;
			case 2:
				{
				State = 550; Type();
				}
				break;
			}
			State = 553; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public string RuleName { get { return "Expression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext Expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_expression);
		try {
			State = 559;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 555; Assignment();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 556; NonAssignmentExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 557; Match(REF);
				State = 558; NonAssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonAssignmentExpressionContext : ParserRuleContext {
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public NonAssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonAssignmentExpression; } }
		public string RuleName { get { return "NonAssignmentExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNonAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNonAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public NonAssignmentExpressionContext NonAssignmentExpression() {
		NonAssignmentExpressionContext _localctx = new NonAssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 30, RULE_nonAssignmentExpression);
		try {
			State = 564;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 561; LambdaExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 562; QueryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 563; ConditionalExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public PrimaryExpressionContext[] primaryExpression() {
			return GetRuleContexts<PrimaryExpressionContext>();
		}
		public PrimaryExpressionContext primaryExpression(int i) {
			return GetRuleContext<PrimaryExpressionContext>(i);
		}
		public ITerminalNode[] OP_COALESCING_ASSIGNMENT() { return GetTokens(CSharpParser.OP_COALESCING_ASSIGNMENT); }
		public ITerminalNode OP_COALESCING_ASSIGNMENT(int i) {
			return GetToken(CSharpParser.OP_COALESCING_ASSIGNMENT, i);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public string RuleName { get { return "Assignment"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext Assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 32, RULE_assignment);
		try {
			int _alt;
			State = 581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 566; UnaryExpression();
				State = 567; AssignmentOperator();
				State = 568; Expression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 573;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 570; PrimaryExpression();
						State = 571; Match(OP_COALESCING_ASSIGNMENT);
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 575;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				State = 579;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BASE:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CHECKED:
				case DECIMAL:
				case DEFAULT:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FALSE:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case NEW:
				case NULL:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case SIZEOF:
				case STRING:
				case THIS:
				case TRUE:
				case TYPEOF:
				case UINT:
				case ULONG:
				case UNCHECKED:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case LITERAL_ACCESS:
				case INTEGER_LITERAL:
				case HEX_INTEGER_LITERAL:
				case BIN_INTEGER_LITERAL:
				case REAL_LITERAL:
				case CHARACTER_LITERAL:
				case REGULAR_STRING:
				case VERBATIUM_STRING:
				case INTERPOLATED_REGULAR_STRING_START:
				case INTERPOLATED_VERBATIUM_STRING_START:
				case OPEN_PARENS:
				case PLUS:
				case MINUS:
				case STAR:
				case AMP:
				case CARET:
				case BANG:
				case TILDE:
				case OP_INC:
				case OP_DEC:
					{
					State = 577; UnaryExpression();
					}
					break;
				case THROW:
					{
					State = 578; ThrowExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode OP_ADD_ASSIGNMENT() { return GetToken(CSharpParser.OP_ADD_ASSIGNMENT, 0); }
		public ITerminalNode OP_SUB_ASSIGNMENT() { return GetToken(CSharpParser.OP_SUB_ASSIGNMENT, 0); }
		public ITerminalNode OP_MULT_ASSIGNMENT() { return GetToken(CSharpParser.OP_MULT_ASSIGNMENT, 0); }
		public ITerminalNode OP_DIV_ASSIGNMENT() { return GetToken(CSharpParser.OP_DIV_ASSIGNMENT, 0); }
		public ITerminalNode OP_MOD_ASSIGNMENT() { return GetToken(CSharpParser.OP_MOD_ASSIGNMENT, 0); }
		public ITerminalNode OP_AND_ASSIGNMENT() { return GetToken(CSharpParser.OP_AND_ASSIGNMENT, 0); }
		public ITerminalNode OP_OR_ASSIGNMENT() { return GetToken(CSharpParser.OP_OR_ASSIGNMENT, 0); }
		public ITerminalNode OP_XOR_ASSIGNMENT() { return GetToken(CSharpParser.OP_XOR_ASSIGNMENT, 0); }
		public ITerminalNode OP_LEFT_SHIFT_ASSIGNMENT() { return GetToken(CSharpParser.OP_LEFT_SHIFT_ASSIGNMENT, 0); }
		public RightShiftAssignmentContext rightShiftAssignment() {
			return GetRuleContext<RightShiftAssignmentContext>(0);
		}
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public string RuleName { get { return "AssignmentOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext AssignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 34, RULE_assignmentOperator);
		try {
			State = 594;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 583; Match(ASSIGNMENT);
				}
				break;
			case OP_ADD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 584; Match(OP_ADD_ASSIGNMENT);
				}
				break;
			case OP_SUB_ASSIGNMENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 585; Match(OP_SUB_ASSIGNMENT);
				}
				break;
			case OP_MULT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 586; Match(OP_MULT_ASSIGNMENT);
				}
				break;
			case OP_DIV_ASSIGNMENT:
				EnterOuterAlt(_localctx, 5);
				{
				State = 587; Match(OP_DIV_ASSIGNMENT);
				}
				break;
			case OP_MOD_ASSIGNMENT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 588; Match(OP_MOD_ASSIGNMENT);
				}
				break;
			case OP_AND_ASSIGNMENT:
				EnterOuterAlt(_localctx, 7);
				{
				State = 589; Match(OP_AND_ASSIGNMENT);
				}
				break;
			case OP_OR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 8);
				{
				State = 590; Match(OP_OR_ASSIGNMENT);
				}
				break;
			case OP_XOR_ASSIGNMENT:
				EnterOuterAlt(_localctx, 9);
				{
				State = 591; Match(OP_XOR_ASSIGNMENT);
				}
				break;
			case OP_LEFT_SHIFT_ASSIGNMENT:
				EnterOuterAlt(_localctx, 10);
				{
				State = 592; Match(OP_LEFT_SHIFT_ASSIGNMENT);
				}
				break;
			case GT:
				EnterOuterAlt(_localctx, 11);
				{
				State = 593; RightShiftAssignment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public NullCoalescingExpressionContext nullCoalescingExpression() {
			return GetRuleContext<NullCoalescingExpressionContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		public ThrowableExpressionContext[] throwableExpression() {
			return GetRuleContexts<ThrowableExpressionContext>();
		}
		public ThrowableExpressionContext throwableExpression(int i) {
			return GetRuleContext<ThrowableExpressionContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public string RuleName { get { return "ConditionalExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext ConditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 36, RULE_conditionalExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 596; NullCoalescingExpression();
			State = 602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				{
				State = 597; Match(INTERR);
				State = 598; ThrowableExpression();
				State = 599; Match(COLON);
				State = 600; ThrowableExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullCoalescingExpressionContext : ParserRuleContext {
		public ConditionalOrExpressionContext conditionalOrExpression() {
			return GetRuleContext<ConditionalOrExpressionContext>(0);
		}
		public ITerminalNode OP_COALESCING() { return GetToken(CSharpParser.OP_COALESCING, 0); }
		public NullCoalescingExpressionContext nullCoalescingExpression() {
			return GetRuleContext<NullCoalescingExpressionContext>(0);
		}
		public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public NullCoalescingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullCoalescingExpression; } }
		public string RuleName { get { return "NullCoalescingExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNullCoalescingExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNullCoalescingExpression(this);
		}
	}

	[RuleVersion(0)]
	public NullCoalescingExpressionContext NullCoalescingExpression() {
		NullCoalescingExpressionContext _localctx = new NullCoalescingExpressionContext(Context, State);
		EnterRule(_localctx, 38, RULE_nullCoalescingExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 604; ConditionalOrExpression();
			State = 610;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OP_COALESCING) {
				{
				State = 605; Match(OP_COALESCING);
				State = 608;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BASE:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case CHECKED:
				case DECIMAL:
				case DEFAULT:
				case DELEGATE:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FALSE:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case NEW:
				case NULL:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case SIZEOF:
				case STRING:
				case THIS:
				case TRUE:
				case TYPEOF:
				case UINT:
				case ULONG:
				case UNCHECKED:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case LITERAL_ACCESS:
				case INTEGER_LITERAL:
				case HEX_INTEGER_LITERAL:
				case BIN_INTEGER_LITERAL:
				case REAL_LITERAL:
				case CHARACTER_LITERAL:
				case REGULAR_STRING:
				case VERBATIUM_STRING:
				case INTERPOLATED_REGULAR_STRING_START:
				case INTERPOLATED_VERBATIUM_STRING_START:
				case OPEN_PARENS:
				case PLUS:
				case MINUS:
				case STAR:
				case AMP:
				case CARET:
				case BANG:
				case TILDE:
				case OP_INC:
				case OP_DEC:
				case OP_RANGE:
					{
					State = 606; NullCoalescingExpression();
					}
					break;
				case THROW:
					{
					State = 607; ThrowExpression();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalOrExpressionContext : ParserRuleContext {
		public ConditionalAndExpressionContext[] conditionalAndExpression() {
			return GetRuleContexts<ConditionalAndExpressionContext>();
		}
		public ConditionalAndExpressionContext conditionalAndExpression(int i) {
			return GetRuleContext<ConditionalAndExpressionContext>(i);
		}
		public ITerminalNode[] OP_OR() { return GetTokens(CSharpParser.OP_OR); }
		public ITerminalNode OP_OR(int i) {
			return GetToken(CSharpParser.OP_OR, i);
		}
		public ConditionalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalOrExpression; } }
		public string RuleName { get { return "ConditionalOrExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditionalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditionalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalOrExpressionContext ConditionalOrExpression() {
		ConditionalOrExpressionContext _localctx = new ConditionalOrExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_conditionalOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 612; ConditionalAndExpression();
			State = 617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_OR) {
				{
				{
				State = 613; Match(OP_OR);
				State = 614; ConditionalAndExpression();
				}
				}
				State = 619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext[] inclusiveOrExpression() {
			return GetRuleContexts<InclusiveOrExpressionContext>();
		}
		public InclusiveOrExpressionContext inclusiveOrExpression(int i) {
			return GetRuleContext<InclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] OP_AND() { return GetTokens(CSharpParser.OP_AND); }
		public ITerminalNode OP_AND(int i) {
			return GetToken(CSharpParser.OP_AND, i);
		}
		public ConditionalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalAndExpression; } }
		public string RuleName { get { return "ConditionalAndExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConditionalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConditionalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalAndExpressionContext ConditionalAndExpression() {
		ConditionalAndExpressionContext _localctx = new ConditionalAndExpressionContext(Context, State);
		EnterRule(_localctx, 42, RULE_conditionalAndExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 620; InclusiveOrExpression();
			State = 625;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_AND) {
				{
				{
				State = 621; Match(OP_AND);
				State = 622; InclusiveOrExpression();
				}
				}
				State = 627;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext[] exclusiveOrExpression() {
			return GetRuleContexts<ExclusiveOrExpressionContext>();
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression(int i) {
			return GetRuleContext<ExclusiveOrExpressionContext>(i);
		}
		public ITerminalNode[] BITWISE_OR() { return GetTokens(CSharpParser.BITWISE_OR); }
		public ITerminalNode BITWISE_OR(int i) {
			return GetToken(CSharpParser.BITWISE_OR, i);
		}
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public string RuleName { get { return "InclusiveOrExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext InclusiveOrExpression() {
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_inclusiveOrExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 628; ExclusiveOrExpression();
			State = 633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITWISE_OR) {
				{
				{
				State = 629; Match(BITWISE_OR);
				State = 630; ExclusiveOrExpression();
				}
				}
				State = 635;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext[] andExpression() {
			return GetRuleContexts<AndExpressionContext>();
		}
		public AndExpressionContext andExpression(int i) {
			return GetRuleContext<AndExpressionContext>(i);
		}
		public ITerminalNode[] CARET() { return GetTokens(CSharpParser.CARET); }
		public ITerminalNode CARET(int i) {
			return GetToken(CSharpParser.CARET, i);
		}
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public string RuleName { get { return "ExclusiveOrExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext ExclusiveOrExpression() {
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, State);
		EnterRule(_localctx, 46, RULE_exclusiveOrExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 636; AndExpression();
			State = 641;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 637; Match(CARET);
					State = 638; AndExpression();
					}
					} 
				}
				State = 643;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,34,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext[] equalityExpression() {
			return GetRuleContexts<EqualityExpressionContext>();
		}
		public EqualityExpressionContext equalityExpression(int i) {
			return GetRuleContext<EqualityExpressionContext>(i);
		}
		public ITerminalNode[] AMP() { return GetTokens(CSharpParser.AMP); }
		public ITerminalNode AMP(int i) {
			return GetToken(CSharpParser.AMP, i);
		}
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public string RuleName { get { return "AndExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext AndExpression() {
		AndExpressionContext _localctx = new AndExpressionContext(Context, State);
		EnterRule(_localctx, 48, RULE_andExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 644; EqualityExpression();
			State = 649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 645; Match(AMP);
					State = 646; EqualityExpression();
					}
					} 
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext[] relationalExpression() {
			return GetRuleContexts<RelationalExpressionContext>();
		}
		public RelationalExpressionContext relationalExpression(int i) {
			return GetRuleContext<RelationalExpressionContext>(i);
		}
		public ITerminalNode[] OP_EQ() { return GetTokens(CSharpParser.OP_EQ); }
		public ITerminalNode OP_EQ(int i) {
			return GetToken(CSharpParser.OP_EQ, i);
		}
		public ITerminalNode[] OP_NE() { return GetTokens(CSharpParser.OP_NE); }
		public ITerminalNode OP_NE(int i) {
			return GetToken(CSharpParser.OP_NE, i);
		}
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public string RuleName { get { return "EqualityExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext EqualityExpression() {
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, State);
		EnterRule(_localctx, 50, RULE_equalityExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 652; RelationalExpression();
			State = 657;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==OP_EQ || _la==OP_NE) {
				{
				{
				State = 653;
				_la = TokenStream.LA(1);
				if ( !(_la==OP_EQ || _la==OP_NE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 654; RelationalExpression();
				}
				}
				State = 659;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext[] shiftExpression() {
			return GetRuleContexts<ShiftExpressionContext>();
		}
		public ShiftExpressionContext shiftExpression(int i) {
			return GetRuleContext<ShiftExpressionContext>(i);
		}
		public ITerminalNode[] IS() { return GetTokens(CSharpParser.IS); }
		public ITerminalNode IS(int i) {
			return GetToken(CSharpParser.IS, i);
		}
		public IsTypeContext[] isType() {
			return GetRuleContexts<IsTypeContext>();
		}
		public IsTypeContext isType(int i) {
			return GetRuleContext<IsTypeContext>(i);
		}
		public ITerminalNode[] AS() { return GetTokens(CSharpParser.AS); }
		public ITerminalNode AS(int i) {
			return GetToken(CSharpParser.AS, i);
		}
		public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public ITerminalNode[] LT() { return GetTokens(CSharpParser.LT); }
		public ITerminalNode LT(int i) {
			return GetToken(CSharpParser.LT, i);
		}
		public ITerminalNode[] GT() { return GetTokens(CSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(CSharpParser.GT, i);
		}
		public ITerminalNode[] OP_LE() { return GetTokens(CSharpParser.OP_LE); }
		public ITerminalNode OP_LE(int i) {
			return GetToken(CSharpParser.OP_LE, i);
		}
		public ITerminalNode[] OP_GE() { return GetTokens(CSharpParser.OP_GE); }
		public ITerminalNode OP_GE(int i) {
			return GetToken(CSharpParser.OP_GE, i);
		}
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public string RuleName { get { return "RelationalExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext RelationalExpression() {
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, State);
		EnterRule(_localctx, 52, RULE_relationalExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 660; ShiftExpression();
			State = 669;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AS || _la==IS || ((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (LT - 145)) | (1L << (GT - 145)) | (1L << (OP_LE - 145)) | (1L << (OP_GE - 145)))) != 0)) {
				{
				State = 667;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LT:
				case GT:
				case OP_LE:
				case OP_GE:
					{
					State = 661;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 145)) & ~0x3f) == 0 && ((1L << (_la - 145)) & ((1L << (LT - 145)) | (1L << (GT - 145)) | (1L << (OP_LE - 145)) | (1L << (OP_GE - 145)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 662; ShiftExpression();
					}
					break;
				case IS:
					{
					State = 663; Match(IS);
					State = 664; IsType();
					}
					break;
				case AS:
					{
					State = 665; Match(AS);
					State = 666; Type();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext[] additiveExpression() {
			return GetRuleContexts<AdditiveExpressionContext>();
		}
		public AdditiveExpressionContext additiveExpression(int i) {
			return GetRuleContext<AdditiveExpressionContext>(i);
		}
		public ITerminalNode[] OP_LEFT_SHIFT() { return GetTokens(CSharpParser.OP_LEFT_SHIFT); }
		public ITerminalNode OP_LEFT_SHIFT(int i) {
			return GetToken(CSharpParser.OP_LEFT_SHIFT, i);
		}
		public RightShiftContext[] rightShift() {
			return GetRuleContexts<RightShiftContext>();
		}
		public RightShiftContext rightShift(int i) {
			return GetRuleContext<RightShiftContext>(i);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public string RuleName { get { return "ShiftExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext ShiftExpression() {
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, State);
		EnterRule(_localctx, 54, RULE_shiftExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 672; AdditiveExpression();
			State = 680;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 675;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OP_LEFT_SHIFT:
						{
						State = 673; Match(OP_LEFT_SHIFT);
						}
						break;
					case GT:
						{
						State = 674; RightShift();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 677; AdditiveExpression();
					}
					} 
				}
				State = 682;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,40,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext[] multiplicativeExpression() {
			return GetRuleContexts<MultiplicativeExpressionContext>();
		}
		public MultiplicativeExpressionContext multiplicativeExpression(int i) {
			return GetRuleContext<MultiplicativeExpressionContext>(i);
		}
		public ITerminalNode[] PLUS() { return GetTokens(CSharpParser.PLUS); }
		public ITerminalNode PLUS(int i) {
			return GetToken(CSharpParser.PLUS, i);
		}
		public ITerminalNode[] MINUS() { return GetTokens(CSharpParser.MINUS); }
		public ITerminalNode MINUS(int i) {
			return GetToken(CSharpParser.MINUS, i);
		}
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public string RuleName { get { return "AdditiveExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext AdditiveExpression() {
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_additiveExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 683; MultiplicativeExpression();
			State = 688;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 684;
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 685; MultiplicativeExpression();
					}
					} 
				}
				State = 690;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public SwitchExpressionContext[] switchExpression() {
			return GetRuleContexts<SwitchExpressionContext>();
		}
		public SwitchExpressionContext switchExpression(int i) {
			return GetRuleContext<SwitchExpressionContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		public ITerminalNode[] DIV() { return GetTokens(CSharpParser.DIV); }
		public ITerminalNode DIV(int i) {
			return GetToken(CSharpParser.DIV, i);
		}
		public ITerminalNode[] PERCENT() { return GetTokens(CSharpParser.PERCENT); }
		public ITerminalNode PERCENT(int i) {
			return GetToken(CSharpParser.PERCENT, i);
		}
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public string RuleName { get { return "MultiplicativeExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext MultiplicativeExpression() {
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_multiplicativeExpression);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 691; SwitchExpression();
			State = 696;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 692;
					_la = TokenStream.LA(1);
					if ( !(((((_la - 136)) & ~0x3f) == 0 && ((1L << (_la - 136)) & ((1L << (STAR - 136)) | (1L << (DIV - 136)) | (1L << (PERCENT - 136)))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 693; SwitchExpression();
					}
					} 
				}
				State = 698;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,42,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExpressionContext : ParserRuleContext {
		public RangeExpressionContext rangeExpression() {
			return GetRuleContext<RangeExpressionContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public SwitchExpressionArmsContext switchExpressionArms() {
			return GetRuleContext<SwitchExpressionArmsContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public SwitchExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpression; } }
		public string RuleName { get { return "SwitchExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchExpression(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExpressionContext SwitchExpression() {
		SwitchExpressionContext _localctx = new SwitchExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_switchExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 699; RangeExpression();
			State = 709;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SWITCH) {
				{
				State = 700; Match(SWITCH);
				State = 701; Match(OPEN_BRACE);
				State = 706;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 702; SwitchExpressionArms();
					State = 704;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA) {
						{
						State = 703; Match(COMMA);
						}
					}

					}
				}

				State = 708; Match(CLOSE_BRACE);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExpressionArmsContext : ParserRuleContext {
		public SwitchExpressionArmContext[] switchExpressionArm() {
			return GetRuleContexts<SwitchExpressionArmContext>();
		}
		public SwitchExpressionArmContext switchExpressionArm(int i) {
			return GetRuleContext<SwitchExpressionArmContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public SwitchExpressionArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpressionArms; } }
		public string RuleName { get { return "SwitchExpressionArms"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchExpressionArms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchExpressionArms(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExpressionArmsContext SwitchExpressionArms() {
		SwitchExpressionArmsContext _localctx = new SwitchExpressionArmsContext(Context, State);
		EnterRule(_localctx, 62, RULE_switchExpressionArms);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 711; SwitchExpressionArm();
			State = 716;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 712; Match(COMMA);
					State = 713; SwitchExpressionArm();
					}
					} 
				}
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchExpressionArmContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public CaseGuardContext caseGuard() {
			return GetRuleContext<CaseGuardContext>(0);
		}
		public SwitchExpressionArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchExpressionArm; } }
		public string RuleName { get { return "SwitchExpressionArm"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchExpressionArm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchExpressionArm(this);
		}
	}

	[RuleVersion(0)]
	public SwitchExpressionArmContext SwitchExpressionArm() {
		SwitchExpressionArmContext _localctx = new SwitchExpressionArmContext(Context, State);
		EnterRule(_localctx, 64, RULE_switchExpressionArm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 719; Expression();
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 720; CaseGuard();
				}
			}

			State = 723; RightArrow();
			State = 724; ThrowableExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeExpressionContext : ParserRuleContext {
		public RangeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeExpression; } }
		public string RuleName { get { return "RangeExpression"; } }
	 
		public RangeExpressionContext() { }
		public virtual void CopyFrom(RangeExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnaryExpressionImplContext : RangeExpressionContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public UnaryExpressionImplContext(RangeExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpressionImpl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpressionImpl(this);
		}
	}
	public partial class RangeExpressionImplContext : RangeExpressionContext {
		public ITerminalNode OP_RANGE() { return GetToken(CSharpParser.OP_RANGE, 0); }
		public UnaryExpressionContext[] unaryExpression() {
			return GetRuleContexts<UnaryExpressionContext>();
		}
		public UnaryExpressionContext unaryExpression(int i) {
			return GetRuleContext<UnaryExpressionContext>(i);
		}
		public RangeExpressionImplContext(RangeExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRangeExpressionImpl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRangeExpressionImpl(this);
		}
	}

	[RuleVersion(0)]
	public RangeExpressionContext RangeExpression() {
		RangeExpressionContext _localctx = new RangeExpressionContext(Context, State);
		EnterRule(_localctx, 66, RULE_rangeExpression);
		int _la;
		try {
			State = 734;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
			case 1:
				_localctx = new UnaryExpressionImplContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 726; UnaryExpression();
				}
				break;
			case 2:
				_localctx = new RangeExpressionImplContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)))) != 0)) {
					{
					State = 727; UnaryExpression();
					}
				}

				State = 730; Match(OP_RANGE);
				State = 732;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 731; UnaryExpression();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(CSharpParser.PLUS, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode MINUS() { return GetToken(CSharpParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharpParser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(CSharpParser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharpParser.OP_DEC, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public ITerminalNode AMP() { return GetToken(CSharpParser.AMP, 0); }
		public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		public ITerminalNode CARET() { return GetToken(CSharpParser.CARET, 0); }
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public string RuleName { get { return "UnaryExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext UnaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 68, RULE_unaryExpression);
		try {
			State = 762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 736; PrimaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 737; Match(PLUS);
				State = 738; UnaryExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 739; Match(MINUS);
				State = 740; UnaryExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 741; Match(BANG);
				State = 742; UnaryExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 743; Match(TILDE);
				State = 744; UnaryExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 745; Match(OP_INC);
				State = 746; UnaryExpression();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 747; Match(OP_DEC);
				State = 748; UnaryExpression();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 749; Match(OPEN_PARENS);
				State = 750; Type();
				State = 751; Match(CLOSE_PARENS);
				State = 752; UnaryExpression();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 754; Match(AWAIT);
				State = 755; UnaryExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 756; Match(AMP);
				State = 757; UnaryExpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 758; Match(STAR);
				State = 759; UnaryExpression();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 760; Match(CARET);
				State = 761; UnaryExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public PrimaryExpressionStartContext pe;
		public PrimaryExpressionStartContext primaryExpressionStart() {
			return GetRuleContext<PrimaryExpressionStartContext>(0);
		}
		public ITerminalNode[] BANG() { return GetTokens(CSharpParser.BANG); }
		public ITerminalNode BANG(int i) {
			return GetToken(CSharpParser.BANG, i);
		}
		public BracketExpressionContext[] bracketExpression() {
			return GetRuleContexts<BracketExpressionContext>();
		}
		public BracketExpressionContext bracketExpression(int i) {
			return GetRuleContext<BracketExpressionContext>(i);
		}
		public MemberAccessContext[] memberAccess() {
			return GetRuleContexts<MemberAccessContext>();
		}
		public MemberAccessContext memberAccess(int i) {
			return GetRuleContext<MemberAccessContext>(i);
		}
		public MethodInvocationContext[] methodInvocation() {
			return GetRuleContexts<MethodInvocationContext>();
		}
		public MethodInvocationContext methodInvocation(int i) {
			return GetRuleContext<MethodInvocationContext>(i);
		}
		public ITerminalNode[] OP_INC() { return GetTokens(CSharpParser.OP_INC); }
		public ITerminalNode OP_INC(int i) {
			return GetToken(CSharpParser.OP_INC, i);
		}
		public ITerminalNode[] OP_DEC() { return GetTokens(CSharpParser.OP_DEC); }
		public ITerminalNode OP_DEC(int i) {
			return GetToken(CSharpParser.OP_DEC, i);
		}
		public ITerminalNode[] OP_PTR() { return GetTokens(CSharpParser.OP_PTR); }
		public ITerminalNode OP_PTR(int i) {
			return GetToken(CSharpParser.OP_PTR, i);
		}
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public string RuleName { get { return "PrimaryExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext PrimaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 70, RULE_primaryExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 764; _localctx.pe = PrimaryExpressionStart();
			State = 766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				{
				State = 765; Match(BANG);
				}
				break;
			}
			State = 771;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 768; BracketExpression();
					}
					} 
				}
				State = 773;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,53,Context);
			}
			State = 775;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,54,Context) ) {
			case 1:
				{
				State = 774; Match(BANG);
				}
				break;
			}
			State = 799;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					{
					State = 783;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case DOT:
					case INTERR:
						{
						State = 777; MemberAccess();
						}
						break;
					case OPEN_PARENS:
						{
						State = 778; MethodInvocation();
						}
						break;
					case OP_INC:
						{
						State = 779; Match(OP_INC);
						}
						break;
					case OP_DEC:
						{
						State = 780; Match(OP_DEC);
						}
						break;
					case OP_PTR:
						{
						State = 781; Match(OP_PTR);
						State = 782; Identifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 786;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,56,Context) ) {
					case 1:
						{
						State = 785; Match(BANG);
						}
						break;
					}
					}
					State = 791;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 788; BracketExpression();
							}
							} 
						}
						State = 793;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,57,Context);
					}
					State = 795;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,58,Context) ) {
					case 1:
						{
						State = 794; Match(BANG);
						}
						break;
					}
					}
					} 
				}
				State = 801;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionStartContext : ParserRuleContext {
		public PrimaryExpressionStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpressionStart; } }
		public string RuleName { get { return "PrimaryExpressionStart"; } }
	 
		public PrimaryExpressionStartContext() { }
		public virtual void CopyFrom(PrimaryExpressionStartContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ObjectCreationExpressionFullContext : PrimaryExpressionStartContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AnonymousObjectInitializerContext anonymousObjectInitializer() {
			return GetRuleContext<AnonymousObjectInitializerContext>(0);
		}
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ObjectCreationExpressionContext objectCreationExpression() {
			return GetRuleContext<ObjectCreationExpressionContext>(0);
		}
		public ObjectOrCollectionInitializerContext objectOrCollectionInitializer() {
			return GetRuleContext<ObjectOrCollectionInitializerContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ObjectCreationExpressionFullContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpressionFull(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpressionFull(this);
		}
	}
	public partial class LiteralAccessExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode LITERAL_ACCESS() { return GetToken(CSharpParser.LITERAL_ACCESS, 0); }
		public LiteralAccessExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralAccessExpression(this);
		}
	}
	public partial class DefaultValueExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public DefaultValueExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDefaultValueExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDefaultValueExpression(this);
		}
	}
	public partial class BaseAccessExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode DOT() { return GetToken(CSharpParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public BaseAccessExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBaseAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBaseAccessExpression(this);
		}
	}
	public partial class SizeofExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public SizeofExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSizeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSizeofExpression(this);
		}
	}
	public partial class ParenthesisExpressionsContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ParenthesisExpressionsContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParenthesisExpressions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParenthesisExpressions(this);
		}
	}
	public partial class ThisReferenceExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ThisReferenceExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThisReferenceExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThisReferenceExpression(this);
		}
	}
	public partial class AnonymousMethodExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
			return GetRuleContext<ExplicitAnonymousFunctionParameterListContext>(0);
		}
		public AnonymousMethodExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousMethodExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousMethodExpression(this);
		}
	}
	public partial class TypeofExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public UnboundTypeNameContext unboundTypeName() {
			return GetRuleContext<UnboundTypeNameContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public TypeofExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeofExpression(this);
		}
	}
	public partial class TupleExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public TupleExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTupleExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTupleExpression(this);
		}
	}
	public partial class UncheckedExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public UncheckedExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedExpression(this);
		}
	}
	public partial class SimpleNameExpressionContext : PrimaryExpressionStartContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public SimpleNameExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSimpleNameExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSimpleNameExpression(this);
		}
	}
	public partial class MemberAccessExpressionContext : PrimaryExpressionStartContext {
		public PredefinedTypeContext predefinedType() {
			return GetRuleContext<PredefinedTypeContext>(0);
		}
		public QualifiedAliasMemberContext qualifiedAliasMember() {
			return GetRuleContext<QualifiedAliasMemberContext>(0);
		}
		public MemberAccessExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccessExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccessExpression(this);
		}
	}
	public partial class CheckedExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public CheckedExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedExpression(this);
		}
	}
	public partial class LiteralExpressionContext : PrimaryExpressionStartContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteralExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteralExpression(this);
		}
	}
	public partial class NameofExpressionContext : PrimaryExpressionStartContext {
		public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public NameofExpressionContext(PrimaryExpressionStartContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNameofExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNameofExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionStartContext PrimaryExpressionStart() {
		PrimaryExpressionStartContext _localctx = new PrimaryExpressionStartContext(Context, State);
		EnterRule(_localctx, 72, RULE_primaryExpressionStart);
		int _la;
		try {
			int _alt;
			State = 923;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,75,Context) ) {
			case 1:
				_localctx = new LiteralExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 802; Literal();
				}
				break;
			case 2:
				_localctx = new SimpleNameExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 803; Identifier();
				State = 805;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 804; TypeArgumentList();
					}
					break;
				}
				}
				break;
			case 3:
				_localctx = new ParenthesisExpressionsContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 807; Match(OPEN_PARENS);
				State = 808; Expression();
				State = 809; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 811; PredefinedType();
				}
				break;
			case 5:
				_localctx = new MemberAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 812; QualifiedAliasMember();
				}
				break;
			case 6:
				_localctx = new LiteralAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 813; Match(LITERAL_ACCESS);
				}
				break;
			case 7:
				_localctx = new ThisReferenceExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 814; Match(THIS);
				}
				break;
			case 8:
				_localctx = new BaseAccessExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 815; Match(BASE);
				State = 825;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DOT:
					{
					State = 816; Match(DOT);
					State = 817; Identifier();
					State = 819;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 818; TypeArgumentList();
						}
						break;
					}
					}
					break;
				case OPEN_BRACKET:
					{
					State = 821; Match(OPEN_BRACKET);
					State = 822; ExpressionList();
					State = 823; Match(CLOSE_BRACKET);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				_localctx = new ObjectCreationExpressionFullContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 827; Match(NEW);
				State = 856;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BOOL:
				case BY:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DESCENDING:
				case DOUBLE:
				case DYNAMIC:
				case EQUALS:
				case FLOAT:
				case FROM:
				case GET:
				case GROUP:
				case INT:
				case INTO:
				case JOIN:
				case LET:
				case LONG:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SBYTE:
				case SELECT:
				case SET:
				case SHORT:
				case STRING:
				case UINT:
				case ULONG:
				case UNMANAGED:
				case USHORT:
				case VAR:
				case VOID:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
				case OPEN_PARENS:
					{
					State = 828; Type();
					State = 850;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
					case 1:
						{
						State = 829; ObjectCreationExpression();
						}
						break;
					case 2:
						{
						State = 830; ObjectOrCollectionInitializer();
						}
						break;
					case 3:
						{
						State = 831; Match(OPEN_BRACKET);
						State = 832; ExpressionList();
						State = 833; Match(CLOSE_BRACKET);
						State = 837;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
						while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
							if ( _alt==1 ) {
								{
								{
								State = 834; RankSpecifier();
								}
								} 
							}
							State = 839;
							ErrorHandler.Sync(this);
							_alt = Interpreter.AdaptivePredict(TokenStream,63,Context);
						}
						State = 841;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==OPEN_BRACE) {
							{
							State = 840; ArrayInitializer();
							}
						}

						}
						break;
					case 4:
						{
						State = 844;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						do {
							{
							{
							State = 843; RankSpecifier();
							}
							}
							State = 846;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
						} while ( _la==OPEN_BRACKET );
						State = 848; ArrayInitializer();
						}
						break;
					}
					}
					break;
				case OPEN_BRACE:
					{
					State = 852; AnonymousObjectInitializer();
					}
					break;
				case OPEN_BRACKET:
					{
					State = 853; RankSpecifier();
					State = 854; ArrayInitializer();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 10:
				_localctx = new TupleExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 858; Match(OPEN_PARENS);
				State = 859; Argument();
				State = 862;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 860; Match(COMMA);
					State = 861; Argument();
					}
					}
					State = 864;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA );
				State = 866; Match(CLOSE_PARENS);
				}
				break;
			case 11:
				_localctx = new TypeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 868; Match(TYPEOF);
				State = 869; Match(OPEN_PARENS);
				State = 873;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,69,Context) ) {
				case 1:
					{
					State = 870; UnboundTypeName();
					}
					break;
				case 2:
					{
					State = 871; Type();
					}
					break;
				case 3:
					{
					State = 872; Match(VOID);
					}
					break;
				}
				State = 875; Match(CLOSE_PARENS);
				}
				break;
			case 12:
				_localctx = new CheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 876; Match(CHECKED);
				State = 877; Match(OPEN_PARENS);
				State = 878; Expression();
				State = 879; Match(CLOSE_PARENS);
				}
				break;
			case 13:
				_localctx = new UncheckedExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 881; Match(UNCHECKED);
				State = 882; Match(OPEN_PARENS);
				State = 883; Expression();
				State = 884; Match(CLOSE_PARENS);
				}
				break;
			case 14:
				_localctx = new DefaultValueExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 886; Match(DEFAULT);
				State = 891;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
				case 1:
					{
					State = 887; Match(OPEN_PARENS);
					State = 888; Type();
					State = 889; Match(CLOSE_PARENS);
					}
					break;
				}
				}
				break;
			case 15:
				_localctx = new AnonymousMethodExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 894;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASYNC) {
					{
					State = 893; Match(ASYNC);
					}
				}

				State = 896; Match(DELEGATE);
				State = 902;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PARENS) {
					{
					State = 897; Match(OPEN_PARENS);
					State = 899;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
						{
						State = 898; ExplicitAnonymousFunctionParameterList();
						}
					}

					State = 901; Match(CLOSE_PARENS);
					}
				}

				State = 904; Block();
				}
				break;
			case 16:
				_localctx = new SizeofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 905; Match(SIZEOF);
				State = 906; Match(OPEN_PARENS);
				State = 907; Type();
				State = 908; Match(CLOSE_PARENS);
				}
				break;
			case 17:
				_localctx = new NameofExpressionContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 910; Match(NAMEOF);
				State = 911; Match(OPEN_PARENS);
				State = 917;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 912; Identifier();
						State = 913; Match(DOT);
						}
						} 
					}
					State = 919;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,74,Context);
				}
				State = 920; Identifier();
				State = 921; Match(CLOSE_PARENS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowableExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public ThrowableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwableExpression; } }
		public string RuleName { get { return "ThrowableExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowableExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowableExpression(this);
		}
	}

	[RuleVersion(0)]
	public ThrowableExpressionContext ThrowableExpression() {
		ThrowableExpressionContext _localctx = new ThrowableExpressionContext(Context, State);
		EnterRule(_localctx, 74, RULE_throwableExpression);
		try {
			State = 927;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 925; Expression();
				}
				break;
			case THROW:
				EnterOuterAlt(_localctx, 2);
				{
				State = 926; ThrowExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExpressionContext : ParserRuleContext {
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwExpression; } }
		public string RuleName { get { return "ThrowExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowExpression(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExpressionContext ThrowExpression() {
		ThrowExpressionContext _localctx = new ThrowExpressionContext(Context, State);
		EnterRule(_localctx, 76, RULE_throwExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 929; Match(THROW);
			State = 930; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberAccessContext : ParserRuleContext {
		public ITerminalNode DOT() { return GetToken(CSharpParser.DOT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public MemberAccessContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberAccess; } }
		public string RuleName { get { return "MemberAccess"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberAccess(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberAccess(this);
		}
	}

	[RuleVersion(0)]
	public MemberAccessContext MemberAccess() {
		MemberAccessContext _localctx = new MemberAccessContext(Context, State);
		EnterRule(_localctx, 78, RULE_memberAccess);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 932; Match(INTERR);
				}
			}

			State = 935; Match(DOT);
			State = 936; Identifier();
			State = 938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				{
				State = 937; TypeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BracketExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public IndexerArgumentContext[] indexerArgument() {
			return GetRuleContexts<IndexerArgumentContext>();
		}
		public IndexerArgumentContext indexerArgument(int i) {
			return GetRuleContext<IndexerArgumentContext>(i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public BracketExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracketExpression; } }
		public string RuleName { get { return "BracketExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBracketExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBracketExpression(this);
		}
	}

	[RuleVersion(0)]
	public BracketExpressionContext BracketExpression() {
		BracketExpressionContext _localctx = new BracketExpressionContext(Context, State);
		EnterRule(_localctx, 80, RULE_bracketExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 941;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTERR) {
				{
				State = 940; Match(INTERR);
				}
			}

			State = 943; Match(OPEN_BRACKET);
			State = 944; IndexerArgument();
			State = 949;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 945; Match(COMMA);
				State = 946; IndexerArgument();
				}
				}
				State = 951;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 952; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public IndexerArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexerArgument; } }
		public string RuleName { get { return "IndexerArgument"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexerArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexerArgument(this);
		}
	}

	[RuleVersion(0)]
	public IndexerArgumentContext IndexerArgument() {
		IndexerArgumentContext _localctx = new IndexerArgumentContext(Context, State);
		EnterRule(_localctx, 82, RULE_indexerArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,81,Context) ) {
			case 1:
				{
				State = 954; Identifier();
				State = 955; Match(COLON);
				}
				break;
			}
			State = 959; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredefinedTypeContext : ParserRuleContext {
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public PredefinedTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predefinedType; } }
		public string RuleName { get { return "PredefinedType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPredefinedType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPredefinedType(this);
		}
	}

	[RuleVersion(0)]
	public PredefinedTypeContext PredefinedType() {
		PredefinedTypeContext _localctx = new PredefinedTypeContext(Context, State);
		EnterRule(_localctx, 84, RULE_predefinedType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 961;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOL) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (SBYTE - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (USHORT - 67)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public string RuleName { get { return "ExpressionList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext ExpressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 86, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 963; Expression();
			State = 968;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 964; Match(COMMA);
				State = 965; Expression();
				}
				}
				State = 970;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectOrCollectionInitializerContext : ParserRuleContext {
		public ObjectInitializerContext objectInitializer() {
			return GetRuleContext<ObjectInitializerContext>(0);
		}
		public CollectionInitializerContext collectionInitializer() {
			return GetRuleContext<CollectionInitializerContext>(0);
		}
		public ObjectOrCollectionInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectOrCollectionInitializer; } }
		public string RuleName { get { return "ObjectOrCollectionInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectOrCollectionInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectOrCollectionInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectOrCollectionInitializerContext ObjectOrCollectionInitializer() {
		ObjectOrCollectionInitializerContext _localctx = new ObjectOrCollectionInitializerContext(Context, State);
		EnterRule(_localctx, 88, RULE_objectOrCollectionInitializer);
		try {
			State = 973;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971; ObjectInitializer();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972; CollectionInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public MemberInitializerListContext memberInitializerList() {
			return GetRuleContext<MemberInitializerListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public ObjectInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectInitializer; } }
		public string RuleName { get { return "ObjectInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ObjectInitializerContext ObjectInitializer() {
		ObjectInitializerContext _localctx = new ObjectInitializerContext(Context, State);
		EnterRule(_localctx, 90, RULE_objectInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975; Match(OPEN_BRACE);
			State = 980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (UNMANAGED - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (OPEN_BRACKET - 68)))) != 0)) {
				{
				State = 976; MemberInitializerList();
				State = 978;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 977; Match(COMMA);
					}
				}

				}
			}

			State = 982; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerListContext : ParserRuleContext {
		public MemberInitializerContext[] memberInitializer() {
			return GetRuleContexts<MemberInitializerContext>();
		}
		public MemberInitializerContext memberInitializer(int i) {
			return GetRuleContext<MemberInitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public MemberInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializerList; } }
		public string RuleName { get { return "MemberInitializerList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerListContext MemberInitializerList() {
		MemberInitializerListContext _localctx = new MemberInitializerListContext(Context, State);
		EnterRule(_localctx, 92, RULE_memberInitializerList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 984; MemberInitializer();
			State = 989;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 985; Match(COMMA);
					State = 986; MemberInitializer();
					}
					} 
				}
				State = 991;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,86,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberInitializerContext : ParserRuleContext {
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public InitializerValueContext initializerValue() {
			return GetRuleContext<InitializerValueContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public MemberInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberInitializer; } }
		public string RuleName { get { return "MemberInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberInitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemberInitializerContext MemberInitializer() {
		MemberInitializerContext _localctx = new MemberInitializerContext(Context, State);
		EnterRule(_localctx, 94, RULE_memberInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 997;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				{
				State = 992; Identifier();
				}
				break;
			case OPEN_BRACKET:
				{
				State = 993; Match(OPEN_BRACKET);
				State = 994; Expression();
				State = 995; Match(CLOSE_BRACKET);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 999; Match(ASSIGNMENT);
			State = 1000; InitializerValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ObjectOrCollectionInitializerContext objectOrCollectionInitializer() {
			return GetRuleContext<ObjectOrCollectionInitializerContext>(0);
		}
		public InitializerValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerValue; } }
		public string RuleName { get { return "InitializerValue"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInitializerValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInitializerValue(this);
		}
	}

	[RuleVersion(0)]
	public InitializerValueContext InitializerValue() {
		InitializerValueContext _localctx = new InitializerValueContext(Context, State);
		EnterRule(_localctx, 96, RULE_initializerValue);
		try {
			State = 1004;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1002; Expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1003; ObjectOrCollectionInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollectionInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ElementInitializerContext[] elementInitializer() {
			return GetRuleContexts<ElementInitializerContext>();
		}
		public ElementInitializerContext elementInitializer(int i) {
			return GetRuleContext<ElementInitializerContext>(i);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public CollectionInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collectionInitializer; } }
		public string RuleName { get { return "CollectionInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCollectionInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCollectionInitializer(this);
		}
	}

	[RuleVersion(0)]
	public CollectionInitializerContext CollectionInitializer() {
		CollectionInitializerContext _localctx = new CollectionInitializerContext(Context, State);
		EnterRule(_localctx, 98, RULE_collectionInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1006; Match(OPEN_BRACE);
			State = 1007; ElementInitializer();
			State = 1012;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1008; Match(COMMA);
					State = 1009; ElementInitializer();
					}
					} 
				}
				State = 1014;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			State = 1016;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 1015; Match(COMMA);
				}
			}

			State = 1018; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementInitializerContext : ParserRuleContext {
		public NonAssignmentExpressionContext nonAssignmentExpression() {
			return GetRuleContext<NonAssignmentExpressionContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ElementInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementInitializer; } }
		public string RuleName { get { return "ElementInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterElementInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitElementInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ElementInitializerContext ElementInitializer() {
		ElementInitializerContext _localctx = new ElementInitializerContext(Context, State);
		EnterRule(_localctx, 100, RULE_elementInitializer);
		try {
			State = 1025;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1020; NonAssignmentExpression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1021; Match(OPEN_BRACE);
				State = 1022; ExpressionList();
				State = 1023; Match(CLOSE_BRACE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousObjectInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public MemberDeclaratorListContext memberDeclaratorList() {
			return GetRuleContext<MemberDeclaratorListContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public AnonymousObjectInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousObjectInitializer; } }
		public string RuleName { get { return "AnonymousObjectInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousObjectInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousObjectInitializer(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousObjectInitializerContext AnonymousObjectInitializer() {
		AnonymousObjectInitializerContext _localctx = new AnonymousObjectInitializerContext(Context, State);
		EnterRule(_localctx, 102, RULE_anonymousObjectInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1027; Match(OPEN_BRACE);
			State = 1032;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0)) {
				{
				State = 1028; MemberDeclaratorList();
				State = 1030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1029; Match(COMMA);
					}
				}

				}
			}

			State = 1034; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorListContext : ParserRuleContext {
		public MemberDeclaratorContext[] memberDeclarator() {
			return GetRuleContexts<MemberDeclaratorContext>();
		}
		public MemberDeclaratorContext memberDeclarator(int i) {
			return GetRuleContext<MemberDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public MemberDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaratorList; } }
		public string RuleName { get { return "MemberDeclaratorList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorListContext MemberDeclaratorList() {
		MemberDeclaratorListContext _localctx = new MemberDeclaratorListContext(Context, State);
		EnterRule(_localctx, 104, RULE_memberDeclaratorList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; MemberDeclarator();
			State = 1041;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1037; Match(COMMA);
					State = 1038; MemberDeclarator();
					}
					} 
				}
				State = 1043;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,94,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MemberDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclarator; } }
		public string RuleName { get { return "MemberDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorContext MemberDeclarator() {
		MemberDeclaratorContext _localctx = new MemberDeclaratorContext(Context, State);
		EnterRule(_localctx, 106, RULE_memberDeclarator);
		try {
			State = 1049;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,95,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1044; PrimaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1045; Identifier();
				State = 1046; Match(ASSIGNMENT);
				State = 1047; Expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnboundTypeNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharpParser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public GenericDimensionSpecifierContext[] genericDimensionSpecifier() {
			return GetRuleContexts<GenericDimensionSpecifierContext>();
		}
		public GenericDimensionSpecifierContext genericDimensionSpecifier(int i) {
			return GetRuleContext<GenericDimensionSpecifierContext>(i);
		}
		public UnboundTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unboundTypeName; } }
		public string RuleName { get { return "UnboundTypeName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnboundTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnboundTypeName(this);
		}
	}

	[RuleVersion(0)]
	public UnboundTypeNameContext UnboundTypeName() {
		UnboundTypeNameContext _localctx = new UnboundTypeNameContext(Context, State);
		EnterRule(_localctx, 108, RULE_unboundTypeName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1051; Identifier();
			State = 1060;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLOSE_PARENS:
			case DOT:
			case LT:
				{
				State = 1053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1052; GenericDimensionSpecifier();
					}
				}

				}
				break;
			case DOUBLE_COLON:
				{
				State = 1055; Match(DOUBLE_COLON);
				State = 1056; Identifier();
				State = 1058;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1057; GenericDimensionSpecifier();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1069;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1062; Match(DOT);
				State = 1063; Identifier();
				State = 1065;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1064; GenericDimensionSpecifier();
					}
				}

				}
				}
				State = 1071;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericDimensionSpecifierContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public GenericDimensionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericDimensionSpecifier; } }
		public string RuleName { get { return "GenericDimensionSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGenericDimensionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGenericDimensionSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public GenericDimensionSpecifierContext GenericDimensionSpecifier() {
		GenericDimensionSpecifierContext _localctx = new GenericDimensionSpecifierContext(Context, State);
		EnterRule(_localctx, 110, RULE_genericDimensionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1072; Match(LT);
			State = 1076;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1073; Match(COMMA);
				}
				}
				State = 1078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1079; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		public IsTypePatternArmsContext isTypePatternArms() {
			return GetRuleContext<IsTypePatternArmsContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IsTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isType; } }
		public string RuleName { get { return "IsType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsType(this);
		}
	}

	[RuleVersion(0)]
	public IsTypeContext IsType() {
		IsTypeContext _localctx = new IsTypeContext(Context, State);
		EnterRule(_localctx, 112, RULE_isType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1081; BaseType();
			State = 1086;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					State = 1084;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 1082; RankSpecifier();
						}
						break;
					case STAR:
						{
						State = 1083; Match(STAR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				State = 1088;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
			}
			State = 1090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				{
				State = 1089; Match(INTERR);
				}
				break;
			}
			State = 1093;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 1092; IsTypePatternArms();
				}
			}

			State = 1096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
			case 1:
				{
				State = 1095; Identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmsContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public IsTypePatternArmContext[] isTypePatternArm() {
			return GetRuleContexts<IsTypePatternArmContext>();
		}
		public IsTypePatternArmContext isTypePatternArm(int i) {
			return GetRuleContext<IsTypePatternArmContext>(i);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public IsTypePatternArmsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArms; } }
		public string RuleName { get { return "IsTypePatternArms"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArms(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArms(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmsContext IsTypePatternArms() {
		IsTypePatternArmsContext _localctx = new IsTypePatternArmsContext(Context, State);
		EnterRule(_localctx, 114, RULE_isTypePatternArms);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1098; Match(OPEN_BRACE);
			State = 1099; IsTypePatternArm();
			State = 1104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1100; Match(COMMA);
				State = 1101; IsTypePatternArm();
				}
				}
				State = 1106;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1107; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsTypePatternArmContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IsTypePatternArmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isTypePatternArm; } }
		public string RuleName { get { return "IsTypePatternArm"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIsTypePatternArm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIsTypePatternArm(this);
		}
	}

	[RuleVersion(0)]
	public IsTypePatternArmContext IsTypePatternArm() {
		IsTypePatternArmContext _localctx = new IsTypePatternArmContext(Context, State);
		EnterRule(_localctx, 116, RULE_isTypePatternArm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1109; Identifier();
			State = 1110; Match(COLON);
			State = 1111; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public AnonymousFunctionSignatureContext anonymousFunctionSignature() {
			return GetRuleContext<AnonymousFunctionSignatureContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public AnonymousFunctionBodyContext anonymousFunctionBody() {
			return GetRuleContext<AnonymousFunctionBodyContext>(0);
		}
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public string RuleName { get { return "LambdaExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext LambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 118, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 1113; Match(ASYNC);
				}
				break;
			}
			State = 1116; AnonymousFunctionSignature();
			State = 1117; RightArrow();
			State = 1118; AnonymousFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionSignatureContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ExplicitAnonymousFunctionParameterListContext explicitAnonymousFunctionParameterList() {
			return GetRuleContext<ExplicitAnonymousFunctionParameterListContext>(0);
		}
		public ImplicitAnonymousFunctionParameterListContext implicitAnonymousFunctionParameterList() {
			return GetRuleContext<ImplicitAnonymousFunctionParameterListContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AnonymousFunctionSignatureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionSignature; } }
		public string RuleName { get { return "AnonymousFunctionSignature"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionSignature(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionSignature(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionSignatureContext AnonymousFunctionSignature() {
		AnonymousFunctionSignatureContext _localctx = new AnonymousFunctionSignatureContext(Context, State);
		EnterRule(_localctx, 120, RULE_anonymousFunctionSignature);
		try {
			State = 1131;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,109,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1120; Match(OPEN_PARENS);
				State = 1121; Match(CLOSE_PARENS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1122; Match(OPEN_PARENS);
				State = 1123; ExplicitAnonymousFunctionParameterList();
				State = 1124; Match(CLOSE_PARENS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1126; Match(OPEN_PARENS);
				State = 1127; ImplicitAnonymousFunctionParameterList();
				State = 1128; Match(CLOSE_PARENS);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1130; Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public ExplicitAnonymousFunctionParameterContext[] explicitAnonymousFunctionParameter() {
			return GetRuleContexts<ExplicitAnonymousFunctionParameterContext>();
		}
		public ExplicitAnonymousFunctionParameterContext explicitAnonymousFunctionParameter(int i) {
			return GetRuleContext<ExplicitAnonymousFunctionParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ExplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameterList; } }
		public string RuleName { get { return "ExplicitAnonymousFunctionParameterList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterListContext ExplicitAnonymousFunctionParameterList() {
		ExplicitAnonymousFunctionParameterListContext _localctx = new ExplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 122, RULE_explicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1133; ExplicitAnonymousFunctionParameter();
			State = 1138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1134; Match(COMMA);
				State = 1135; ExplicitAnonymousFunctionParameter();
				}
				}
				State = 1140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitAnonymousFunctionParameterContext : ParserRuleContext {
		public IToken refout;
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExplicitAnonymousFunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitAnonymousFunctionParameter; } }
		public string RuleName { get { return "ExplicitAnonymousFunctionParameter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExplicitAnonymousFunctionParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExplicitAnonymousFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitAnonymousFunctionParameterContext ExplicitAnonymousFunctionParameter() {
		ExplicitAnonymousFunctionParameterContext _localctx = new ExplicitAnonymousFunctionParameterContext(Context, State);
		EnterRule(_localctx, 124, RULE_explicitAnonymousFunctionParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1142;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (IN - 53)) | (1L << (OUT - 53)) | (1L << (REF - 53)))) != 0)) {
				{
				State = 1141;
				_localctx.refout = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (IN - 53)) | (1L << (OUT - 53)) | (1L << (REF - 53)))) != 0)) ) {
					_localctx.refout = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 1144; Type();
			State = 1145; Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImplicitAnonymousFunctionParameterListContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ImplicitAnonymousFunctionParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_implicitAnonymousFunctionParameterList; } }
		public string RuleName { get { return "ImplicitAnonymousFunctionParameterList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterImplicitAnonymousFunctionParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitImplicitAnonymousFunctionParameterList(this);
		}
	}

	[RuleVersion(0)]
	public ImplicitAnonymousFunctionParameterListContext ImplicitAnonymousFunctionParameterList() {
		ImplicitAnonymousFunctionParameterListContext _localctx = new ImplicitAnonymousFunctionParameterListContext(Context, State);
		EnterRule(_localctx, 126, RULE_implicitAnonymousFunctionParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1147; Identifier();
			State = 1152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1148; Match(COMMA);
				State = 1149; Identifier();
				}
				}
				State = 1154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnonymousFunctionBodyContext : ParserRuleContext {
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AnonymousFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_anonymousFunctionBody; } }
		public string RuleName { get { return "AnonymousFunctionBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAnonymousFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAnonymousFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public AnonymousFunctionBodyContext AnonymousFunctionBody() {
		AnonymousFunctionBodyContext _localctx = new AnonymousFunctionBodyContext(Context, State);
		EnterRule(_localctx, 128, RULE_anonymousFunctionBody);
		try {
			State = 1157;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case THROW:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1155; ThrowableExpression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1156; Block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		public string RuleName { get { return "QueryExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext QueryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 130, RULE_queryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1159; FromClause();
			State = 1160; QueryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		public string RuleName { get { return "FromClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext FromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 132, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1162; Match(FROM);
			State = 1164;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				{
				State = 1163; Type();
				}
				break;
			}
			State = 1166; Identifier();
			State = 1167; Match(IN);
			State = 1168; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyContext : ParserRuleContext {
		public SelectOrGroupClauseContext selectOrGroupClause() {
			return GetRuleContext<SelectOrGroupClauseContext>(0);
		}
		public QueryBodyClauseContext[] queryBodyClause() {
			return GetRuleContexts<QueryBodyClauseContext>();
		}
		public QueryBodyClauseContext queryBodyClause(int i) {
			return GetRuleContext<QueryBodyClauseContext>(i);
		}
		public QueryContinuationContext queryContinuation() {
			return GetRuleContext<QueryContinuationContext>(0);
		}
		public QueryBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBody; } }
		public string RuleName { get { return "QueryBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQueryBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQueryBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyContext QueryBody() {
		QueryBodyContext _localctx = new QueryBodyContext(Context, State);
		EnterRule(_localctx, 134, RULE_queryBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1173;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((((_la - 47)) & ~0x3f) == 0 && ((1L << (_la - 47)) & ((1L << (FROM - 47)) | (1L << (JOIN - 47)) | (1L << (LET - 47)) | (1L << (ORDERBY - 47)) | (1L << (WHERE - 47)))) != 0)) {
				{
				{
				State = 1170; QueryBodyClause();
				}
				}
				State = 1175;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1176; SelectOrGroupClause();
			State = 1178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 1177; QueryContinuation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryBodyClauseContext : ParserRuleContext {
		public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		public LetClauseContext letClause() {
			return GetRuleContext<LetClauseContext>(0);
		}
		public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public CombinedJoinClauseContext combinedJoinClause() {
			return GetRuleContext<CombinedJoinClauseContext>(0);
		}
		public OrderbyClauseContext orderbyClause() {
			return GetRuleContext<OrderbyClauseContext>(0);
		}
		public QueryBodyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryBodyClause; } }
		public string RuleName { get { return "QueryBodyClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQueryBodyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQueryBodyClause(this);
		}
	}

	[RuleVersion(0)]
	public QueryBodyClauseContext QueryBodyClause() {
		QueryBodyClauseContext _localctx = new QueryBodyClauseContext(Context, State);
		EnterRule(_localctx, 136, RULE_queryBodyClause);
		try {
			State = 1185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FROM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1180; FromClause();
				}
				break;
			case LET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1181; LetClause();
				}
				break;
			case WHERE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1182; WhereClause();
				}
				break;
			case JOIN:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1183; CombinedJoinClause();
				}
				break;
			case ORDERBY:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1184; OrderbyClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LetClauseContext : ParserRuleContext {
		public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_letClause; } }
		public string RuleName { get { return "LetClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLetClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLetClause(this);
		}
	}

	[RuleVersion(0)]
	public LetClauseContext LetClause() {
		LetClauseContext _localctx = new LetClauseContext(Context, State);
		EnterRule(_localctx, 138, RULE_letClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1187; Match(LET);
			State = 1188; Identifier();
			State = 1189; Match(ASSIGNMENT);
			State = 1190; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		public string RuleName { get { return "WhereClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext WhereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 140, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1192; Match(WHERE);
			State = 1193; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CombinedJoinClauseContext : ParserRuleContext {
		public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public CombinedJoinClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_combinedJoinClause; } }
		public string RuleName { get { return "CombinedJoinClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCombinedJoinClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCombinedJoinClause(this);
		}
	}

	[RuleVersion(0)]
	public CombinedJoinClauseContext CombinedJoinClause() {
		CombinedJoinClauseContext _localctx = new CombinedJoinClauseContext(Context, State);
		EnterRule(_localctx, 142, RULE_combinedJoinClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1195; Match(JOIN);
			State = 1197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
			case 1:
				{
				State = 1196; Type();
				}
				break;
			}
			State = 1199; Identifier();
			State = 1200; Match(IN);
			State = 1201; Expression();
			State = 1202; Match(ON);
			State = 1203; Expression();
			State = 1204; Match(EQUALS);
			State = 1205; Expression();
			State = 1208;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INTO) {
				{
				State = 1206; Match(INTO);
				State = 1207; Identifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderbyClauseContext : ParserRuleContext {
		public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		public OrderingContext[] ordering() {
			return GetRuleContexts<OrderingContext>();
		}
		public OrderingContext ordering(int i) {
			return GetRuleContext<OrderingContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public OrderbyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderbyClause; } }
		public string RuleName { get { return "OrderbyClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrderbyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrderbyClause(this);
		}
	}

	[RuleVersion(0)]
	public OrderbyClauseContext OrderbyClause() {
		OrderbyClauseContext _localctx = new OrderbyClauseContext(Context, State);
		EnterRule(_localctx, 144, RULE_orderbyClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1210; Match(ORDERBY);
			State = 1211; Ordering();
			State = 1216;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1212; Match(COMMA);
				State = 1213; Ordering();
				}
				}
				State = 1218;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderingContext : ParserRuleContext {
		public IToken dir;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public OrderingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ordering; } }
		public string RuleName { get { return "Ordering"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOrdering(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOrdering(this);
		}
	}

	[RuleVersion(0)]
	public OrderingContext Ordering() {
		OrderingContext _localctx = new OrderingContext(Context, State);
		EnterRule(_localctx, 146, RULE_ordering);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1219; Expression();
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASCENDING || _la==DESCENDING) {
				{
				State = 1220;
				_localctx.dir = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==ASCENDING || _la==DESCENDING) ) {
					_localctx.dir = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOrGroupClauseContext : ParserRuleContext {
		public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public SelectOrGroupClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOrGroupClause; } }
		public string RuleName { get { return "SelectOrGroupClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSelectOrGroupClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSelectOrGroupClause(this);
		}
	}

	[RuleVersion(0)]
	public SelectOrGroupClauseContext SelectOrGroupClause() {
		SelectOrGroupClauseContext _localctx = new SelectOrGroupClauseContext(Context, State);
		EnterRule(_localctx, 148, RULE_selectOrGroupClause);
		try {
			State = 1230;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SELECT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1223; Match(SELECT);
				State = 1224; Expression();
				}
				break;
			case GROUP:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1225; Match(GROUP);
				State = 1226; Expression();
				State = 1227; Match(BY);
				State = 1228; Expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContinuationContext : ParserRuleContext {
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public QueryBodyContext queryBody() {
			return GetRuleContext<QueryBodyContext>(0);
		}
		public QueryContinuationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryContinuation; } }
		public string RuleName { get { return "QueryContinuation"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQueryContinuation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQueryContinuation(this);
		}
	}

	[RuleVersion(0)]
	public QueryContinuationContext QueryContinuation() {
		QueryContinuationContext _localctx = new QueryContinuationContext(Context, State);
		EnterRule(_localctx, 150, RULE_queryContinuation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1232; Match(INTO);
			State = 1233; Identifier();
			State = 1234; QueryBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public string RuleName { get { return "Statement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext Statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 152, RULE_statement);
		try {
			State = 1239;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1236; LabeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1237; DeclarationStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1238; EmbeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public LocalConstantDeclarationContext localConstantDeclaration() {
			return GetRuleContext<LocalConstantDeclarationContext>(0);
		}
		public LocalFunctionDeclarationContext localFunctionDeclaration() {
			return GetRuleContext<LocalFunctionDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public string RuleName { get { return "DeclarationStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext DeclarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 154, RULE_declarationStatement);
		try {
			State = 1248;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1241; LocalVariableDeclaration();
				State = 1242; Match(SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1244; LocalConstantDeclaration();
				State = 1245; Match(SEMICOLON);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1247; LocalFunctionDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalFunctionDeclarationContext : ParserRuleContext {
		public LocalFunctionHeaderContext localFunctionHeader() {
			return GetRuleContext<LocalFunctionHeaderContext>(0);
		}
		public LocalFunctionBodyContext localFunctionBody() {
			return GetRuleContext<LocalFunctionBodyContext>(0);
		}
		public LocalFunctionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localFunctionDeclaration; } }
		public string RuleName { get { return "LocalFunctionDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalFunctionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalFunctionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalFunctionDeclarationContext LocalFunctionDeclaration() {
		LocalFunctionDeclarationContext _localctx = new LocalFunctionDeclarationContext(Context, State);
		EnterRule(_localctx, 156, RULE_localFunctionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1250; LocalFunctionHeader();
			State = 1251; LocalFunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalFunctionHeaderContext : ParserRuleContext {
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public LocalFunctionModifiersContext localFunctionModifiers() {
			return GetRuleContext<LocalFunctionModifiersContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public LocalFunctionHeaderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localFunctionHeader; } }
		public string RuleName { get { return "LocalFunctionHeader"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalFunctionHeader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalFunctionHeader(this);
		}
	}

	[RuleVersion(0)]
	public LocalFunctionHeaderContext LocalFunctionHeader() {
		LocalFunctionHeaderContext _localctx = new LocalFunctionHeaderContext(Context, State);
		EnterRule(_localctx, 158, RULE_localFunctionHeader);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
			case 1:
				{
				State = 1253; LocalFunctionModifiers();
				}
				break;
			}
			State = 1256; ReturnType();
			State = 1257; Identifier();
			State = 1259;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1258; TypeParameterList();
				}
			}

			State = 1261; Match(OPEN_PARENS);
			State = 1263;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
				{
				State = 1262; FormalParameterList();
				}
			}

			State = 1265; Match(CLOSE_PARENS);
			State = 1267;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 1266; TypeParameterConstraintsClauses();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalFunctionModifiersContext : ParserRuleContext {
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public LocalFunctionModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localFunctionModifiers; } }
		public string RuleName { get { return "LocalFunctionModifiers"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalFunctionModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalFunctionModifiers(this);
		}
	}

	[RuleVersion(0)]
	public LocalFunctionModifiersContext LocalFunctionModifiers() {
		LocalFunctionModifiersContext _localctx = new LocalFunctionModifiersContext(Context, State);
		EnterRule(_localctx, 160, RULE_localFunctionModifiers);
		int _la;
		try {
			State = 1275;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASYNC:
			case UNSAFE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 1270; Match(STATIC);
					}
				}

				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1273; Match(STATIC);
				State = 1274;
				_la = TokenStream.LA(1);
				if ( !(_la==ASYNC || _la==UNSAFE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalFunctionBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public LocalFunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localFunctionBody; } }
		public string RuleName { get { return "LocalFunctionBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public LocalFunctionBodyContext LocalFunctionBody() {
		LocalFunctionBodyContext _localctx = new LocalFunctionBodyContext(Context, State);
		EnterRule(_localctx, 162, RULE_localFunctionBody);
		try {
			State = 1282;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1277; Block();
				}
				break;
			case ASSIGNMENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1278; RightArrow();
				State = 1279; ThrowableExpression();
				State = 1280; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public string RuleName { get { return "LabeledStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext LabeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 164, RULE_labeledStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1284; Identifier();
			State = 1285; Match(COLON);
			State = 1286; Statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmbeddedStatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public EmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_embeddedStatement; } }
		public string RuleName { get { return "EmbeddedStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEmbeddedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEmbeddedStatement(this);
		}
	}

	[RuleVersion(0)]
	public EmbeddedStatementContext EmbeddedStatement() {
		EmbeddedStatementContext _localctx = new EmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 166, RULE_embeddedStatement);
		try {
			State = 1290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1288; Block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1289; SimpleEmbeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleEmbeddedStatementContext : ParserRuleContext {
		public SimpleEmbeddedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleEmbeddedStatement; } }
		public string RuleName { get { return "SimpleEmbeddedStatement"; } }
	 
		public SimpleEmbeddedStatementContext() { }
		public virtual void CopyFrom(SimpleEmbeddedStatementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class TryStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CatchClausesContext catchClauses() {
			return GetRuleContext<CatchClausesContext>(0);
		}
		public FinallyClauseContext finallyClause() {
			return GetRuleContext<FinallyClauseContext>(0);
		}
		public TryStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTryStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTryStatement(this);
		}
	}
	public partial class CheckedStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public CheckedStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCheckedStatement(this);
		}
	}
	public partial class ThrowStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ThrowStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterThrowStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitThrowStatement(this);
		}
	}
	public partial class TheEmptyStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public TheEmptyStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTheEmptyStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTheEmptyStatement(this);
		}
	}
	public partial class UnsafeStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UnsafeStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUnsafeStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUnsafeStatement(this);
		}
	}
	public partial class ForStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpParser.SEMICOLON, i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ForInitializerContext forInitializer() {
			return GetRuleContext<ForInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ForIteratorContext forIterator() {
			return GetRuleContext<ForIteratorContext>(0);
		}
		public ForStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForStatement(this);
		}
	}
	public partial class BreakStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public BreakStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBreakStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBreakStatement(this);
		}
	}
	public partial class IfStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public IfBodyContext[] ifBody() {
			return GetRuleContexts<IfBodyContext>();
		}
		public IfBodyContext ifBody(int i) {
			return GetRuleContext<IfBodyContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public IfStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}
	public partial class ReturnStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}
	public partial class GotoStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public GotoStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGotoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGotoStatement(this);
		}
	}
	public partial class SwitchStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public SwitchSectionContext[] switchSection() {
			return GetRuleContexts<SwitchSectionContext>();
		}
		public SwitchSectionContext switchSection(int i) {
			return GetRuleContext<SwitchSectionContext>(i);
		}
		public SwitchStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchStatement(this);
		}
	}
	public partial class FixedStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		public FixedPointerDeclaratorsContext fixedPointerDeclarators() {
			return GetRuleContext<FixedPointerDeclaratorsContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public FixedStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedStatement(this);
		}
	}
	public partial class WhileStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public WhileStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterWhileStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitWhileStatement(this);
		}
	}
	public partial class DoStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public DoStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}
	public partial class ForeachStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public LocalVariableTypeContext localVariableType() {
			return GetRuleContext<LocalVariableTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public ForeachStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForeachStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForeachStatement(this);
		}
	}
	public partial class UncheckedStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public UncheckedStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUncheckedStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUncheckedStatement(this);
		}
	}
	public partial class ExpressionStatementContext : SimpleEmbeddedStatementContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ExpressionStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}
	public partial class ContinueStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ContinueStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterContinueStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitContinueStatement(this);
		}
	}
	public partial class UsingStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ResourceAcquisitionContext resourceAcquisition() {
			return GetRuleContext<ResourceAcquisitionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public UsingStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStatement(this);
		}
	}
	public partial class LockStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public EmbeddedStatementContext embeddedStatement() {
			return GetRuleContext<EmbeddedStatementContext>(0);
		}
		public LockStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
	}
	public partial class YieldStatementContext : SimpleEmbeddedStatementContext {
		public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public YieldStatementContext(SimpleEmbeddedStatementContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterYieldStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitYieldStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleEmbeddedStatementContext SimpleEmbeddedStatement() {
		SimpleEmbeddedStatementContext _localctx = new SimpleEmbeddedStatementContext(Context, State);
		EnterRule(_localctx, 168, RULE_simpleEmbeddedStatement);
		int _la;
		try {
			State = 1422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				_localctx = new TheEmptyStatementContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1292; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new ExpressionStatementContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1293; Expression();
				State = 1294; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new IfStatementContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1296; Match(IF);
				State = 1297; Match(OPEN_PARENS);
				State = 1298; Expression();
				State = 1299; Match(CLOSE_PARENS);
				State = 1300; IfBody();
				State = 1303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
				case 1:
					{
					State = 1301; Match(ELSE);
					State = 1302; IfBody();
					}
					break;
				}
				}
				break;
			case 4:
				_localctx = new SwitchStatementContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 1305; Match(SWITCH);
				State = 1306; Match(OPEN_PARENS);
				State = 1307; Expression();
				State = 1308; Match(CLOSE_PARENS);
				State = 1309; Match(OPEN_BRACE);
				State = 1313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 1310; SwitchSection();
					}
					}
					State = 1315;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1316; Match(CLOSE_BRACE);
				}
				break;
			case 5:
				_localctx = new WhileStatementContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 1318; Match(WHILE);
				State = 1319; Match(OPEN_PARENS);
				State = 1320; Expression();
				State = 1321; Match(CLOSE_PARENS);
				State = 1322; EmbeddedStatement();
				}
				break;
			case 6:
				_localctx = new DoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 1324; Match(DO);
				State = 1325; EmbeddedStatement();
				State = 1326; Match(WHILE);
				State = 1327; Match(OPEN_PARENS);
				State = 1328; Expression();
				State = 1329; Match(CLOSE_PARENS);
				State = 1330; Match(SEMICOLON);
				}
				break;
			case 7:
				_localctx = new ForStatementContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 1332; Match(FOR);
				State = 1333; Match(OPEN_PARENS);
				State = 1335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 1334; ForInitializer();
					}
				}

				State = 1337; Match(SEMICOLON);
				State = 1339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 1338; Expression();
					}
				}

				State = 1341; Match(SEMICOLON);
				State = 1343;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 1342; ForIterator();
					}
				}

				State = 1345; Match(CLOSE_PARENS);
				State = 1346; EmbeddedStatement();
				}
				break;
			case 8:
				_localctx = new ForeachStatementContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 1348;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AWAIT) {
					{
					State = 1347; Match(AWAIT);
					}
				}

				State = 1350; Match(FOREACH);
				State = 1351; Match(OPEN_PARENS);
				State = 1352; LocalVariableType();
				State = 1353; Identifier();
				State = 1354; Match(IN);
				State = 1355; Expression();
				State = 1356; Match(CLOSE_PARENS);
				State = 1357; EmbeddedStatement();
				}
				break;
			case 9:
				_localctx = new BreakStatementContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 1359; Match(BREAK);
				State = 1360; Match(SEMICOLON);
				}
				break;
			case 10:
				_localctx = new ContinueStatementContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 1361; Match(CONTINUE);
				State = 1362; Match(SEMICOLON);
				}
				break;
			case 11:
				_localctx = new GotoStatementContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 1363; Match(GOTO);
				State = 1368;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case UNMANAGED:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 1364; Identifier();
					}
					break;
				case CASE:
					{
					State = 1365; Match(CASE);
					State = 1366; Expression();
					}
					break;
				case DEFAULT:
					{
					State = 1367; Match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1370; Match(SEMICOLON);
				}
				break;
			case 12:
				_localctx = new ReturnStatementContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 1371; Match(RETURN);
				State = 1373;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 1372; Expression();
					}
				}

				State = 1375; Match(SEMICOLON);
				}
				break;
			case 13:
				_localctx = new ThrowStatementContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 1376; Match(THROW);
				State = 1378;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 1377; Expression();
					}
				}

				State = 1380; Match(SEMICOLON);
				}
				break;
			case 14:
				_localctx = new TryStatementContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 1381; Match(TRY);
				State = 1382; Block();
				State = 1388;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 1383; CatchClauses();
					State = 1385;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 1384; FinallyClause();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 1387; FinallyClause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 15:
				_localctx = new CheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 1390; Match(CHECKED);
				State = 1391; Block();
				}
				break;
			case 16:
				_localctx = new UncheckedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 1392; Match(UNCHECKED);
				State = 1393; Block();
				}
				break;
			case 17:
				_localctx = new LockStatementContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 1394; Match(LOCK);
				State = 1395; Match(OPEN_PARENS);
				State = 1396; Expression();
				State = 1397; Match(CLOSE_PARENS);
				State = 1398; EmbeddedStatement();
				}
				break;
			case 18:
				_localctx = new UsingStatementContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 1400; Match(USING);
				State = 1401; Match(OPEN_PARENS);
				State = 1402; ResourceAcquisition();
				State = 1403; Match(CLOSE_PARENS);
				State = 1404; EmbeddedStatement();
				}
				break;
			case 19:
				_localctx = new YieldStatementContext(_localctx);
				EnterOuterAlt(_localctx, 19);
				{
				State = 1406; Match(YIELD);
				State = 1410;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case RETURN:
					{
					State = 1407; Match(RETURN);
					State = 1408; Expression();
					}
					break;
				case BREAK:
					{
					State = 1409; Match(BREAK);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1412; Match(SEMICOLON);
				}
				break;
			case 20:
				_localctx = new UnsafeStatementContext(_localctx);
				EnterOuterAlt(_localctx, 20);
				{
				State = 1413; Match(UNSAFE);
				State = 1414; Block();
				}
				break;
			case 21:
				_localctx = new FixedStatementContext(_localctx);
				EnterOuterAlt(_localctx, 21);
				{
				State = 1415; Match(FIXED);
				State = 1416; Match(OPEN_PARENS);
				State = 1417; PointerType();
				State = 1418; FixedPointerDeclarators();
				State = 1419; Match(CLOSE_PARENS);
				State = 1420; EmbeddedStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public string RuleName { get { return "Block"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext Block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 170, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1424; Match(OPEN_BRACE);
			State = 1426;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DO) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << FROM) | (1L << GET) | (1L << GOTO) | (1L << GROUP) | (1L << IF) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LOCK) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (RETURN - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (SWITCH - 65)) | (1L << (THIS - 65)) | (1L << (THROW - 65)) | (1L << (TRUE - 65)) | (1L << (TRY - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (USING - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (WHILE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 133)) & ~0x3f) == 0 && ((1L << (_la - 133)) & ((1L << (SEMICOLON - 133)) | (1L << (PLUS - 133)) | (1L << (MINUS - 133)) | (1L << (STAR - 133)) | (1L << (AMP - 133)) | (1L << (CARET - 133)) | (1L << (BANG - 133)) | (1L << (TILDE - 133)) | (1L << (OP_INC - 133)) | (1L << (OP_DEC - 133)) | (1L << (OP_RANGE - 133)))) != 0)) {
				{
				State = 1425; StatementList();
				}
			}

			State = 1428; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public LocalVariableTypeContext localVariableType() {
			return GetRuleContext<LocalVariableTypeContext>(0);
		}
		public LocalVariableDeclaratorContext[] localVariableDeclarator() {
			return GetRuleContexts<LocalVariableDeclaratorContext>();
		}
		public LocalVariableDeclaratorContext localVariableDeclarator(int i) {
			return GetRuleContext<LocalVariableDeclaratorContext>(i);
		}
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public PointerTypeContext pointerType() {
			return GetRuleContext<PointerTypeContext>(0);
		}
		public FixedPointerDeclaratorsContext fixedPointerDeclarators() {
			return GetRuleContext<FixedPointerDeclaratorsContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public string RuleName { get { return "LocalVariableDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext LocalVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_localVariableDeclaration);
		int _la;
		try {
			State = 1449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case USING:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1434;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,147,Context) ) {
				case 1:
					{
					State = 1430; Match(USING);
					}
					break;
				case 2:
					{
					State = 1431; Match(REF);
					}
					break;
				case 3:
					{
					State = 1432; Match(REF);
					State = 1433; Match(READONLY);
					}
					break;
				}
				State = 1436; LocalVariableType();
				State = 1437; LocalVariableDeclarator();
				State = 1442;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1438; Match(COMMA);
					State = 1439; LocalVariableDeclarator();
					}
					}
					State = 1444;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case FIXED:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1445; Match(FIXED);
				State = 1446; PointerType();
				State = 1447; FixedPointerDeclarators();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableTypeContext : ParserRuleContext {
		public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public LocalVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableType; } }
		public string RuleName { get { return "LocalVariableType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableType(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableTypeContext LocalVariableType() {
		LocalVariableTypeContext _localctx = new LocalVariableTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_localVariableType);
		try {
			State = 1453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1451; Match(VAR);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1452; Type();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public LocalVariableInitializerContext localVariableInitializer() {
			return GetRuleContext<LocalVariableInitializerContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public LocalVariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclarator; } }
		public string RuleName { get { return "LocalVariableDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclaratorContext LocalVariableDeclarator() {
		LocalVariableDeclaratorContext _localctx = new LocalVariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 176, RULE_localVariableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1455; Identifier();
			State = 1461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1456; Match(ASSIGNMENT);
				State = 1458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
				case 1:
					{
					State = 1457; Match(REF);
					}
					break;
				}
				State = 1460; LocalVariableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public StackallocInitializerContext stackallocInitializer() {
			return GetRuleContext<StackallocInitializerContext>(0);
		}
		public LocalVariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableInitializer; } }
		public string RuleName { get { return "LocalVariableInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableInitializerContext LocalVariableInitializer() {
		LocalVariableInitializerContext _localctx = new LocalVariableInitializerContext(Context, State);
		EnterRule(_localctx, 178, RULE_localVariableInitializer);
		try {
			State = 1466;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1463; Expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1464; ArrayInitializer();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1465; StackallocInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalConstantDeclarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantDeclaratorsContext constantDeclarators() {
			return GetRuleContext<ConstantDeclaratorsContext>(0);
		}
		public LocalConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localConstantDeclaration; } }
		public string RuleName { get { return "LocalConstantDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLocalConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLocalConstantDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalConstantDeclarationContext LocalConstantDeclaration() {
		LocalConstantDeclarationContext _localctx = new LocalConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 180, RULE_localConstantDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1468; Match(CONST);
			State = 1469; Type();
			State = 1470; ConstantDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public SimpleEmbeddedStatementContext simpleEmbeddedStatement() {
			return GetRuleContext<SimpleEmbeddedStatementContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		public string RuleName { get { return "IfBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext IfBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 182, RULE_ifBody);
		try {
			State = 1474;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1472; Block();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BREAK:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case CONTINUE:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DO:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FIXED:
			case FLOAT:
			case FOR:
			case FOREACH:
			case FROM:
			case GET:
			case GOTO:
			case GROUP:
			case IF:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LOCK:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case RETURN:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case SWITCH:
			case THIS:
			case THROW:
			case TRUE:
			case TRY:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case UNSAFE:
			case USHORT:
			case USING:
			case VAR:
			case WHEN:
			case WHERE:
			case WHILE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case SEMICOLON:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1473; SimpleEmbeddedStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchSectionContext : ParserRuleContext {
		public StatementListContext statementList() {
			return GetRuleContext<StatementListContext>(0);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public SwitchSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchSection; } }
		public string RuleName { get { return "SwitchSection"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchSection(this);
		}
	}

	[RuleVersion(0)]
	public SwitchSectionContext SwitchSection() {
		SwitchSectionContext _localctx = new SwitchSectionContext(Context, State);
		EnterRule(_localctx, 184, RULE_switchSection);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1477;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1476; SwitchLabel();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1479;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,155,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			State = 1481; StatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public CaseGuardContext caseGuard() {
			return GetRuleContext<CaseGuardContext>(0);
		}
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public string RuleName { get { return "SwitchLabel"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext SwitchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 186, RULE_switchLabel);
		int _la;
		try {
			State = 1492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1483; Match(CASE);
				State = 1484; Expression();
				State = 1486;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHEN) {
					{
					State = 1485; CaseGuard();
					}
				}

				State = 1488; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1490; Match(DEFAULT);
				State = 1491; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseGuardContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public CaseGuardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseGuard; } }
		public string RuleName { get { return "CaseGuard"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCaseGuard(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCaseGuard(this);
		}
	}

	[RuleVersion(0)]
	public CaseGuardContext CaseGuard() {
		CaseGuardContext _localctx = new CaseGuardContext(Context, State);
		EnterRule(_localctx, 188, RULE_caseGuard);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1494; Match(WHEN);
			State = 1495; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementListContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public StatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementList; } }
		public string RuleName { get { return "StatementList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStatementList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStatementList(this);
		}
	}

	[RuleVersion(0)]
	public StatementListContext StatementList() {
		StatementListContext _localctx = new StatementListContext(Context, State);
		EnterRule(_localctx, 190, RULE_statementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1498;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1497; Statement();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1500;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,158,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitializerContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ForInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitializer; } }
		public string RuleName { get { return "ForInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ForInitializerContext ForInitializer() {
		ForInitializerContext _localctx = new ForInitializerContext(Context, State);
		EnterRule(_localctx, 192, RULE_forInitializer);
		int _la;
		try {
			State = 1511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1502; LocalVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1503; Expression();
				State = 1508;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1504; Match(COMMA);
					State = 1505; Expression();
					}
					}
					State = 1510;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForIteratorContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ForIteratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forIterator; } }
		public string RuleName { get { return "ForIterator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterForIterator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitForIterator(this);
		}
	}

	[RuleVersion(0)]
	public ForIteratorContext ForIterator() {
		ForIteratorContext _localctx = new ForIteratorContext(Context, State);
		EnterRule(_localctx, 194, RULE_forIterator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1513; Expression();
			State = 1518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1514; Match(COMMA);
				State = 1515; Expression();
				}
				}
				State = 1520;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClausesContext : ParserRuleContext {
		public SpecificCatchClauseContext[] specificCatchClause() {
			return GetRuleContexts<SpecificCatchClauseContext>();
		}
		public SpecificCatchClauseContext specificCatchClause(int i) {
			return GetRuleContext<SpecificCatchClauseContext>(i);
		}
		public GeneralCatchClauseContext generalCatchClause() {
			return GetRuleContext<GeneralCatchClauseContext>(0);
		}
		public CatchClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClauses; } }
		public string RuleName { get { return "CatchClauses"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCatchClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCatchClauses(this);
		}
	}

	[RuleVersion(0)]
	public CatchClausesContext CatchClauses() {
		CatchClausesContext _localctx = new CatchClausesContext(Context, State);
		EnterRule(_localctx, 196, RULE_catchClauses);
		int _la;
		try {
			int _alt;
			State = 1532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1521; SpecificCatchClause();
				State = 1525;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1522; SpecificCatchClause();
						}
						} 
					}
					State = 1527;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,162,Context);
				}
				State = 1529;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CATCH) {
					{
					State = 1528; GeneralCatchClause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1531; GeneralCatchClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpecificCatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ExceptionFilterContext exceptionFilter() {
			return GetRuleContext<ExceptionFilterContext>(0);
		}
		public SpecificCatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_specificCatchClause; } }
		public string RuleName { get { return "SpecificCatchClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSpecificCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSpecificCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public SpecificCatchClauseContext SpecificCatchClause() {
		SpecificCatchClauseContext _localctx = new SpecificCatchClauseContext(Context, State);
		EnterRule(_localctx, 198, RULE_specificCatchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1534; Match(CATCH);
			State = 1535; Match(OPEN_PARENS);
			State = 1536; ClassType();
			State = 1538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (UNMANAGED - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) {
				{
				State = 1537; Identifier();
				}
			}

			State = 1540; Match(CLOSE_PARENS);
			State = 1542;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1541; ExceptionFilter();
				}
			}

			State = 1544; Block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeneralCatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ExceptionFilterContext exceptionFilter() {
			return GetRuleContext<ExceptionFilterContext>(0);
		}
		public GeneralCatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_generalCatchClause; } }
		public string RuleName { get { return "GeneralCatchClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGeneralCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGeneralCatchClause(this);
		}
	}

	[RuleVersion(0)]
	public GeneralCatchClauseContext GeneralCatchClause() {
		GeneralCatchClauseContext _localctx = new GeneralCatchClauseContext(Context, State);
		EnterRule(_localctx, 200, RULE_generalCatchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1546; Match(CATCH);
			State = 1548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHEN) {
				{
				State = 1547; ExceptionFilter();
				}
			}

			State = 1550; Block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionFilterContext : ParserRuleContext {
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ExceptionFilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionFilter; } }
		public string RuleName { get { return "ExceptionFilter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExceptionFilter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExceptionFilter(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionFilterContext ExceptionFilter() {
		ExceptionFilterContext _localctx = new ExceptionFilterContext(Context, State);
		EnterRule(_localctx, 202, RULE_exceptionFilter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1552; Match(WHEN);
			State = 1553; Match(OPEN_PARENS);
			State = 1554; Expression();
			State = 1555; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyClauseContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyClause; } }
		public string RuleName { get { return "FinallyClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFinallyClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFinallyClause(this);
		}
	}

	[RuleVersion(0)]
	public FinallyClauseContext FinallyClause() {
		FinallyClauseContext _localctx = new FinallyClauseContext(Context, State);
		EnterRule(_localctx, 204, RULE_finallyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1557; Match(FINALLY);
			State = 1558; Block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceAcquisitionContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ResourceAcquisitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceAcquisition; } }
		public string RuleName { get { return "ResourceAcquisition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterResourceAcquisition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitResourceAcquisition(this);
		}
	}

	[RuleVersion(0)]
	public ResourceAcquisitionContext ResourceAcquisition() {
		ResourceAcquisitionContext _localctx = new ResourceAcquisitionContext(Context, State);
		EnterRule(_localctx, 206, RULE_resourceAcquisition);
		try {
			State = 1562;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1560; LocalVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1561; Expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDeclarationContext : ParserRuleContext {
		public QualifiedIdentifierContext qi;
		public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public NamespaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDeclaration; } }
		public string RuleName { get { return "NamespaceDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDeclarationContext NamespaceDeclaration() {
		NamespaceDeclarationContext _localctx = new NamespaceDeclarationContext(Context, State);
		EnterRule(_localctx, 208, RULE_namespaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1564; Match(NAMESPACE);
			State = 1565; _localctx.qi = QualifiedIdentifier();
			State = 1566; NamespaceBody();
			State = 1568;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 1567; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		public string RuleName { get { return "QualifiedIdentifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext QualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 210, RULE_qualifiedIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1570; Identifier();
			State = 1575;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 1571; Match(DOT);
				State = 1572; Identifier();
				}
				}
				State = 1577;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ExternAliasDirectivesContext externAliasDirectives() {
			return GetRuleContext<ExternAliasDirectivesContext>(0);
		}
		public UsingDirectivesContext usingDirectives() {
			return GetRuleContext<UsingDirectivesContext>(0);
		}
		public NamespaceMemberDeclarationsContext namespaceMemberDeclarations() {
			return GetRuleContext<NamespaceMemberDeclarationsContext>(0);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public string RuleName { get { return "NamespaceBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext NamespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 212, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1578; Match(OPEN_BRACE);
			State = 1580;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 1579; ExternAliasDirectives();
				}
				break;
			}
			State = 1583;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING) {
				{
				State = 1582; UsingDirectives();
				}
			}

			State = 1586;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0)) {
				{
				State = 1585; NamespaceMemberDeclarations();
				}
			}

			State = 1588; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternAliasDirectivesContext : ParserRuleContext {
		public ExternAliasDirectiveContext[] externAliasDirective() {
			return GetRuleContexts<ExternAliasDirectiveContext>();
		}
		public ExternAliasDirectiveContext externAliasDirective(int i) {
			return GetRuleContext<ExternAliasDirectiveContext>(i);
		}
		public ExternAliasDirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externAliasDirectives; } }
		public string RuleName { get { return "ExternAliasDirectives"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExternAliasDirectives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExternAliasDirectives(this);
		}
	}

	[RuleVersion(0)]
	public ExternAliasDirectivesContext ExternAliasDirectives() {
		ExternAliasDirectivesContext _localctx = new ExternAliasDirectivesContext(Context, State);
		EnterRule(_localctx, 214, RULE_externAliasDirectives);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1591;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1590; ExternAliasDirective();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1593;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,174,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExternAliasDirectiveContext : ParserRuleContext {
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ExternAliasDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_externAliasDirective; } }
		public string RuleName { get { return "ExternAliasDirective"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterExternAliasDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitExternAliasDirective(this);
		}
	}

	[RuleVersion(0)]
	public ExternAliasDirectiveContext ExternAliasDirective() {
		ExternAliasDirectiveContext _localctx = new ExternAliasDirectiveContext(Context, State);
		EnterRule(_localctx, 216, RULE_externAliasDirective);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1595; Match(EXTERN);
			State = 1596; Match(ALIAS);
			State = 1597; Identifier();
			State = 1598; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectivesContext : ParserRuleContext {
		public UsingDirectiveContext[] usingDirective() {
			return GetRuleContexts<UsingDirectiveContext>();
		}
		public UsingDirectiveContext usingDirective(int i) {
			return GetRuleContext<UsingDirectiveContext>(i);
		}
		public UsingDirectivesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirectives; } }
		public string RuleName { get { return "UsingDirectives"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingDirectives(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingDirectives(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectivesContext UsingDirectives() {
		UsingDirectivesContext _localctx = new UsingDirectivesContext(Context, State);
		EnterRule(_localctx, 218, RULE_usingDirectives);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1601;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1600; UsingDirective();
				}
				}
				State = 1603;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==USING );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public string RuleName { get { return "UsingDirective"; } }
	 
		public UsingDirectiveContext() { }
		public virtual void CopyFrom(UsingDirectiveContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UsingAliasDirectiveContext : UsingDirectiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public UsingAliasDirectiveContext(UsingDirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingAliasDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingAliasDirective(this);
		}
	}
	public partial class UsingNamespaceDirectiveContext : UsingDirectiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public UsingNamespaceDirectiveContext(UsingDirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingNamespaceDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingNamespaceDirective(this);
		}
	}
	public partial class UsingStaticDirectiveContext : UsingDirectiveContext {
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public UsingStaticDirectiveContext(UsingDirectiveContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterUsingStaticDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitUsingStaticDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext UsingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 220, RULE_usingDirective);
		try {
			State = 1620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
			case 1:
				_localctx = new UsingAliasDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 1605; Match(USING);
				State = 1606; Identifier();
				State = 1607; Match(ASSIGNMENT);
				State = 1608; NamespaceOrTypeName();
				State = 1609; Match(SEMICOLON);
				}
				break;
			case 2:
				_localctx = new UsingNamespaceDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 1611; Match(USING);
				State = 1612; NamespaceOrTypeName();
				State = 1613; Match(SEMICOLON);
				}
				break;
			case 3:
				_localctx = new UsingStaticDirectiveContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 1615; Match(USING);
				State = 1616; Match(STATIC);
				State = 1617; NamespaceOrTypeName();
				State = 1618; Match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceMemberDeclarationsContext : ParserRuleContext {
		public NamespaceMemberDeclarationContext[] namespaceMemberDeclaration() {
			return GetRuleContexts<NamespaceMemberDeclarationContext>();
		}
		public NamespaceMemberDeclarationContext namespaceMemberDeclaration(int i) {
			return GetRuleContext<NamespaceMemberDeclarationContext>(i);
		}
		public NamespaceMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceMemberDeclarations; } }
		public string RuleName { get { return "NamespaceMemberDeclarations"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceMemberDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceMemberDeclarationsContext NamespaceMemberDeclarations() {
		NamespaceMemberDeclarationsContext _localctx = new NamespaceMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 222, RULE_namespaceMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1622; NamespaceMemberDeclaration();
				}
				}
				State = 1625;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << CLASS) | (1L << DELEGATE) | (1L << ENUM) | (1L << EXTERN) | (1L << INTERFACE) | (1L << INTERNAL))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARTIAL - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (SEALED - 64)) | (1L << (STATIC - 64)) | (1L << (STRUCT - 64)) | (1L << (UNSAFE - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOLATILE - 64)) | (1L << (OPEN_BRACKET - 64)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceMemberDeclarationContext : ParserRuleContext {
		public NamespaceDeclarationContext namespaceDeclaration() {
			return GetRuleContext<NamespaceDeclarationContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public NamespaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceMemberDeclaration; } }
		public string RuleName { get { return "NamespaceMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterNamespaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitNamespaceMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceMemberDeclarationContext NamespaceMemberDeclaration() {
		NamespaceMemberDeclarationContext _localctx = new NamespaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 224, RULE_namespaceMemberDeclaration);
		try {
			State = 1629;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAMESPACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1627; NamespaceDeclaration();
				}
				break;
			case ABSTRACT:
			case ASYNC:
			case CLASS:
			case DELEGATE:
			case ENUM:
			case EXTERN:
			case INTERFACE:
			case INTERNAL:
			case NEW:
			case OVERRIDE:
			case PARTIAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case READONLY:
			case REF:
			case SEALED:
			case STATIC:
			case STRUCT:
			case UNSAFE:
			case VIRTUAL:
			case VOLATILE:
			case OPEN_BRACKET:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1628; TypeDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public DelegateDefinitionContext delegateDefinition() {
			return GetRuleContext<DelegateDefinitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public string RuleName { get { return "TypeDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext TypeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 226, RULE_typeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1631; Attributes();
				}
			}

			State = 1635;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 1634; AllMemberModifiers();
				}
				break;
			}
			State = 1642;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CLASS:
				{
				State = 1637; ClassDefinition();
				}
				break;
			case READONLY:
			case REF:
			case STRUCT:
				{
				State = 1638; StructDefinition();
				}
				break;
			case INTERFACE:
				{
				State = 1639; InterfaceDefinition();
				}
				break;
			case ENUM:
				{
				State = 1640; EnumDefinition();
				}
				break;
			case DELEGATE:
				{
				State = 1641; DelegateDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedAliasMemberContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharpParser.DOUBLE_COLON, 0); }
		public TypeArgumentListContext typeArgumentList() {
			return GetRuleContext<TypeArgumentListContext>(0);
		}
		public QualifiedAliasMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedAliasMember; } }
		public string RuleName { get { return "QualifiedAliasMember"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterQualifiedAliasMember(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitQualifiedAliasMember(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedAliasMemberContext QualifiedAliasMember() {
		QualifiedAliasMemberContext _localctx = new QualifiedAliasMemberContext(Context, State);
		EnterRule(_localctx, 228, RULE_qualifiedAliasMember);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644; Identifier();
			State = 1645; Match(DOUBLE_COLON);
			State = 1646; Identifier();
			State = 1648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1647; TypeArgumentList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public TypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterList; } }
		public string RuleName { get { return "TypeParameterList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterListContext TypeParameterList() {
		TypeParameterListContext _localctx = new TypeParameterListContext(Context, State);
		EnterRule(_localctx, 230, RULE_typeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1650; Match(LT);
			State = 1651; TypeParameter();
			State = 1656;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1652; Match(COMMA);
				State = 1653; TypeParameter();
				}
				}
				State = 1658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1659; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public string RuleName { get { return "TypeParameter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext TypeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 232, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1662;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1661; Attributes();
				}
			}

			State = 1664; Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBaseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public NamespaceOrTypeNameContext[] namespaceOrTypeName() {
			return GetRuleContexts<NamespaceOrTypeNameContext>();
		}
		public NamespaceOrTypeNameContext namespaceOrTypeName(int i) {
			return GetRuleContext<NamespaceOrTypeNameContext>(i);
		}
		public ClassBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBase; } }
		public string RuleName { get { return "ClassBase"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClassBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClassBase(this);
		}
	}

	[RuleVersion(0)]
	public ClassBaseContext ClassBase() {
		ClassBaseContext _localctx = new ClassBaseContext(Context, State);
		EnterRule(_localctx, 234, RULE_classBase);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1666; Match(COLON);
			State = 1667; ClassType();
			State = 1672;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1668; Match(COMMA);
				State = 1669; NamespaceOrTypeName();
				}
				}
				State = 1674;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceTypeListContext : ParserRuleContext {
		public NamespaceOrTypeNameContext[] namespaceOrTypeName() {
			return GetRuleContexts<NamespaceOrTypeNameContext>();
		}
		public NamespaceOrTypeNameContext namespaceOrTypeName(int i) {
			return GetRuleContext<NamespaceOrTypeNameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public InterfaceTypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceTypeList; } }
		public string RuleName { get { return "InterfaceTypeList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceTypeList(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceTypeListContext InterfaceTypeList() {
		InterfaceTypeListContext _localctx = new InterfaceTypeListContext(Context, State);
		EnterRule(_localctx, 236, RULE_interfaceTypeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1675; NamespaceOrTypeName();
			State = 1680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1676; Match(COMMA);
				State = 1677; NamespaceOrTypeName();
				}
				}
				State = 1682;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintsClausesContext : ParserRuleContext {
		public TypeParameterConstraintsClauseContext[] typeParameterConstraintsClause() {
			return GetRuleContexts<TypeParameterConstraintsClauseContext>();
		}
		public TypeParameterConstraintsClauseContext typeParameterConstraintsClause(int i) {
			return GetRuleContext<TypeParameterConstraintsClauseContext>(i);
		}
		public TypeParameterConstraintsClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintsClauses; } }
		public string RuleName { get { return "TypeParameterConstraintsClauses"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintsClauses(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintsClauses(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintsClausesContext TypeParameterConstraintsClauses() {
		TypeParameterConstraintsClausesContext _localctx = new TypeParameterConstraintsClausesContext(Context, State);
		EnterRule(_localctx, 238, RULE_typeParameterConstraintsClauses);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1683; TypeParameterConstraintsClause();
				}
				}
				State = 1686;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHERE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintsClauseContext : ParserRuleContext {
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public TypeParameterConstraintsContext typeParameterConstraints() {
			return GetRuleContext<TypeParameterConstraintsContext>(0);
		}
		public TypeParameterConstraintsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraintsClause; } }
		public string RuleName { get { return "TypeParameterConstraintsClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraintsClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraintsClause(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintsClauseContext TypeParameterConstraintsClause() {
		TypeParameterConstraintsClauseContext _localctx = new TypeParameterConstraintsClauseContext(Context, State);
		EnterRule(_localctx, 240, RULE_typeParameterConstraintsClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1688; Match(WHERE);
			State = 1689; Identifier();
			State = 1690; Match(COLON);
			State = 1691; TypeParameterConstraints();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterConstraintsContext : ParserRuleContext {
		public ConstructorConstraintContext constructorConstraint() {
			return GetRuleContext<ConstructorConstraintContext>(0);
		}
		public PrimaryConstraintContext primaryConstraint() {
			return GetRuleContext<PrimaryConstraintContext>(0);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public SecondaryConstraintsContext secondaryConstraints() {
			return GetRuleContext<SecondaryConstraintsContext>(0);
		}
		public TypeParameterConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameterConstraints; } }
		public string RuleName { get { return "TypeParameterConstraints"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypeParameterConstraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypeParameterConstraints(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterConstraintsContext TypeParameterConstraints() {
		TypeParameterConstraintsContext _localctx = new TypeParameterConstraintsContext(Context, State);
		EnterRule(_localctx, 242, RULE_typeParameterConstraints);
		int _la;
		try {
			State = 1703;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NEW:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1693; ConstructorConstraint();
				}
				break;
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BY:
			case CLASS:
			case DESCENDING:
			case DYNAMIC:
			case EQUALS:
			case FROM:
			case GET:
			case GROUP:
			case INTO:
			case JOIN:
			case LET:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SELECT:
			case SET:
			case STRING:
			case STRUCT:
			case UNMANAGED:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1694; PrimaryConstraint();
				State = 1697;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1695; Match(COMMA);
					State = 1696; SecondaryConstraints();
					}
					break;
				}
				State = 1701;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1699; Match(COMMA);
					State = 1700; ConstructorConstraint();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryConstraintContext : ParserRuleContext {
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public ITerminalNode INTERR() { return GetToken(CSharpParser.INTERR, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public ITerminalNode UNMANAGED() { return GetToken(CSharpParser.UNMANAGED, 0); }
		public PrimaryConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryConstraint; } }
		public string RuleName { get { return "PrimaryConstraint"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPrimaryConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPrimaryConstraint(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryConstraintContext PrimaryConstraint() {
		PrimaryConstraintContext _localctx = new PrimaryConstraintContext(Context, State);
		EnterRule(_localctx, 244, RULE_primaryConstraint);
		int _la;
		try {
			State = 1712;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1705; ClassType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1706; Match(CLASS);
				State = 1708;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERR) {
					{
					State = 1707; Match(INTERR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1710; Match(STRUCT);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1711; Match(UNMANAGED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SecondaryConstraintsContext : ParserRuleContext {
		public NamespaceOrTypeNameContext[] namespaceOrTypeName() {
			return GetRuleContexts<NamespaceOrTypeNameContext>();
		}
		public NamespaceOrTypeNameContext namespaceOrTypeName(int i) {
			return GetRuleContext<NamespaceOrTypeNameContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public SecondaryConstraintsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_secondaryConstraints; } }
		public string RuleName { get { return "SecondaryConstraints"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSecondaryConstraints(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSecondaryConstraints(this);
		}
	}

	[RuleVersion(0)]
	public SecondaryConstraintsContext SecondaryConstraints() {
		SecondaryConstraintsContext _localctx = new SecondaryConstraintsContext(Context, State);
		EnterRule(_localctx, 246, RULE_secondaryConstraints);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1714; NamespaceOrTypeName();
			State = 1719;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1715; Match(COMMA);
					State = 1716; NamespaceOrTypeName();
					}
					} 
				}
				State = 1721;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,193,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorConstraintContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ConstructorConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorConstraint; } }
		public string RuleName { get { return "ConstructorConstraint"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructorConstraint(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructorConstraint(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorConstraintContext ConstructorConstraint() {
		ConstructorConstraintContext _localctx = new ConstructorConstraintContext(Context, State);
		EnterRule(_localctx, 248, RULE_constructorConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1722; Match(NEW);
			State = 1723; Match(OPEN_PARENS);
			State = 1724; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ClassMemberDeclarationsContext classMemberDeclarations() {
			return GetRuleContext<ClassMemberDeclarationsContext>(0);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public string RuleName { get { return "ClassBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext ClassBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 250, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1726; Match(OPEN_BRACE);
			State = 1728;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNMANAGED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || _la==TILDE) {
				{
				State = 1727; ClassMemberDeclarations();
				}
			}

			State = 1730; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationsContext : ParserRuleContext {
		public ClassMemberDeclarationContext[] classMemberDeclaration() {
			return GetRuleContexts<ClassMemberDeclarationContext>();
		}
		public ClassMemberDeclarationContext classMemberDeclaration(int i) {
			return GetRuleContext<ClassMemberDeclarationContext>(i);
		}
		public ClassMemberDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclarations; } }
		public string RuleName { get { return "ClassMemberDeclarations"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationsContext ClassMemberDeclarations() {
		ClassMemberDeclarationsContext _localctx = new ClassMemberDeclarationsContext(Context, State);
		EnterRule(_localctx, 252, RULE_classMemberDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1733;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 1732; ClassMemberDeclaration();
				}
				}
				State = 1735;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNMANAGED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || _la==TILDE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassMemberDeclarationContext : ParserRuleContext {
		public CommonMemberDeclarationContext commonMemberDeclaration() {
			return GetRuleContext<CommonMemberDeclarationContext>(0);
		}
		public DestructorDefinitionContext destructorDefinition() {
			return GetRuleContext<DestructorDefinitionContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public ClassMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classMemberDeclaration; } }
		public string RuleName { get { return "ClassMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClassMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClassMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassMemberDeclarationContext ClassMemberDeclaration() {
		ClassMemberDeclarationContext _localctx = new ClassMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 254, RULE_classMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1737; Attributes();
				}
			}

			State = 1741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				{
				State = 1740; AllMemberModifiers();
				}
				break;
			}
			State = 1745;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case READONLY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				{
				State = 1743; CommonMemberDeclaration();
				}
				break;
			case TILDE:
				{
				State = 1744; DestructorDefinition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifiersContext : ParserRuleContext {
		public AllMemberModifierContext[] allMemberModifier() {
			return GetRuleContexts<AllMemberModifierContext>();
		}
		public AllMemberModifierContext allMemberModifier(int i) {
			return GetRuleContext<AllMemberModifierContext>(i);
		}
		public AllMemberModifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifiers; } }
		public string RuleName { get { return "AllMemberModifiers"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifiers(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifiersContext AllMemberModifiers() {
		AllMemberModifiersContext _localctx = new AllMemberModifiersContext(Context, State);
		EnterRule(_localctx, 256, RULE_allMemberModifiers);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1748;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1747; AllMemberModifier();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1750;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,199,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllMemberModifierContext : ParserRuleContext {
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public AllMemberModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allMemberModifier; } }
		public string RuleName { get { return "AllMemberModifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAllMemberModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAllMemberModifier(this);
		}
	}

	[RuleVersion(0)]
	public AllMemberModifierContext AllMemberModifier() {
		AllMemberModifierContext _localctx = new AllMemberModifierContext(Context, State);
		EnterRule(_localctx, 258, RULE_allMemberModifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1752;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASYNC) | (1L << EXTERN) | (1L << INTERNAL))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (SEALED - 65)) | (1L << (STATIC - 65)) | (1L << (UNSAFE - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOLATILE - 65)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonMemberDeclarationContext : ParserRuleContext {
		public ConstantDeclarationContext constantDeclaration() {
			return GetRuleContext<ConstantDeclarationContext>(0);
		}
		public TypedMemberDeclarationContext typedMemberDeclaration() {
			return GetRuleContext<TypedMemberDeclarationContext>(0);
		}
		public EventDeclarationContext eventDeclaration() {
			return GetRuleContext<EventDeclarationContext>(0);
		}
		public ConversionOperatorDeclaratorContext conversionOperatorDeclarator() {
			return GetRuleContext<ConversionOperatorDeclaratorContext>(0);
		}
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public ClassDefinitionContext classDefinition() {
			return GetRuleContext<ClassDefinitionContext>(0);
		}
		public StructDefinitionContext structDefinition() {
			return GetRuleContext<StructDefinitionContext>(0);
		}
		public InterfaceDefinitionContext interfaceDefinition() {
			return GetRuleContext<InterfaceDefinitionContext>(0);
		}
		public EnumDefinitionContext enumDefinition() {
			return GetRuleContext<EnumDefinitionContext>(0);
		}
		public DelegateDefinitionContext delegateDefinition() {
			return GetRuleContext<DelegateDefinitionContext>(0);
		}
		public CommonMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonMemberDeclaration; } }
		public string RuleName { get { return "CommonMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterCommonMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitCommonMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public CommonMemberDeclarationContext CommonMemberDeclaration() {
		CommonMemberDeclarationContext _localctx = new CommonMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 260, RULE_commonMemberDeclaration);
		try {
			State = 1773;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,201,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1754; ConstantDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1755; TypedMemberDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1756; EventDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1757; ConversionOperatorDeclarator();
				State = 1763;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_BRACE:
				case SEMICOLON:
					{
					State = 1758; Body();
					}
					break;
				case ASSIGNMENT:
					{
					State = 1759; RightArrow();
					State = 1760; ThrowableExpression();
					State = 1761; Match(SEMICOLON);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1765; ConstructorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1766; Match(VOID);
				State = 1767; MethodDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1768; ClassDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1769; StructDefinition();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1770; InterfaceDefinition();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1771; EnumDefinition();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1772; DelegateDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedMemberDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode DOT() { return GetToken(CSharpParser.DOT, 0); }
		public IndexerDeclarationContext indexerDeclaration() {
			return GetRuleContext<IndexerDeclarationContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public PropertyDeclarationContext propertyDeclaration() {
			return GetRuleContext<PropertyDeclarationContext>(0);
		}
		public OperatorDeclarationContext operatorDeclaration() {
			return GetRuleContext<OperatorDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public TypedMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedMemberDeclaration; } }
		public string RuleName { get { return "TypedMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterTypedMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitTypedMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypedMemberDeclarationContext TypedMemberDeclaration() {
		TypedMemberDeclarationContext _localctx = new TypedMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 262, RULE_typedMemberDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1780;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
			case 1:
				{
				State = 1775; Match(REF);
				}
				break;
			case 2:
				{
				State = 1776; Match(READONLY);
				State = 1777; Match(REF);
				}
				break;
			case 3:
				{
				State = 1778; Match(REF);
				State = 1779; Match(READONLY);
				}
				break;
			}
			State = 1782; Type();
			State = 1792;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 1783; NamespaceOrTypeName();
				State = 1784; Match(DOT);
				State = 1785; IndexerDeclaration();
				}
				break;
			case 2:
				{
				State = 1787; MethodDeclaration();
				}
				break;
			case 3:
				{
				State = 1788; PropertyDeclaration();
				}
				break;
			case 4:
				{
				State = 1789; IndexerDeclaration();
				}
				break;
			case 5:
				{
				State = 1790; OperatorDeclaration();
				}
				break;
			case 6:
				{
				State = 1791; FieldDeclaration();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorsContext : ParserRuleContext {
		public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ConstantDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarators; } }
		public string RuleName { get { return "ConstantDeclarators"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorsContext ConstantDeclarators() {
		ConstantDeclaratorsContext _localctx = new ConstantDeclaratorsContext(Context, State);
		EnterRule(_localctx, 264, RULE_constantDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1794; ConstantDeclarator();
			State = 1799;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1795; Match(COMMA);
				State = 1796; ConstantDeclarator();
				}
				}
				State = 1801;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		public string RuleName { get { return "ConstantDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext ConstantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(Context, State);
		EnterRule(_localctx, 266, RULE_constantDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1802; Identifier();
			State = 1803; Match(ASSIGNMENT);
			State = 1804; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public string RuleName { get { return "VariableDeclarators"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext VariableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 268, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1806; VariableDeclarator();
			State = 1811;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1807; Match(COMMA);
				State = 1808; VariableDeclarator();
				}
				}
				State = 1813;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public string RuleName { get { return "VariableDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext VariableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 270, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1814; Identifier();
			State = 1817;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 1815; Match(ASSIGNMENT);
				State = 1816; VariableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public string RuleName { get { return "VariableInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext VariableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 272, RULE_variableInitializer);
		try {
			State = 1821;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1819; Expression();
				}
				break;
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1820; ArrayInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnTypeContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public ReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnType; } }
		public string RuleName { get { return "ReturnType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitReturnType(this);
		}
	}

	[RuleVersion(0)]
	public ReturnTypeContext ReturnType() {
		ReturnTypeContext _localctx = new ReturnTypeContext(Context, State);
		EnterRule(_localctx, 274, RULE_returnType);
		try {
			State = 1825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,208,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1823; Type();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1824; Match(VOID);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberNameContext : ParserRuleContext {
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public MemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberName; } }
		public string RuleName { get { return "MemberName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MemberNameContext MemberName() {
		MemberNameContext _localctx = new MemberNameContext(Context, State);
		EnterRule(_localctx, 276, RULE_memberName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1827; NamespaceOrTypeName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public string RuleName { get { return "MethodBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext MethodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 278, RULE_methodBody);
		try {
			State = 1831;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1829; Block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1830; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public ParameterArrayContext parameterArray() {
			return GetRuleContext<ParameterArrayContext>(0);
		}
		public FixedParametersContext fixedParameters() {
			return GetRuleContext<FixedParametersContext>(0);
		}
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public string RuleName { get { return "FormalParameterList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext FormalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 280, RULE_formalParameterList);
		int _la;
		try {
			State = 1839;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1833; ParameterArray();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1834; FixedParameters();
				State = 1837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 1835; Match(COMMA);
					State = 1836; ParameterArray();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParametersContext : ParserRuleContext {
		public FixedParameterContext[] fixedParameter() {
			return GetRuleContexts<FixedParameterContext>();
		}
		public FixedParameterContext fixedParameter(int i) {
			return GetRuleContext<FixedParameterContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public FixedParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameters; } }
		public string RuleName { get { return "FixedParameters"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedParameters(this);
		}
	}

	[RuleVersion(0)]
	public FixedParametersContext FixedParameters() {
		FixedParametersContext _localctx = new FixedParametersContext(Context, State);
		EnterRule(_localctx, 282, RULE_fixedParameters);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1841; FixedParameter();
			State = 1846;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1842; Match(COMMA);
					State = 1843; FixedParameter();
					}
					} 
				}
				State = 1848;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedParameterContext : ParserRuleContext {
		public ArgDeclarationContext argDeclaration() {
			return GetRuleContext<ArgDeclarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ParameterModifierContext parameterModifier() {
			return GetRuleContext<ParameterModifierContext>(0);
		}
		public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public FixedParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedParameter; } }
		public string RuleName { get { return "FixedParameter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedParameter(this);
		}
	}

	[RuleVersion(0)]
	public FixedParameterContext FixedParameter() {
		FixedParameterContext _localctx = new FixedParameterContext(Context, State);
		EnterRule(_localctx, 284, RULE_fixedParameter);
		int _la;
		try {
			State = 1857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1850;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_BRACKET) {
					{
					State = 1849; Attributes();
					}
				}

				State = 1853;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 53)) & ~0x3f) == 0 && ((1L << (_la - 53)) & ((1L << (IN - 53)) | (1L << (OUT - 53)) | (1L << (REF - 53)) | (1L << (THIS - 53)))) != 0)) {
					{
					State = 1852; ParameterModifier();
					}
				}

				State = 1855; ArgDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1856; Match(ARGLIST);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterModifierContext : ParserRuleContext {
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ParameterModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterModifier; } }
		public string RuleName { get { return "ParameterModifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameterModifier(this);
		}
	}

	[RuleVersion(0)]
	public ParameterModifierContext ParameterModifier() {
		ParameterModifierContext _localctx = new ParameterModifierContext(Context, State);
		EnterRule(_localctx, 286, RULE_parameterModifier);
		try {
			State = 1867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1859; Match(REF);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1860; Match(OUT);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1861; Match(IN);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1862; Match(REF);
				State = 1863; Match(THIS);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1864; Match(IN);
				State = 1865; Match(THIS);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1866; Match(THIS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterArrayContext : ParserRuleContext {
		public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		public ArrayTypeContext arrayType() {
			return GetRuleContext<ArrayTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ParameterArrayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterArray; } }
		public string RuleName { get { return "ParameterArray"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterParameterArray(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitParameterArray(this);
		}
	}

	[RuleVersion(0)]
	public ParameterArrayContext ParameterArray() {
		ParameterArrayContext _localctx = new ParameterArrayContext(Context, State);
		EnterRule(_localctx, 288, RULE_parameterArray);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1870;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1869; Attributes();
				}
			}

			State = 1872; Match(PARAMS);
			State = 1873; ArrayType();
			State = 1874; Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorDeclarationsContext : ParserRuleContext {
		public AttributesContext attrs;
		public AccessorModifierContext mods;
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifierContext accessorModifier() {
			return GetRuleContext<AccessorModifierContext>(0);
		}
		public SetAccessorDeclarationContext setAccessorDeclaration() {
			return GetRuleContext<SetAccessorDeclarationContext>(0);
		}
		public GetAccessorDeclarationContext getAccessorDeclaration() {
			return GetRuleContext<GetAccessorDeclarationContext>(0);
		}
		public AccessorDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorDeclarations; } }
		public string RuleName { get { return "AccessorDeclarations"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessorDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessorDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public AccessorDeclarationsContext AccessorDeclarations() {
		AccessorDeclarationsContext _localctx = new AccessorDeclarationsContext(Context, State);
		EnterRule(_localctx, 290, RULE_accessorDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1877;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1876; _localctx.attrs = Attributes();
				}
			}

			State = 1880;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1879; _localctx.mods = AccessorModifier();
				}
			}

			State = 1892;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 1882; Match(GET);
				State = 1883; AccessorBody();
				State = 1885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (SET - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					State = 1884; SetAccessorDeclaration();
					}
				}

				}
				break;
			case SET:
				{
				State = 1887; Match(SET);
				State = 1888; AccessorBody();
				State = 1890;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==INTERNAL || ((((_la - 75)) & ~0x3f) == 0 && ((1L << (_la - 75)) & ((1L << (PRIVATE - 75)) | (1L << (PROTECTED - 75)) | (1L << (OPEN_BRACKET - 75)))) != 0)) {
					{
					State = 1889; GetAccessorDeclaration();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetAccessorDeclarationContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifierContext accessorModifier() {
			return GetRuleContext<AccessorModifierContext>(0);
		}
		public GetAccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getAccessorDeclaration; } }
		public string RuleName { get { return "GetAccessorDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGetAccessorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGetAccessorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public GetAccessorDeclarationContext GetAccessorDeclaration() {
		GetAccessorDeclarationContext _localctx = new GetAccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 292, RULE_getAccessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1894; Attributes();
				}
			}

			State = 1898;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1897; AccessorModifier();
				}
			}

			State = 1900; Match(GET);
			State = 1901; AccessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetAccessorDeclarationContext : ParserRuleContext {
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AccessorBodyContext accessorBody() {
			return GetRuleContext<AccessorBodyContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AccessorModifierContext accessorModifier() {
			return GetRuleContext<AccessorModifierContext>(0);
		}
		public SetAccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setAccessorDeclaration; } }
		public string RuleName { get { return "SetAccessorDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterSetAccessorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitSetAccessorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SetAccessorDeclarationContext SetAccessorDeclaration() {
		SetAccessorDeclarationContext _localctx = new SetAccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 294, RULE_setAccessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1904;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1903; Attributes();
				}
			}

			State = 1907;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 56)) & ~0x3f) == 0 && ((1L << (_la - 56)) & ((1L << (INTERNAL - 56)) | (1L << (PRIVATE - 56)) | (1L << (PROTECTED - 56)))) != 0)) {
				{
				State = 1906; AccessorModifier();
				}
			}

			State = 1909; Match(SET);
			State = 1910; AccessorBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorModifierContext : ParserRuleContext {
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public AccessorModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorModifier; } }
		public string RuleName { get { return "AccessorModifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessorModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessorModifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessorModifierContext AccessorModifier() {
		AccessorModifierContext _localctx = new AccessorModifierContext(Context, State);
		EnterRule(_localctx, 296, RULE_accessorModifier);
		try {
			State = 1919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,227,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1912; Match(PROTECTED);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1913; Match(INTERNAL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1914; Match(PRIVATE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1915; Match(PROTECTED);
				State = 1916; Match(INTERNAL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1917; Match(INTERNAL);
				State = 1918; Match(PROTECTED);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessorBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public AccessorBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessorBody; } }
		public string RuleName { get { return "AccessorBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAccessorBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAccessorBody(this);
		}
	}

	[RuleVersion(0)]
	public AccessorBodyContext AccessorBody() {
		AccessorBodyContext _localctx = new AccessorBodyContext(Context, State);
		EnterRule(_localctx, 298, RULE_accessorBody);
		try {
			State = 1923;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1921; Block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1922; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventAccessorDeclarationsContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public RemoveAccessorDeclarationContext removeAccessorDeclaration() {
			return GetRuleContext<RemoveAccessorDeclarationContext>(0);
		}
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public AddAccessorDeclarationContext addAccessorDeclaration() {
			return GetRuleContext<AddAccessorDeclarationContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public EventAccessorDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventAccessorDeclarations; } }
		public string RuleName { get { return "EventAccessorDeclarations"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEventAccessorDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEventAccessorDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public EventAccessorDeclarationsContext EventAccessorDeclarations() {
		EventAccessorDeclarationsContext _localctx = new EventAccessorDeclarationsContext(Context, State);
		EnterRule(_localctx, 300, RULE_eventAccessorDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1926;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1925; Attributes();
				}
			}

			State = 1936;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
				{
				State = 1928; Match(ADD);
				State = 1929; Block();
				State = 1930; RemoveAccessorDeclaration();
				}
				break;
			case REMOVE:
				{
				State = 1932; Match(REMOVE);
				State = 1933; Block();
				State = 1934; AddAccessorDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AddAccessorDeclarationContext : ParserRuleContext {
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AddAccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_addAccessorDeclaration; } }
		public string RuleName { get { return "AddAccessorDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAddAccessorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAddAccessorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AddAccessorDeclarationContext AddAccessorDeclaration() {
		AddAccessorDeclarationContext _localctx = new AddAccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 302, RULE_addAccessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1939;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1938; Attributes();
				}
			}

			State = 1941; Match(ADD);
			State = 1942; Block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemoveAccessorDeclarationContext : ParserRuleContext {
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public RemoveAccessorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removeAccessorDeclaration; } }
		public string RuleName { get { return "RemoveAccessorDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRemoveAccessorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRemoveAccessorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public RemoveAccessorDeclarationContext RemoveAccessorDeclaration() {
		RemoveAccessorDeclarationContext _localctx = new RemoveAccessorDeclarationContext(Context, State);
		EnterRule(_localctx, 304, RULE_removeAccessorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 1944; Attributes();
				}
			}

			State = 1947; Match(REMOVE);
			State = 1948; Block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OverloadableOperatorContext : ParserRuleContext {
		public ITerminalNode PLUS() { return GetToken(CSharpParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CSharpParser.MINUS, 0); }
		public ITerminalNode BANG() { return GetToken(CSharpParser.BANG, 0); }
		public ITerminalNode TILDE() { return GetToken(CSharpParser.TILDE, 0); }
		public ITerminalNode OP_INC() { return GetToken(CSharpParser.OP_INC, 0); }
		public ITerminalNode OP_DEC() { return GetToken(CSharpParser.OP_DEC, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		public ITerminalNode DIV() { return GetToken(CSharpParser.DIV, 0); }
		public ITerminalNode PERCENT() { return GetToken(CSharpParser.PERCENT, 0); }
		public ITerminalNode AMP() { return GetToken(CSharpParser.AMP, 0); }
		public ITerminalNode BITWISE_OR() { return GetToken(CSharpParser.BITWISE_OR, 0); }
		public ITerminalNode CARET() { return GetToken(CSharpParser.CARET, 0); }
		public ITerminalNode OP_LEFT_SHIFT() { return GetToken(CSharpParser.OP_LEFT_SHIFT, 0); }
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public ITerminalNode OP_EQ() { return GetToken(CSharpParser.OP_EQ, 0); }
		public ITerminalNode OP_NE() { return GetToken(CSharpParser.OP_NE, 0); }
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharpParser.OP_GE, 0); }
		public ITerminalNode OP_LE() { return GetToken(CSharpParser.OP_LE, 0); }
		public OverloadableOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_overloadableOperator; } }
		public string RuleName { get { return "OverloadableOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOverloadableOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOverloadableOperator(this);
		}
	}

	[RuleVersion(0)]
	public OverloadableOperatorContext OverloadableOperator() {
		OverloadableOperatorContext _localctx = new OverloadableOperatorContext(Context, State);
		EnterRule(_localctx, 306, RULE_overloadableOperator);
		try {
			State = 1972;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1950; Match(PLUS);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1951; Match(MINUS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1952; Match(BANG);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1953; Match(TILDE);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1954; Match(OP_INC);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1955; Match(OP_DEC);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1956; Match(TRUE);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1957; Match(FALSE);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1958; Match(STAR);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1959; Match(DIV);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1960; Match(PERCENT);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1961; Match(AMP);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1962; Match(BITWISE_OR);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1963; Match(CARET);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1964; Match(OP_LEFT_SHIFT);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1965; RightShift();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1966; Match(OP_EQ);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1967; Match(OP_NE);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1968; Match(GT);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1969; Match(LT);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1970; Match(OP_GE);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1971; Match(OP_LE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionOperatorDeclaratorContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ArgDeclarationContext argDeclaration() {
			return GetRuleContext<ArgDeclarationContext>(0);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public ConversionOperatorDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionOperatorDeclarator; } }
		public string RuleName { get { return "ConversionOperatorDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConversionOperatorDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConversionOperatorDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConversionOperatorDeclaratorContext ConversionOperatorDeclarator() {
		ConversionOperatorDeclaratorContext _localctx = new ConversionOperatorDeclaratorContext(Context, State);
		EnterRule(_localctx, 308, RULE_conversionOperatorDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1974;
			_la = TokenStream.LA(1);
			if ( !(_la==EXPLICIT || _la==IMPLICIT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1975; Match(OPERATOR);
			State = 1976; Type();
			State = 1977; Match(OPEN_PARENS);
			State = 1978; ArgDeclaration();
			State = 1979; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorInitializerContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ConstructorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorInitializer; } }
		public string RuleName { get { return "ConstructorInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructorInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorInitializerContext ConstructorInitializer() {
		ConstructorInitializerContext _localctx = new ConstructorInitializerContext(Context, State);
		EnterRule(_localctx, 310, RULE_constructorInitializer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1981; Match(COLON);
			State = 1982;
			_la = TokenStream.LA(1);
			if ( !(_la==BASE || _la==THIS) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 1983; Match(OPEN_PARENS);
			State = 1985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
				{
				State = 1984; ArgumentList();
				}
			}

			State = 1987; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public BodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_body; } }
		public string RuleName { get { return "Body"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBody(this);
		}
	}

	[RuleVersion(0)]
	public BodyContext Body() {
		BodyContext _localctx = new BodyContext(Context, State);
		EnterRule(_localctx, 312, RULE_body);
		try {
			State = 1991;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1989; Block();
				}
				break;
			case SEMICOLON:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1990; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructInterfacesContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public StructInterfacesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structInterfaces; } }
		public string RuleName { get { return "StructInterfaces"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStructInterfaces(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStructInterfaces(this);
		}
	}

	[RuleVersion(0)]
	public StructInterfacesContext StructInterfaces() {
		StructInterfacesContext _localctx = new StructInterfacesContext(Context, State);
		EnterRule(_localctx, 314, RULE_structInterfaces);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1993; Match(COLON);
			State = 1994; InterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public StructMemberDeclarationContext[] structMemberDeclaration() {
			return GetRuleContexts<StructMemberDeclarationContext>();
		}
		public StructMemberDeclarationContext structMemberDeclaration(int i) {
			return GetRuleContext<StructMemberDeclarationContext>(i);
		}
		public StructBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structBody; } }
		public string RuleName { get { return "StructBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStructBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStructBody(this);
		}
	}

	[RuleVersion(0)]
	public StructBodyContext StructBody() {
		StructBodyContext _localctx = new StructBodyContext(Context, State);
		EnterRule(_localctx, 316, RULE_structBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1996; Match(OPEN_BRACE);
			State = 2000;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONST) | (1L << DECIMAL) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << ENUM) | (1L << EQUALS) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FIXED) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IMPLICIT) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OVERRIDE - 65)) | (1L << (PARTIAL - 65)) | (1L << (PRIVATE - 65)) | (1L << (PROTECTED - 65)) | (1L << (PUBLIC - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SEALED - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STATIC - 65)) | (1L << (STRING - 65)) | (1L << (STRUCT - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNMANAGED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VIRTUAL - 65)) | (1L << (VOID - 65)) | (1L << (VOLATILE - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)) | (1L << (OPEN_PARENS - 65)))) != 0)) {
				{
				{
				State = 1997; StructMemberDeclaration();
				}
				}
				State = 2002;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2003; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberDeclarationContext : ParserRuleContext {
		public CommonMemberDeclarationContext commonMemberDeclaration() {
			return GetRuleContext<CommonMemberDeclarationContext>(0);
		}
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public AllMemberModifiersContext allMemberModifiers() {
			return GetRuleContext<AllMemberModifiersContext>(0);
		}
		public FixedSizeBufferDeclaratorContext[] fixedSizeBufferDeclarator() {
			return GetRuleContexts<FixedSizeBufferDeclaratorContext>();
		}
		public FixedSizeBufferDeclaratorContext fixedSizeBufferDeclarator(int i) {
			return GetRuleContext<FixedSizeBufferDeclaratorContext>(i);
		}
		public StructMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMemberDeclaration; } }
		public string RuleName { get { return "StructMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStructMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStructMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberDeclarationContext StructMemberDeclaration() {
		StructMemberDeclarationContext _localctx = new StructMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 318, RULE_structMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2006;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2005; Attributes();
				}
			}

			State = 2009;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,238,Context) ) {
			case 1:
				{
				State = 2008; AllMemberModifiers();
				}
				break;
			}
			State = 2021;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CLASS:
			case CONST:
			case DECIMAL:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case ENUM:
			case EQUALS:
			case EVENT:
			case EXPLICIT:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case IMPLICIT:
			case INT:
			case INTERFACE:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case READONLY:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case STRUCT:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case VOID:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case OPEN_PARENS:
				{
				State = 2011; CommonMemberDeclaration();
				}
				break;
			case FIXED:
				{
				State = 2012; Match(FIXED);
				State = 2013; Type();
				State = 2015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2014; FixedSizeBufferDeclarator();
					}
					}
					State = 2017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (UNMANAGED - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0) );
				State = 2019; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayTypeContext : ParserRuleContext {
		public BaseTypeContext baseType() {
			return GetRuleContext<BaseTypeContext>(0);
		}
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public ITerminalNode[] STAR() { return GetTokens(CSharpParser.STAR); }
		public ITerminalNode STAR(int i) {
			return GetToken(CSharpParser.STAR, i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharpParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharpParser.INTERR, i);
		}
		public ArrayTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayType; } }
		public string RuleName { get { return "ArrayType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArrayType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArrayType(this);
		}
	}

	[RuleVersion(0)]
	public ArrayTypeContext ArrayType() {
		ArrayTypeContext _localctx = new ArrayTypeContext(Context, State);
		EnterRule(_localctx, 320, RULE_arrayType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2023; BaseType();
			State = 2031;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==STAR || _la==INTERR) {
					{
					{
					State = 2024;
					_la = TokenStream.LA(1);
					if ( !(_la==STAR || _la==INTERR) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 2029;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2030; RankSpecifier();
				}
				}
				State = 2033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 126)) & ~0x3f) == 0 && ((1L << (_la - 126)) & ((1L << (OPEN_BRACKET - 126)) | (1L << (STAR - 126)) | (1L << (INTERR - 126)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RankSpecifierContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public RankSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rankSpecifier; } }
		public string RuleName { get { return "RankSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRankSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRankSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public RankSpecifierContext RankSpecifier() {
		RankSpecifierContext _localctx = new RankSpecifierContext(Context, State);
		EnterRule(_localctx, 322, RULE_rankSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2035; Match(OPEN_BRACKET);
			State = 2039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2036; Match(COMMA);
				}
				}
				State = 2041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2042; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public string RuleName { get { return "ArrayInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext ArrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 324, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2044; Match(OPEN_BRACE);
			State = 2056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_BRACE - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
				{
				State = 2045; VariableInitializer();
				State = 2050;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2046; Match(COMMA);
						State = 2047; VariableInitializer();
						}
						} 
					}
					State = 2052;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,244,Context);
				}
				State = 2054;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2053; Match(COMMA);
					}
				}

				}
			}

			State = 2058; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterListContext : ParserRuleContext {
		public ITerminalNode LT() { return GetToken(CSharpParser.LT, 0); }
		public VariantTypeParameterContext[] variantTypeParameter() {
			return GetRuleContexts<VariantTypeParameterContext>();
		}
		public VariantTypeParameterContext variantTypeParameter(int i) {
			return GetRuleContext<VariantTypeParameterContext>(i);
		}
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public VariantTypeParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameterList; } }
		public string RuleName { get { return "VariantTypeParameterList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameterList(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterListContext VariantTypeParameterList() {
		VariantTypeParameterListContext _localctx = new VariantTypeParameterListContext(Context, State);
		EnterRule(_localctx, 326, RULE_variantTypeParameterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2060; Match(LT);
			State = 2061; VariantTypeParameter();
			State = 2066;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2062; Match(COMMA);
				State = 2063; VariantTypeParameter();
				}
				}
				State = 2068;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2069; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariantTypeParameterContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public VarianceAnnotationContext varianceAnnotation() {
			return GetRuleContext<VarianceAnnotationContext>(0);
		}
		public VariantTypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variantTypeParameter; } }
		public string RuleName { get { return "VariantTypeParameter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVariantTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVariantTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public VariantTypeParameterContext VariantTypeParameter() {
		VariantTypeParameterContext _localctx = new VariantTypeParameterContext(Context, State);
		EnterRule(_localctx, 328, RULE_variantTypeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2072;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2071; Attributes();
				}
			}

			State = 2075;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN || _la==OUT) {
				{
				State = 2074; VarianceAnnotation();
				}
			}

			State = 2077; Identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VarianceAnnotationContext : ParserRuleContext {
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public VarianceAnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_varianceAnnotation; } }
		public string RuleName { get { return "VarianceAnnotation"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterVarianceAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitVarianceAnnotation(this);
		}
	}

	[RuleVersion(0)]
	public VarianceAnnotationContext VarianceAnnotation() {
		VarianceAnnotationContext _localctx = new VarianceAnnotationContext(Context, State);
		EnterRule(_localctx, 330, RULE_varianceAnnotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2079;
			_la = TokenStream.LA(1);
			if ( !(_la==IN || _la==OUT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBaseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public InterfaceTypeListContext interfaceTypeList() {
			return GetRuleContext<InterfaceTypeListContext>(0);
		}
		public InterfaceBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBase; } }
		public string RuleName { get { return "InterfaceBase"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBase(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBaseContext InterfaceBase() {
		InterfaceBaseContext _localctx = new InterfaceBaseContext(Context, State);
		EnterRule(_localctx, 332, RULE_interfaceBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2081; Match(COLON);
			State = 2082; InterfaceTypeList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public InterfaceMemberDeclarationContext[] interfaceMemberDeclaration() {
			return GetRuleContexts<InterfaceMemberDeclarationContext>();
		}
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration(int i) {
			return GetRuleContext<InterfaceMemberDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public string RuleName { get { return "InterfaceBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext InterfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 334, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084; Match(OPEN_BRACE);
			State = 2088;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << EVENT) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (READONLY - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (STRING - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNMANAGED - 65)) | (1L << (UNSAFE - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (OPEN_BRACKET - 65)) | (1L << (OPEN_PARENS - 65)))) != 0)) {
				{
				{
				State = 2085; InterfaceMemberDeclaration();
				}
				}
				State = 2090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2091; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public InterfaceAccessorsContext interfaceAccessors() {
			return GetRuleContext<InterfaceAccessorsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public string RuleName { get { return "InterfaceMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext InterfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 336, RULE_interfaceMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2094;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2093; Attributes();
				}
			}

			State = 2097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NEW) {
				{
				State = 2096; Match(NEW);
				}
			}

			State = 2162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 2100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 2099; Match(UNSAFE);
					}
				}

				State = 2107;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2102; Match(REF);
					}
					break;
				case 2:
					{
					State = 2103; Match(REF);
					State = 2104; Match(READONLY);
					}
					break;
				case 3:
					{
					State = 2105; Match(READONLY);
					State = 2106; Match(REF);
					}
					break;
				}
				State = 2109; Type();
				State = 2137;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
				case 1:
					{
					State = 2110; Identifier();
					State = 2112;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2111; TypeParameterList();
						}
					}

					State = 2114; Match(OPEN_PARENS);
					State = 2116;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
						{
						State = 2115; FormalParameterList();
						}
					}

					State = 2118; Match(CLOSE_PARENS);
					State = 2120;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE) {
						{
						State = 2119; TypeParameterConstraintsClauses();
						}
					}

					State = 2122; Match(SEMICOLON);
					}
					break;
				case 2:
					{
					State = 2124; Identifier();
					State = 2125; Match(OPEN_BRACE);
					State = 2126; InterfaceAccessors();
					State = 2127; Match(CLOSE_BRACE);
					}
					break;
				case 3:
					{
					State = 2129; Match(THIS);
					State = 2130; Match(OPEN_BRACKET);
					State = 2131; FormalParameterList();
					State = 2132; Match(CLOSE_BRACKET);
					State = 2133; Match(OPEN_BRACE);
					State = 2134; InterfaceAccessors();
					State = 2135; Match(CLOSE_BRACE);
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNSAFE) {
					{
					State = 2139; Match(UNSAFE);
					}
				}

				State = 2142; Match(VOID);
				State = 2143; Identifier();
				State = 2145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 2144; TypeParameterList();
					}
				}

				State = 2147; Match(OPEN_PARENS);
				State = 2149;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
					{
					State = 2148; FormalParameterList();
					}
				}

				State = 2151; Match(CLOSE_PARENS);
				State = 2153;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE) {
					{
					State = 2152; TypeParameterConstraintsClauses();
					}
				}

				State = 2155; Match(SEMICOLON);
				}
				break;
			case 3:
				{
				State = 2157; Match(EVENT);
				State = 2158; Type();
				State = 2159; Identifier();
				State = 2160; Match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceAccessorsContext : ParserRuleContext {
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public ITerminalNode[] SEMICOLON() { return GetTokens(CSharpParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(CSharpParser.SEMICOLON, i);
		}
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public AttributesContext[] attributes() {
			return GetRuleContexts<AttributesContext>();
		}
		public AttributesContext attributes(int i) {
			return GetRuleContext<AttributesContext>(i);
		}
		public InterfaceAccessorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceAccessors; } }
		public string RuleName { get { return "InterfaceAccessors"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceAccessors(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceAccessors(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceAccessorsContext InterfaceAccessors() {
		InterfaceAccessorsContext _localctx = new InterfaceAccessorsContext(Context, State);
		EnterRule(_localctx, 338, RULE_interfaceAccessors);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2165;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2164; Attributes();
				}
			}

			State = 2185;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GET:
				{
				State = 2167; Match(GET);
				State = 2168; Match(SEMICOLON);
				State = 2174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SET || _la==OPEN_BRACKET) {
					{
					State = 2170;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 2169; Attributes();
						}
					}

					State = 2172; Match(SET);
					State = 2173; Match(SEMICOLON);
					}
				}

				}
				break;
			case SET:
				{
				State = 2176; Match(SET);
				State = 2177; Match(SEMICOLON);
				State = 2183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GET || _la==OPEN_BRACKET) {
					{
					State = 2179;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_BRACKET) {
						{
						State = 2178; Attributes();
						}
					}

					State = 2181; Match(GET);
					State = 2182; Match(SEMICOLON);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBaseContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public EnumBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBase; } }
		public string RuleName { get { return "EnumBase"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnumBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnumBase(this);
		}
	}

	[RuleVersion(0)]
	public EnumBaseContext EnumBase() {
		EnumBaseContext _localctx = new EnumBaseContext(Context, State);
		EnterRule(_localctx, 340, RULE_enumBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2187; Match(COLON);
			State = 2188; Type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public EnumMemberDeclarationContext[] enumMemberDeclaration() {
			return GetRuleContexts<EnumMemberDeclarationContext>();
		}
		public EnumMemberDeclarationContext enumMemberDeclaration(int i) {
			return GetRuleContext<EnumMemberDeclarationContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public EnumBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBody; } }
		public string RuleName { get { return "EnumBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnumBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnumBody(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyContext EnumBody() {
		EnumBodyContext _localctx = new EnumBodyContext(Context, State);
		EnterRule(_localctx, 342, RULE_enumBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2190; Match(OPEN_BRACE);
			State = 2202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (UNMANAGED - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)) | (1L << (OPEN_BRACKET - 68)))) != 0)) {
				{
				State = 2191; EnumMemberDeclaration();
				State = 2196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,270,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2192; Match(COMMA);
						State = 2193; EnumMemberDeclaration();
						}
						} 
					}
					State = 2198;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,270,Context);
				}
				State = 2200;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2199; Match(COMMA);
					}
				}

				}
			}

			State = 2204; Match(CLOSE_BRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumMemberDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributesContext attributes() {
			return GetRuleContext<AttributesContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnumMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumMemberDeclaration; } }
		public string RuleName { get { return "EnumMemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnumMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnumMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EnumMemberDeclarationContext EnumMemberDeclaration() {
		EnumMemberDeclarationContext _localctx = new EnumMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 344, RULE_enumMemberDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2207;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACKET) {
				{
				State = 2206; Attributes();
				}
			}

			State = 2209; Identifier();
			State = 2212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2210; Match(ASSIGNMENT);
				State = 2211; Expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeSectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public GlobalAttributeTargetContext globalAttributeTarget() {
			return GetRuleContext<GlobalAttributeTargetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public GlobalAttributeSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeSection; } }
		public string RuleName { get { return "GlobalAttributeSection"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeSection(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeSectionContext GlobalAttributeSection() {
		GlobalAttributeSectionContext _localctx = new GlobalAttributeSectionContext(Context, State);
		EnterRule(_localctx, 346, RULE_globalAttributeSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2214; Match(OPEN_BRACKET);
			State = 2215; GlobalAttributeTarget();
			State = 2216; Match(COLON);
			State = 2217; AttributeList();
			State = 2219;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2218; Match(COMMA);
				}
			}

			State = 2221; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalAttributeTargetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public GlobalAttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalAttributeTarget; } }
		public string RuleName { get { return "GlobalAttributeTarget"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterGlobalAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitGlobalAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public GlobalAttributeTargetContext GlobalAttributeTarget() {
		GlobalAttributeTargetContext _localctx = new GlobalAttributeTargetContext(Context, State);
		EnterRule(_localctx, 348, RULE_globalAttributeTarget);
		try {
			State = 2225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2223; Keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2224; Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributesContext : ParserRuleContext {
		public AttributeSectionContext[] attributeSection() {
			return GetRuleContexts<AttributeSectionContext>();
		}
		public AttributeSectionContext attributeSection(int i) {
			return GetRuleContext<AttributeSectionContext>(i);
		}
		public AttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributes; } }
		public string RuleName { get { return "Attributes"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributes(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributes(this);
		}
	}

	[RuleVersion(0)]
	public AttributesContext Attributes() {
		AttributesContext _localctx = new AttributesContext(Context, State);
		EnterRule(_localctx, 350, RULE_attributes);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2227; AttributeSection();
				}
				}
				State = 2230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==OPEN_BRACKET );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSectionContext : ParserRuleContext {
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public AttributeTargetContext attributeTarget() {
			return GetRuleContext<AttributeTargetContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public AttributeSectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSection; } }
		public string RuleName { get { return "AttributeSection"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributeSection(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributeSection(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSectionContext AttributeSection() {
		AttributeSectionContext _localctx = new AttributeSectionContext(Context, State);
		EnterRule(_localctx, 352, RULE_attributeSection);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2232; Match(OPEN_BRACKET);
			State = 2236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 2233; AttributeTarget();
				State = 2234; Match(COLON);
				}
				break;
			}
			State = 2238; AttributeList();
			State = 2240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2239; Match(COMMA);
				}
			}

			State = 2242; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTargetContext : ParserRuleContext {
		public KeywordContext keyword() {
			return GetRuleContext<KeywordContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public AttributeTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeTarget; } }
		public string RuleName { get { return "AttributeTarget"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributeTarget(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributeTarget(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTargetContext AttributeTarget() {
		AttributeTargetContext _localctx = new AttributeTargetContext(Context, State);
		EnterRule(_localctx, 354, RULE_attributeTarget);
		try {
			State = 2246;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2244; Keyword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2245; Identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : ParserRuleContext {
		public AttributeContext[] attribute() {
			return GetRuleContexts<AttributeContext>();
		}
		public AttributeContext attribute(int i) {
			return GetRuleContext<AttributeContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		public string RuleName { get { return "AttributeList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext AttributeList() {
		AttributeListContext _localctx = new AttributeListContext(Context, State);
		EnterRule(_localctx, 356, RULE_attributeList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2248; Attribute();
			State = 2253;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2249; Match(COMMA);
					State = 2250; Attribute();
					}
					} 
				}
				State = 2255;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public NamespaceOrTypeNameContext namespaceOrTypeName() {
			return GetRuleContext<NamespaceOrTypeNameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public AttributeArgumentContext[] attributeArgument() {
			return GetRuleContexts<AttributeArgumentContext>();
		}
		public AttributeArgumentContext attributeArgument(int i) {
			return GetRuleContext<AttributeArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public string RuleName { get { return "Attribute"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext Attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 358, RULE_attribute);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2256; NamespaceOrTypeName();
			State = 2269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PARENS) {
				{
				State = 2257; Match(OPEN_PARENS);
				State = 2266;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 2258; AttributeArgument();
					State = 2263;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA) {
						{
						{
						State = 2259; Match(COMMA);
						State = 2260; AttributeArgument();
						}
						}
						State = 2265;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
				}

				State = 2268; Match(CLOSE_PARENS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public AttributeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgument; } }
		public string RuleName { get { return "AttributeArgument"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterAttributeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitAttributeArgument(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentContext AttributeArgument() {
		AttributeArgumentContext _localctx = new AttributeArgumentContext(Context, State);
		EnterRule(_localctx, 360, RULE_attributeArgument);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				{
				State = 2271; Identifier();
				State = 2272; Match(COLON);
				}
				break;
			}
			State = 2276; Expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerTypeContext : ParserRuleContext {
		public ITerminalNode STAR() { return GetToken(CSharpParser.STAR, 0); }
		public SimpleTypeContext simpleType() {
			return GetRuleContext<SimpleTypeContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public RankSpecifierContext[] rankSpecifier() {
			return GetRuleContexts<RankSpecifierContext>();
		}
		public RankSpecifierContext rankSpecifier(int i) {
			return GetRuleContext<RankSpecifierContext>(i);
		}
		public ITerminalNode[] INTERR() { return GetTokens(CSharpParser.INTERR); }
		public ITerminalNode INTERR(int i) {
			return GetToken(CSharpParser.INTERR, i);
		}
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public PointerTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerType; } }
		public string RuleName { get { return "PointerType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPointerType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPointerType(this);
		}
	}

	[RuleVersion(0)]
	public PointerTypeContext PointerType() {
		PointerTypeContext _localctx = new PointerTypeContext(Context, State);
		EnterRule(_localctx, 362, RULE_pointerType);
		int _la;
		try {
			State = 2293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case DECIMAL:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case STRING:
			case UINT:
			case ULONG:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2280;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case BOOL:
				case BYTE:
				case CHAR:
				case DECIMAL:
				case DOUBLE:
				case FLOAT:
				case INT:
				case LONG:
				case SBYTE:
				case SHORT:
				case UINT:
				case ULONG:
				case USHORT:
					{
					State = 2278; SimpleType();
					}
					break;
				case ADD:
				case ALIAS:
				case ARGLIST:
				case ASCENDING:
				case ASYNC:
				case AWAIT:
				case BY:
				case DESCENDING:
				case DYNAMIC:
				case EQUALS:
				case FROM:
				case GET:
				case GROUP:
				case INTO:
				case JOIN:
				case LET:
				case NAMEOF:
				case OBJECT:
				case ON:
				case ORDERBY:
				case PARTIAL:
				case REMOVE:
				case SELECT:
				case SET:
				case STRING:
				case UNMANAGED:
				case VAR:
				case WHEN:
				case WHERE:
				case YIELD:
				case IDENTIFIER:
					{
					State = 2279; ClassType();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 2286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==OPEN_BRACKET || _la==INTERR) {
					{
					State = 2284;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case OPEN_BRACKET:
						{
						State = 2282; RankSpecifier();
						}
						break;
					case INTERR:
						{
						State = 2283; Match(INTERR);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 2288;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 2289; Match(STAR);
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2291; Match(VOID);
				State = 2292; Match(STAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedPointerDeclaratorsContext : ParserRuleContext {
		public FixedPointerDeclaratorContext[] fixedPointerDeclarator() {
			return GetRuleContexts<FixedPointerDeclaratorContext>();
		}
		public FixedPointerDeclaratorContext fixedPointerDeclarator(int i) {
			return GetRuleContext<FixedPointerDeclaratorContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public FixedPointerDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedPointerDeclarators; } }
		public string RuleName { get { return "FixedPointerDeclarators"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedPointerDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedPointerDeclarators(this);
		}
	}

	[RuleVersion(0)]
	public FixedPointerDeclaratorsContext FixedPointerDeclarators() {
		FixedPointerDeclaratorsContext _localctx = new FixedPointerDeclaratorsContext(Context, State);
		EnterRule(_localctx, 364, RULE_fixedPointerDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2295; FixedPointerDeclarator();
			State = 2300;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2296; Match(COMMA);
				State = 2297; FixedPointerDeclarator();
				}
				}
				State = 2302;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedPointerDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public FixedPointerInitializerContext fixedPointerInitializer() {
			return GetRuleContext<FixedPointerInitializerContext>(0);
		}
		public FixedPointerDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedPointerDeclarator; } }
		public string RuleName { get { return "FixedPointerDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedPointerDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedPointerDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public FixedPointerDeclaratorContext FixedPointerDeclarator() {
		FixedPointerDeclaratorContext _localctx = new FixedPointerDeclaratorContext(Context, State);
		EnterRule(_localctx, 366, RULE_fixedPointerDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2303; Identifier();
			State = 2304; Match(ASSIGNMENT);
			State = 2305; FixedPointerInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedPointerInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode AMP() { return GetToken(CSharpParser.AMP, 0); }
		public StackallocInitializerContext stackallocInitializer() {
			return GetRuleContext<StackallocInitializerContext>(0);
		}
		public FixedPointerInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedPointerInitializer; } }
		public string RuleName { get { return "FixedPointerInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedPointerInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedPointerInitializer(this);
		}
	}

	[RuleVersion(0)]
	public FixedPointerInitializerContext FixedPointerInitializer() {
		FixedPointerInitializerContext _localctx = new FixedPointerInitializerContext(Context, State);
		EnterRule(_localctx, 368, RULE_fixedPointerInitializer);
		try {
			State = 2312;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2308;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
				case 1:
					{
					State = 2307; Match(AMP);
					}
					break;
				}
				State = 2310; Expression();
				}
				break;
			case STACKALLOC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2311; StackallocInitializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FixedSizeBufferDeclaratorContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public FixedSizeBufferDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fixedSizeBufferDeclarator; } }
		public string RuleName { get { return "FixedSizeBufferDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFixedSizeBufferDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFixedSizeBufferDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public FixedSizeBufferDeclaratorContext FixedSizeBufferDeclarator() {
		FixedSizeBufferDeclaratorContext _localctx = new FixedSizeBufferDeclaratorContext(Context, State);
		EnterRule(_localctx, 370, RULE_fixedSizeBufferDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2314; Identifier();
			State = 2315; Match(OPEN_BRACKET);
			State = 2316; Expression();
			State = 2317; Match(CLOSE_BRACKET);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StackallocInitializerContext : ParserRuleContext {
		public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public StackallocInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stackallocInitializer; } }
		public string RuleName { get { return "StackallocInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStackallocInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStackallocInitializer(this);
		}
	}

	[RuleVersion(0)]
	public StackallocInitializerContext StackallocInitializer() {
		StackallocInitializerContext _localctx = new StackallocInitializerContext(Context, State);
		EnterRule(_localctx, 372, RULE_stackallocInitializer);
		int _la;
		try {
			int _alt;
			State = 2348;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2319; Match(STACKALLOC);
				State = 2320; Type();
				State = 2321; Match(OPEN_BRACKET);
				State = 2322; Expression();
				State = 2323; Match(CLOSE_BRACKET);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2325; Match(STACKALLOC);
				State = 2327;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (PARTIAL - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
					{
					State = 2326; Type();
					}
				}

				State = 2329; Match(OPEN_BRACKET);
				State = 2331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
					{
					State = 2330; Expression();
					}
				}

				State = 2333; Match(CLOSE_BRACKET);
				State = 2334; Match(OPEN_BRACE);
				State = 2335; Expression();
				State = 2340;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2336; Match(COMMA);
						State = 2337; Expression();
						}
						} 
					}
					State = 2342;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,295,Context);
				}
				State = 2344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 2343; Match(COMMA);
					}
				}

				State = 2346; Match(CLOSE_BRACE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightArrowContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public RightArrowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightArrow; } }
		public string RuleName { get { return "RightArrow"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRightArrow(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRightArrow(this);
		}
	}

	[RuleVersion(0)]
	public RightArrowContext RightArrow() {
		RightArrowContext _localctx = new RightArrowContext(Context, State);
		EnterRule(_localctx, 374, RULE_rightArrow);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2350; _localctx.first = Match(ASSIGNMENT);
			State = 2351; _localctx.second = Match(GT);
			State = 2352;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] GT() { return GetTokens(CSharpParser.GT); }
		public ITerminalNode GT(int i) {
			return GetToken(CSharpParser.GT, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public string RuleName { get { return "RightShift"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext RightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 376, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2354; _localctx.first = Match(GT);
			State = 2355; _localctx.second = Match(GT);
			State = 2356;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignmentContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode GT() { return GetToken(CSharpParser.GT, 0); }
		public ITerminalNode OP_GE() { return GetToken(CSharpParser.OP_GE, 0); }
		public RightShiftAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssignment; } }
		public string RuleName { get { return "RightShiftAssignment"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterRightShiftAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitRightShiftAssignment(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignmentContext RightShiftAssignment() {
		RightShiftAssignmentContext _localctx = new RightShiftAssignmentContext(Context, State);
		EnterRule(_localctx, 378, RULE_rightShiftAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2358; _localctx.first = Match(GT);
			State = 2359; _localctx.second = Match(OP_GE);
			State = 2360;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public StringLiteralContext stringLiteral() {
			return GetRuleContext<StringLiteralContext>(0);
		}
		public ITerminalNode INTEGER_LITERAL() { return GetToken(CSharpParser.INTEGER_LITERAL, 0); }
		public ITerminalNode HEX_INTEGER_LITERAL() { return GetToken(CSharpParser.HEX_INTEGER_LITERAL, 0); }
		public ITerminalNode BIN_INTEGER_LITERAL() { return GetToken(CSharpParser.BIN_INTEGER_LITERAL, 0); }
		public ITerminalNode REAL_LITERAL() { return GetToken(CSharpParser.REAL_LITERAL, 0); }
		public ITerminalNode CHARACTER_LITERAL() { return GetToken(CSharpParser.CHARACTER_LITERAL, 0); }
		public ITerminalNode NULL() { return GetToken(CSharpParser.NULL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public string RuleName { get { return "Literal"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext Literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 380, RULE_literal);
		try {
			State = 2370;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FALSE:
			case TRUE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2362; BooleanLiteral();
				}
				break;
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2363; StringLiteral();
				}
				break;
			case INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2364; Match(INTEGER_LITERAL);
				}
				break;
			case HEX_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2365; Match(HEX_INTEGER_LITERAL);
				}
				break;
			case BIN_INTEGER_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2366; Match(BIN_INTEGER_LITERAL);
				}
				break;
			case REAL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2367; Match(REAL_LITERAL);
				}
				break;
			case CHARACTER_LITERAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2368; Match(CHARACTER_LITERAL);
				}
				break;
			case NULL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2369; Match(NULL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public string RuleName { get { return "BooleanLiteral"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext BooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 382, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2372;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE || _la==TRUE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralContext : ParserRuleContext {
		public InterpolatedRegularStringContext interpolatedRegularString() {
			return GetRuleContext<InterpolatedRegularStringContext>(0);
		}
		public InterpolatedVerbatiumStringContext interpolatedVerbatiumString() {
			return GetRuleContext<InterpolatedVerbatiumStringContext>(0);
		}
		public ITerminalNode REGULAR_STRING() { return GetToken(CSharpParser.REGULAR_STRING, 0); }
		public ITerminalNode VERBATIUM_STRING() { return GetToken(CSharpParser.VERBATIUM_STRING, 0); }
		public StringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiteral; } }
		public string RuleName { get { return "StringLiteral"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStringLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralContext StringLiteral() {
		StringLiteralContext _localctx = new StringLiteralContext(Context, State);
		EnterRule(_localctx, 384, RULE_stringLiteral);
		try {
			State = 2378;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTERPOLATED_REGULAR_STRING_START:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2374; InterpolatedRegularString();
				}
				break;
			case INTERPOLATED_VERBATIUM_STRING_START:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2375; InterpolatedVerbatiumString();
				}
				break;
			case REGULAR_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2376; Match(REGULAR_STRING);
				}
				break;
			case VERBATIUM_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2377; Match(VERBATIUM_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedRegularStringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_REGULAR_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_REGULAR_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public InterpolatedRegularStringPartContext[] interpolatedRegularStringPart() {
			return GetRuleContexts<InterpolatedRegularStringPartContext>();
		}
		public InterpolatedRegularStringPartContext interpolatedRegularStringPart(int i) {
			return GetRuleContext<InterpolatedRegularStringPartContext>(i);
		}
		public InterpolatedRegularStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedRegularString; } }
		public string RuleName { get { return "InterpolatedRegularString"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedRegularString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedRegularString(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedRegularStringContext InterpolatedRegularString() {
		InterpolatedRegularStringContext _localctx = new InterpolatedRegularStringContext(Context, State);
		EnterRule(_localctx, 386, RULE_interpolatedRegularString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2380; Match(INTERPOLATED_REGULAR_STRING_START);
			State = 2384;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)) | (1L << (DOUBLE_CURLY_INSIDE - 134)) | (1L << (REGULAR_CHAR_INSIDE - 134)) | (1L << (REGULAR_STRING_INSIDE - 134)))) != 0)) {
				{
				{
				State = 2381; InterpolatedRegularStringPart();
				}
				}
				State = 2386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2387; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedVerbatiumStringContext : ParserRuleContext {
		public ITerminalNode INTERPOLATED_VERBATIUM_STRING_START() { return GetToken(CSharpParser.INTERPOLATED_VERBATIUM_STRING_START, 0); }
		public ITerminalNode DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.DOUBLE_QUOTE_INSIDE, 0); }
		public InterpolatedVerbatiumStringPartContext[] interpolatedVerbatiumStringPart() {
			return GetRuleContexts<InterpolatedVerbatiumStringPartContext>();
		}
		public InterpolatedVerbatiumStringPartContext interpolatedVerbatiumStringPart(int i) {
			return GetRuleContext<InterpolatedVerbatiumStringPartContext>(i);
		}
		public InterpolatedVerbatiumStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedVerbatiumString; } }
		public string RuleName { get { return "InterpolatedVerbatiumString"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedVerbatiumString(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedVerbatiumString(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedVerbatiumStringContext InterpolatedVerbatiumString() {
		InterpolatedVerbatiumStringContext _localctx = new InterpolatedVerbatiumStringContext(Context, State);
		EnterRule(_localctx, 388, RULE_interpolatedVerbatiumString);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2389; Match(INTERPOLATED_VERBATIUM_STRING_START);
			State = 2393;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)) | (1L << (DOUBLE_CURLY_INSIDE - 134)) | (1L << (VERBATIUM_DOUBLE_QUOTE_INSIDE - 134)) | (1L << (VERBATIUM_INSIDE_STRING - 134)))) != 0)) {
				{
				{
				State = 2390; InterpolatedVerbatiumStringPart();
				}
				}
				State = 2395;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2396; Match(DOUBLE_QUOTE_INSIDE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedRegularStringPartContext : ParserRuleContext {
		public InterpolatedStringExpressionContext interpolatedStringExpression() {
			return GetRuleContext<InterpolatedStringExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public ITerminalNode REGULAR_CHAR_INSIDE() { return GetToken(CSharpParser.REGULAR_CHAR_INSIDE, 0); }
		public ITerminalNode REGULAR_STRING_INSIDE() { return GetToken(CSharpParser.REGULAR_STRING_INSIDE, 0); }
		public InterpolatedRegularStringPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedRegularStringPart; } }
		public string RuleName { get { return "InterpolatedRegularStringPart"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedRegularStringPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedRegularStringPart(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedRegularStringPartContext InterpolatedRegularStringPart() {
		InterpolatedRegularStringPartContext _localctx = new InterpolatedRegularStringPartContext(Context, State);
		EnterRule(_localctx, 390, RULE_interpolatedRegularStringPart);
		try {
			State = 2402;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2398; InterpolatedStringExpression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2399; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case REGULAR_CHAR_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2400; Match(REGULAR_CHAR_INSIDE);
				}
				break;
			case REGULAR_STRING_INSIDE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2401; Match(REGULAR_STRING_INSIDE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedVerbatiumStringPartContext : ParserRuleContext {
		public InterpolatedStringExpressionContext interpolatedStringExpression() {
			return GetRuleContext<InterpolatedStringExpressionContext>(0);
		}
		public ITerminalNode DOUBLE_CURLY_INSIDE() { return GetToken(CSharpParser.DOUBLE_CURLY_INSIDE, 0); }
		public ITerminalNode VERBATIUM_DOUBLE_QUOTE_INSIDE() { return GetToken(CSharpParser.VERBATIUM_DOUBLE_QUOTE_INSIDE, 0); }
		public ITerminalNode VERBATIUM_INSIDE_STRING() { return GetToken(CSharpParser.VERBATIUM_INSIDE_STRING, 0); }
		public InterpolatedVerbatiumStringPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedVerbatiumStringPart; } }
		public string RuleName { get { return "InterpolatedVerbatiumStringPart"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedVerbatiumStringPart(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedVerbatiumStringPart(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedVerbatiumStringPartContext InterpolatedVerbatiumStringPart() {
		InterpolatedVerbatiumStringPartContext _localctx = new InterpolatedVerbatiumStringPartContext(Context, State);
		EnterRule(_localctx, 392, RULE_interpolatedVerbatiumStringPart);
		try {
			State = 2408;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD:
			case ALIAS:
			case ARGLIST:
			case ASCENDING:
			case ASYNC:
			case AWAIT:
			case BASE:
			case BOOL:
			case BY:
			case BYTE:
			case CHAR:
			case CHECKED:
			case DECIMAL:
			case DEFAULT:
			case DELEGATE:
			case DESCENDING:
			case DOUBLE:
			case DYNAMIC:
			case EQUALS:
			case FALSE:
			case FLOAT:
			case FROM:
			case GET:
			case GROUP:
			case INT:
			case INTO:
			case JOIN:
			case LET:
			case LONG:
			case NAMEOF:
			case NEW:
			case NULL:
			case OBJECT:
			case ON:
			case ORDERBY:
			case PARTIAL:
			case REF:
			case REMOVE:
			case SBYTE:
			case SELECT:
			case SET:
			case SHORT:
			case SIZEOF:
			case STRING:
			case THIS:
			case TRUE:
			case TYPEOF:
			case UINT:
			case ULONG:
			case UNCHECKED:
			case UNMANAGED:
			case USHORT:
			case VAR:
			case WHEN:
			case WHERE:
			case YIELD:
			case IDENTIFIER:
			case LITERAL_ACCESS:
			case INTEGER_LITERAL:
			case HEX_INTEGER_LITERAL:
			case BIN_INTEGER_LITERAL:
			case REAL_LITERAL:
			case CHARACTER_LITERAL:
			case REGULAR_STRING:
			case VERBATIUM_STRING:
			case INTERPOLATED_REGULAR_STRING_START:
			case INTERPOLATED_VERBATIUM_STRING_START:
			case OPEN_PARENS:
			case PLUS:
			case MINUS:
			case STAR:
			case AMP:
			case CARET:
			case BANG:
			case TILDE:
			case OP_INC:
			case OP_DEC:
			case OP_RANGE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2404; InterpolatedStringExpression();
				}
				break;
			case DOUBLE_CURLY_INSIDE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2405; Match(DOUBLE_CURLY_INSIDE);
				}
				break;
			case VERBATIUM_DOUBLE_QUOTE_INSIDE:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2406; Match(VERBATIUM_DOUBLE_QUOTE_INSIDE);
				}
				break;
			case VERBATIUM_INSIDE_STRING:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2407; Match(VERBATIUM_INSIDE_STRING);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterpolatedStringExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CSharpParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CSharpParser.COMMA, i);
		}
		public ITerminalNode COLON() { return GetToken(CSharpParser.COLON, 0); }
		public ITerminalNode[] FORMAT_STRING() { return GetTokens(CSharpParser.FORMAT_STRING); }
		public ITerminalNode FORMAT_STRING(int i) {
			return GetToken(CSharpParser.FORMAT_STRING, i);
		}
		public InterpolatedStringExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interpolatedStringExpression; } }
		public string RuleName { get { return "InterpolatedStringExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterpolatedStringExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterpolatedStringExpression(this);
		}
	}

	[RuleVersion(0)]
	public InterpolatedStringExpressionContext InterpolatedStringExpression() {
		InterpolatedStringExpressionContext _localctx = new InterpolatedStringExpressionContext(Context, State);
		EnterRule(_localctx, 394, RULE_interpolatedStringExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2410; Expression();
			State = 2415;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 2411; Match(COMMA);
				State = 2412; Expression();
				}
				}
				State = 2417;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2424;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2418; Match(COLON);
				State = 2420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 2419; Match(FORMAT_STRING);
					}
					}
					State = 2422;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==FORMAT_STRING );
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordContext : ParserRuleContext {
		public ITerminalNode ABSTRACT() { return GetToken(CSharpParser.ABSTRACT, 0); }
		public ITerminalNode AS() { return GetToken(CSharpParser.AS, 0); }
		public ITerminalNode BASE() { return GetToken(CSharpParser.BASE, 0); }
		public ITerminalNode BOOL() { return GetToken(CSharpParser.BOOL, 0); }
		public ITerminalNode BREAK() { return GetToken(CSharpParser.BREAK, 0); }
		public ITerminalNode BYTE() { return GetToken(CSharpParser.BYTE, 0); }
		public ITerminalNode CASE() { return GetToken(CSharpParser.CASE, 0); }
		public ITerminalNode CATCH() { return GetToken(CSharpParser.CATCH, 0); }
		public ITerminalNode CHAR() { return GetToken(CSharpParser.CHAR, 0); }
		public ITerminalNode CHECKED() { return GetToken(CSharpParser.CHECKED, 0); }
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public ITerminalNode CONTINUE() { return GetToken(CSharpParser.CONTINUE, 0); }
		public ITerminalNode DECIMAL() { return GetToken(CSharpParser.DECIMAL, 0); }
		public ITerminalNode DEFAULT() { return GetToken(CSharpParser.DEFAULT, 0); }
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public ITerminalNode DO() { return GetToken(CSharpParser.DO, 0); }
		public ITerminalNode DOUBLE() { return GetToken(CSharpParser.DOUBLE, 0); }
		public ITerminalNode ELSE() { return GetToken(CSharpParser.ELSE, 0); }
		public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public ITerminalNode EXPLICIT() { return GetToken(CSharpParser.EXPLICIT, 0); }
		public ITerminalNode EXTERN() { return GetToken(CSharpParser.EXTERN, 0); }
		public ITerminalNode FALSE() { return GetToken(CSharpParser.FALSE, 0); }
		public ITerminalNode FINALLY() { return GetToken(CSharpParser.FINALLY, 0); }
		public ITerminalNode FIXED() { return GetToken(CSharpParser.FIXED, 0); }
		public ITerminalNode FLOAT() { return GetToken(CSharpParser.FLOAT, 0); }
		public ITerminalNode FOR() { return GetToken(CSharpParser.FOR, 0); }
		public ITerminalNode FOREACH() { return GetToken(CSharpParser.FOREACH, 0); }
		public ITerminalNode GOTO() { return GetToken(CSharpParser.GOTO, 0); }
		public ITerminalNode IF() { return GetToken(CSharpParser.IF, 0); }
		public ITerminalNode IMPLICIT() { return GetToken(CSharpParser.IMPLICIT, 0); }
		public ITerminalNode IN() { return GetToken(CSharpParser.IN, 0); }
		public ITerminalNode INT() { return GetToken(CSharpParser.INT, 0); }
		public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		public ITerminalNode INTERNAL() { return GetToken(CSharpParser.INTERNAL, 0); }
		public ITerminalNode IS() { return GetToken(CSharpParser.IS, 0); }
		public ITerminalNode LOCK() { return GetToken(CSharpParser.LOCK, 0); }
		public ITerminalNode LONG() { return GetToken(CSharpParser.LONG, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(CSharpParser.NAMESPACE, 0); }
		public ITerminalNode NEW() { return GetToken(CSharpParser.NEW, 0); }
		public ITerminalNode NULL() { return GetToken(CSharpParser.NULL, 0); }
		public ITerminalNode OBJECT() { return GetToken(CSharpParser.OBJECT, 0); }
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public ITerminalNode OUT() { return GetToken(CSharpParser.OUT, 0); }
		public ITerminalNode OVERRIDE() { return GetToken(CSharpParser.OVERRIDE, 0); }
		public ITerminalNode PARAMS() { return GetToken(CSharpParser.PARAMS, 0); }
		public ITerminalNode PRIVATE() { return GetToken(CSharpParser.PRIVATE, 0); }
		public ITerminalNode PROTECTED() { return GetToken(CSharpParser.PROTECTED, 0); }
		public ITerminalNode PUBLIC() { return GetToken(CSharpParser.PUBLIC, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public ITerminalNode RETURN() { return GetToken(CSharpParser.RETURN, 0); }
		public ITerminalNode SBYTE() { return GetToken(CSharpParser.SBYTE, 0); }
		public ITerminalNode SEALED() { return GetToken(CSharpParser.SEALED, 0); }
		public ITerminalNode SHORT() { return GetToken(CSharpParser.SHORT, 0); }
		public ITerminalNode SIZEOF() { return GetToken(CSharpParser.SIZEOF, 0); }
		public ITerminalNode STACKALLOC() { return GetToken(CSharpParser.STACKALLOC, 0); }
		public ITerminalNode STATIC() { return GetToken(CSharpParser.STATIC, 0); }
		public ITerminalNode STRING() { return GetToken(CSharpParser.STRING, 0); }
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public ITerminalNode SWITCH() { return GetToken(CSharpParser.SWITCH, 0); }
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ITerminalNode THROW() { return GetToken(CSharpParser.THROW, 0); }
		public ITerminalNode TRUE() { return GetToken(CSharpParser.TRUE, 0); }
		public ITerminalNode TRY() { return GetToken(CSharpParser.TRY, 0); }
		public ITerminalNode TYPEOF() { return GetToken(CSharpParser.TYPEOF, 0); }
		public ITerminalNode UINT() { return GetToken(CSharpParser.UINT, 0); }
		public ITerminalNode ULONG() { return GetToken(CSharpParser.ULONG, 0); }
		public ITerminalNode UNCHECKED() { return GetToken(CSharpParser.UNCHECKED, 0); }
		public ITerminalNode UNMANAGED() { return GetToken(CSharpParser.UNMANAGED, 0); }
		public ITerminalNode UNSAFE() { return GetToken(CSharpParser.UNSAFE, 0); }
		public ITerminalNode USHORT() { return GetToken(CSharpParser.USHORT, 0); }
		public ITerminalNode USING() { return GetToken(CSharpParser.USING, 0); }
		public ITerminalNode VIRTUAL() { return GetToken(CSharpParser.VIRTUAL, 0); }
		public ITerminalNode VOID() { return GetToken(CSharpParser.VOID, 0); }
		public ITerminalNode VOLATILE() { return GetToken(CSharpParser.VOLATILE, 0); }
		public ITerminalNode WHILE() { return GetToken(CSharpParser.WHILE, 0); }
		public KeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyword; } }
		public string RuleName { get { return "Keyword"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterKeyword(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitKeyword(this);
		}
	}

	[RuleVersion(0)]
	public KeywordContext Keyword() {
		KeywordContext _localctx = new KeywordContext(Context, State);
		EnterRule(_localctx, 396, RULE_keyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2426;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << AS) | (1L << BASE) | (1L << BOOL) | (1L << BREAK) | (1L << BYTE) | (1L << CASE) | (1L << CATCH) | (1L << CHAR) | (1L << CHECKED) | (1L << CLASS) | (1L << CONST) | (1L << CONTINUE) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DO) | (1L << DOUBLE) | (1L << ELSE) | (1L << ENUM) | (1L << EVENT) | (1L << EXPLICIT) | (1L << EXTERN) | (1L << FALSE) | (1L << FINALLY) | (1L << FIXED) | (1L << FLOAT) | (1L << FOR) | (1L << FOREACH) | (1L << GOTO) | (1L << IF) | (1L << IMPLICIT) | (1L << IN) | (1L << INT) | (1L << INTERFACE) | (1L << INTERNAL) | (1L << IS) | (1L << LOCK) | (1L << LONG))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (NAMESPACE - 64)) | (1L << (NEW - 64)) | (1L << (NULL - 64)) | (1L << (OBJECT - 64)) | (1L << (OPERATOR - 64)) | (1L << (OUT - 64)) | (1L << (OVERRIDE - 64)) | (1L << (PARAMS - 64)) | (1L << (PRIVATE - 64)) | (1L << (PROTECTED - 64)) | (1L << (PUBLIC - 64)) | (1L << (READONLY - 64)) | (1L << (REF - 64)) | (1L << (RETURN - 64)) | (1L << (SBYTE - 64)) | (1L << (SEALED - 64)) | (1L << (SHORT - 64)) | (1L << (SIZEOF - 64)) | (1L << (STACKALLOC - 64)) | (1L << (STATIC - 64)) | (1L << (STRING - 64)) | (1L << (STRUCT - 64)) | (1L << (SWITCH - 64)) | (1L << (THIS - 64)) | (1L << (THROW - 64)) | (1L << (TRUE - 64)) | (1L << (TRY - 64)) | (1L << (TYPEOF - 64)) | (1L << (UINT - 64)) | (1L << (ULONG - 64)) | (1L << (UNCHECKED - 64)) | (1L << (UNMANAGED - 64)) | (1L << (UNSAFE - 64)) | (1L << (USHORT - 64)) | (1L << (USING - 64)) | (1L << (VIRTUAL - 64)) | (1L << (VOID - 64)) | (1L << (VOLATILE - 64)) | (1L << (WHILE - 64)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDefinitionContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(CSharpParser.CLASS, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public ClassBaseContext classBase() {
			return GetRuleContext<ClassBaseContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ClassDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDefinition; } }
		public string RuleName { get { return "ClassDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterClassDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitClassDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ClassDefinitionContext ClassDefinition() {
		ClassDefinitionContext _localctx = new ClassDefinitionContext(Context, State);
		EnterRule(_localctx, 398, RULE_classDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428; Match(CLASS);
			State = 2429; Identifier();
			State = 2431;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2430; TypeParameterList();
				}
			}

			State = 2434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2433; ClassBase();
				}
			}

			State = 2437;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2436; TypeParameterConstraintsClauses();
				}
			}

			State = 2439; ClassBody();
			State = 2441;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2440; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		public ITerminalNode STRUCT() { return GetToken(CSharpParser.STRUCT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StructBodyContext structBody() {
			return GetRuleContext<StructBodyContext>(0);
		}
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public StructInterfacesContext structInterfaces() {
			return GetRuleContext<StructInterfacesContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ITerminalNode READONLY() { return GetToken(CSharpParser.READONLY, 0); }
		public ITerminalNode REF() { return GetToken(CSharpParser.REF, 0); }
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		public string RuleName { get { return "StructDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterStructDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitStructDefinition(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext StructDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 400, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2444;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==READONLY || _la==REF) {
				{
				State = 2443;
				_la = TokenStream.LA(1);
				if ( !(_la==READONLY || _la==REF) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2446; Match(STRUCT);
			State = 2447; Identifier();
			State = 2449;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2448; TypeParameterList();
				}
			}

			State = 2452;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2451; StructInterfaces();
				}
			}

			State = 2455;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2454; TypeParameterConstraintsClauses();
				}
			}

			State = 2457; StructBody();
			State = 2459;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2458; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDefinitionContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(CSharpParser.INTERFACE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public VariantTypeParameterListContext variantTypeParameterList() {
			return GetRuleContext<VariantTypeParameterListContext>(0);
		}
		public InterfaceBaseContext interfaceBase() {
			return GetRuleContext<InterfaceBaseContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public InterfaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDefinition; } }
		public string RuleName { get { return "InterfaceDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDefinitionContext InterfaceDefinition() {
		InterfaceDefinitionContext _localctx = new InterfaceDefinitionContext(Context, State);
		EnterRule(_localctx, 402, RULE_interfaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2461; Match(INTERFACE);
			State = 2462; Identifier();
			State = 2464;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2463; VariantTypeParameterList();
				}
			}

			State = 2467;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2466; InterfaceBase();
				}
			}

			State = 2470;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2469; TypeParameterConstraintsClauses();
				}
			}

			State = 2472; ClassBody();
			State = 2474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2473; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDefinitionContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(CSharpParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public EnumBodyContext enumBody() {
			return GetRuleContext<EnumBodyContext>(0);
		}
		public EnumBaseContext enumBase() {
			return GetRuleContext<EnumBaseContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public EnumDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDefinition; } }
		public string RuleName { get { return "EnumDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEnumDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEnumDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumDefinitionContext EnumDefinition() {
		EnumDefinitionContext _localctx = new EnumDefinitionContext(Context, State);
		EnterRule(_localctx, 404, RULE_enumDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2476; Match(ENUM);
			State = 2477; Identifier();
			State = 2479;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2478; EnumBase();
				}
			}

			State = 2481; EnumBody();
			State = 2483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON) {
				{
				State = 2482; Match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DelegateDefinitionContext : ParserRuleContext {
		public ITerminalNode DELEGATE() { return GetToken(CSharpParser.DELEGATE, 0); }
		public ReturnTypeContext returnType() {
			return GetRuleContext<ReturnTypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public VariantTypeParameterListContext variantTypeParameterList() {
			return GetRuleContext<VariantTypeParameterListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public DelegateDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delegateDefinition; } }
		public string RuleName { get { return "DelegateDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDelegateDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDelegateDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DelegateDefinitionContext DelegateDefinition() {
		DelegateDefinitionContext _localctx = new DelegateDefinitionContext(Context, State);
		EnterRule(_localctx, 406, RULE_delegateDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2485; Match(DELEGATE);
			State = 2486; ReturnType();
			State = 2487; Identifier();
			State = 2489;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2488; VariantTypeParameterList();
				}
			}

			State = 2491; Match(OPEN_PARENS);
			State = 2493;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
				{
				State = 2492; FormalParameterList();
				}
			}

			State = 2495; Match(CLOSE_PARENS);
			State = 2497;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2496; TypeParameterConstraintsClauses();
				}
			}

			State = 2499; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventDeclarationContext : ParserRuleContext {
		public ITerminalNode EVENT() { return GetToken(CSharpParser.EVENT, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public EventAccessorDeclarationsContext eventAccessorDeclarations() {
			return GetRuleContext<EventAccessorDeclarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public EventDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventDeclaration; } }
		public string RuleName { get { return "EventDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterEventDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitEventDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EventDeclarationContext EventDeclaration() {
		EventDeclarationContext _localctx = new EventDeclarationContext(Context, State);
		EnterRule(_localctx, 408, RULE_eventDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2501; Match(EVENT);
			State = 2502; Type();
			State = 2511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,325,Context) ) {
			case 1:
				{
				State = 2503; VariableDeclarators();
				State = 2504; Match(SEMICOLON);
				}
				break;
			case 2:
				{
				State = 2506; MemberName();
				State = 2507; Match(OPEN_BRACE);
				State = 2508; EventAccessorDeclarations();
				State = 2509; Match(CLOSE_BRACE);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public string RuleName { get { return "FieldDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext FieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 410, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2513; VariableDeclarators();
			State = 2514; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PropertyDeclarationContext : ParserRuleContext {
		public MemberNameContext memberName() {
			return GetRuleContext<MemberNameContext>(0);
		}
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public AccessorDeclarationsContext accessorDeclarations() {
			return GetRuleContext<AccessorDeclarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public PropertyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_propertyDeclaration; } }
		public string RuleName { get { return "PropertyDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterPropertyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitPropertyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public PropertyDeclarationContext PropertyDeclaration() {
		PropertyDeclarationContext _localctx = new PropertyDeclarationContext(Context, State);
		EnterRule(_localctx, 412, RULE_propertyDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2516; MemberName();
			State = 2530;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2517; Match(OPEN_BRACE);
				State = 2518; AccessorDeclarations();
				State = 2519; Match(CLOSE_BRACE);
				State = 2524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASSIGNMENT) {
					{
					State = 2520; Match(ASSIGNMENT);
					State = 2521; VariableInitializer();
					State = 2522; Match(SEMICOLON);
					}
				}

				}
				break;
			case ASSIGNMENT:
				{
				State = 2526; RightArrow();
				State = 2527; ThrowableExpression();
				State = 2528; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclarationContext : ParserRuleContext {
		public ITerminalNode CONST() { return GetToken(CSharpParser.CONST, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ConstantDeclaratorsContext constantDeclarators() {
			return GetRuleContext<ConstantDeclaratorsContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ConstantDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclaration; } }
		public string RuleName { get { return "ConstantDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclarationContext ConstantDeclaration() {
		ConstantDeclarationContext _localctx = new ConstantDeclarationContext(Context, State);
		EnterRule(_localctx, 414, RULE_constantDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2532; Match(CONST);
			State = 2533; Type();
			State = 2534; ConstantDeclarators();
			State = 2535; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexerDeclarationContext : ParserRuleContext {
		public ITerminalNode THIS() { return GetToken(CSharpParser.THIS, 0); }
		public ITerminalNode OPEN_BRACKET() { return GetToken(CSharpParser.OPEN_BRACKET, 0); }
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ITerminalNode CLOSE_BRACKET() { return GetToken(CSharpParser.CLOSE_BRACKET, 0); }
		public ITerminalNode OPEN_BRACE() { return GetToken(CSharpParser.OPEN_BRACE, 0); }
		public AccessorDeclarationsContext accessorDeclarations() {
			return GetRuleContext<AccessorDeclarationsContext>(0);
		}
		public ITerminalNode CLOSE_BRACE() { return GetToken(CSharpParser.CLOSE_BRACE, 0); }
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public IndexerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexerDeclaration; } }
		public string RuleName { get { return "IndexerDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIndexerDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIndexerDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public IndexerDeclarationContext IndexerDeclaration() {
		IndexerDeclarationContext _localctx = new IndexerDeclarationContext(Context, State);
		EnterRule(_localctx, 416, RULE_indexerDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2537; Match(THIS);
			State = 2538; Match(OPEN_BRACKET);
			State = 2539; FormalParameterList();
			State = 2540; Match(CLOSE_BRACKET);
			State = 2549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
				{
				State = 2541; Match(OPEN_BRACE);
				State = 2542; AccessorDeclarations();
				State = 2543; Match(CLOSE_BRACE);
				}
				break;
			case ASSIGNMENT:
				{
				State = 2545; RightArrow();
				State = 2546; ThrowableExpression();
				State = 2547; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorDefinitionContext : ParserRuleContext {
		public ITerminalNode TILDE() { return GetToken(CSharpParser.TILDE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public DestructorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructorDefinition; } }
		public string RuleName { get { return "DestructorDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterDestructorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitDestructorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DestructorDefinitionContext DestructorDefinition() {
		DestructorDefinitionContext _localctx = new DestructorDefinitionContext(Context, State);
		EnterRule(_localctx, 418, RULE_destructorDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2551; Match(TILDE);
			State = 2552; Identifier();
			State = 2553; Match(OPEN_PARENS);
			State = 2554; Match(CLOSE_PARENS);
			State = 2555; Body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public ConstructorInitializerContext constructorInitializer() {
			return GetRuleContext<ConstructorInitializerContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public string RuleName { get { return "ConstructorDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext ConstructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 420, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2557; Identifier();
			State = 2558; Match(OPEN_PARENS);
			State = 2560;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
				{
				State = 2559; FormalParameterList();
				}
			}

			State = 2562; Match(CLOSE_PARENS);
			State = 2564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 2563; ConstructorInitializer();
				}
			}

			State = 2566; Body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public MethodMemberNameContext methodMemberName() {
			return GetRuleContext<MethodMemberNameContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public TypeParameterListContext typeParameterList() {
			return GetRuleContext<TypeParameterListContext>(0);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public TypeParameterConstraintsClausesContext typeParameterConstraintsClauses() {
			return GetRuleContext<TypeParameterConstraintsClausesContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public string RuleName { get { return "MethodDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext MethodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 422, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2568; MethodMemberName();
			State = 2570;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 2569; TypeParameterList();
				}
			}

			State = 2572; Match(OPEN_PARENS);
			State = 2574;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << DECIMAL) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (OBJECT - 67)) | (1L << (ON - 67)) | (1L << (ORDERBY - 67)) | (1L << (OUT - 67)) | (1L << (PARAMS - 67)) | (1L << (PARTIAL - 67)) | (1L << (REF - 67)) | (1L << (REMOVE - 67)) | (1L << (SBYTE - 67)) | (1L << (SELECT - 67)) | (1L << (SET - 67)) | (1L << (SHORT - 67)) | (1L << (STRING - 67)) | (1L << (THIS - 67)) | (1L << (UINT - 67)) | (1L << (ULONG - 67)) | (1L << (UNMANAGED - 67)) | (1L << (USHORT - 67)) | (1L << (VAR - 67)) | (1L << (VOID - 67)) | (1L << (WHEN - 67)) | (1L << (WHERE - 67)) | (1L << (YIELD - 67)) | (1L << (IDENTIFIER - 67)) | (1L << (OPEN_BRACKET - 67)) | (1L << (OPEN_PARENS - 67)))) != 0)) {
				{
				State = 2573; FormalParameterList();
				}
			}

			State = 2576; Match(CLOSE_PARENS);
			State = 2578;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE) {
				{
				State = 2577; TypeParameterConstraintsClauses();
				}
			}

			State = 2585;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2580; MethodBody();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2581; RightArrow();
				State = 2582; ThrowableExpression();
				State = 2583; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodMemberNameContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode DOUBLE_COLON() { return GetToken(CSharpParser.DOUBLE_COLON, 0); }
		public ITerminalNode[] DOT() { return GetTokens(CSharpParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(CSharpParser.DOT, i);
		}
		public TypeArgumentListContext[] typeArgumentList() {
			return GetRuleContexts<TypeArgumentListContext>();
		}
		public TypeArgumentListContext typeArgumentList(int i) {
			return GetRuleContext<TypeArgumentListContext>(i);
		}
		public MethodMemberNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodMemberName; } }
		public string RuleName { get { return "MethodMemberName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodMemberName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodMemberName(this);
		}
	}

	[RuleVersion(0)]
	public MethodMemberNameContext MethodMemberName() {
		MethodMemberNameContext _localctx = new MethodMemberNameContext(Context, State);
		EnterRule(_localctx, 424, RULE_methodMemberName);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				{
				State = 2587; Identifier();
				}
				break;
			case 2:
				{
				State = 2588; Identifier();
				State = 2589; Match(DOUBLE_COLON);
				State = 2590; Identifier();
				}
				break;
			}
			State = 2601;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2595;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 2594; TypeArgumentList();
						}
					}

					State = 2597; Match(DOT);
					State = 2598; Identifier();
					}
					} 
				}
				State = 2603;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorDeclarationContext : ParserRuleContext {
		public ITerminalNode OPERATOR() { return GetToken(CSharpParser.OPERATOR, 0); }
		public OverloadableOperatorContext overloadableOperator() {
			return GetRuleContext<OverloadableOperatorContext>(0);
		}
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ArgDeclarationContext[] argDeclaration() {
			return GetRuleContexts<ArgDeclarationContext>();
		}
		public ArgDeclarationContext argDeclaration(int i) {
			return GetRuleContext<ArgDeclarationContext>(i);
		}
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public BodyContext body() {
			return GetRuleContext<BodyContext>(0);
		}
		public RightArrowContext rightArrow() {
			return GetRuleContext<RightArrowContext>(0);
		}
		public ThrowableExpressionContext throwableExpression() {
			return GetRuleContext<ThrowableExpressionContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(CSharpParser.SEMICOLON, 0); }
		public ITerminalNode[] IN() { return GetTokens(CSharpParser.IN); }
		public ITerminalNode IN(int i) {
			return GetToken(CSharpParser.IN, i);
		}
		public ITerminalNode COMMA() { return GetToken(CSharpParser.COMMA, 0); }
		public OperatorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorDeclaration; } }
		public string RuleName { get { return "OperatorDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterOperatorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitOperatorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public OperatorDeclarationContext OperatorDeclaration() {
		OperatorDeclarationContext _localctx = new OperatorDeclarationContext(Context, State);
		EnterRule(_localctx, 426, RULE_operatorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2604; Match(OPERATOR);
			State = 2605; OverloadableOperator();
			State = 2606; Match(OPEN_PARENS);
			State = 2608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN) {
				{
				State = 2607; Match(IN);
				}
			}

			State = 2610; ArgDeclaration();
			State = 2616;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 2611; Match(COMMA);
				State = 2613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN) {
					{
					State = 2612; Match(IN);
					}
				}

				State = 2615; ArgDeclaration();
				}
			}

			State = 2618; Match(CLOSE_PARENS);
			State = 2624;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OPEN_BRACE:
			case SEMICOLON:
				{
				State = 2619; Body();
				}
				break;
			case ASSIGNMENT:
				{
				State = 2620; RightArrow();
				State = 2621; ThrowableExpression();
				State = 2622; Match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode ASSIGNMENT() { return GetToken(CSharpParser.ASSIGNMENT, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ArgDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argDeclaration; } }
		public string RuleName { get { return "ArgDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterArgDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitArgDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ArgDeclarationContext ArgDeclaration() {
		ArgDeclarationContext _localctx = new ArgDeclarationContext(Context, State);
		EnterRule(_localctx, 428, RULE_argDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2626; Type();
			State = 2627; Identifier();
			State = 2630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGNMENT) {
				{
				State = 2628; Match(ASSIGNMENT);
				State = 2629; Expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodInvocationContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public MethodInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodInvocation; } }
		public string RuleName { get { return "MethodInvocation"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterMethodInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitMethodInvocation(this);
		}
	}

	[RuleVersion(0)]
	public MethodInvocationContext MethodInvocation() {
		MethodInvocationContext _localctx = new MethodInvocationContext(Context, State);
		EnterRule(_localctx, 430, RULE_methodInvocation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2632; Match(OPEN_PARENS);
			State = 2634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
				{
				State = 2633; ArgumentList();
				}
			}

			State = 2636; Match(CLOSE_PARENS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ObjectCreationExpressionContext : ParserRuleContext {
		public ITerminalNode OPEN_PARENS() { return GetToken(CSharpParser.OPEN_PARENS, 0); }
		public ITerminalNode CLOSE_PARENS() { return GetToken(CSharpParser.CLOSE_PARENS, 0); }
		public ArgumentListContext argumentList() {
			return GetRuleContext<ArgumentListContext>(0);
		}
		public ObjectOrCollectionInitializerContext objectOrCollectionInitializer() {
			return GetRuleContext<ObjectOrCollectionInitializerContext>(0);
		}
		public ObjectCreationExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_objectCreationExpression; } }
		public string RuleName { get { return "ObjectCreationExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterObjectCreationExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitObjectCreationExpression(this);
		}
	}

	[RuleVersion(0)]
	public ObjectCreationExpressionContext ObjectCreationExpression() {
		ObjectCreationExpressionContext _localctx = new ObjectCreationExpressionContext(Context, State);
		EnterRule(_localctx, 432, RULE_objectCreationExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2638; Match(OPEN_PARENS);
			State = 2640;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BASE) | (1L << BOOL) | (1L << BY) | (1L << BYTE) | (1L << CHAR) | (1L << CHECKED) | (1L << DECIMAL) | (1L << DEFAULT) | (1L << DELEGATE) | (1L << DESCENDING) | (1L << DOUBLE) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FALSE) | (1L << FLOAT) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << IN) | (1L << INT) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << LONG) | (1L << NAMEOF))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (NEW - 65)) | (1L << (NULL - 65)) | (1L << (OBJECT - 65)) | (1L << (ON - 65)) | (1L << (ORDERBY - 65)) | (1L << (OUT - 65)) | (1L << (PARTIAL - 65)) | (1L << (REF - 65)) | (1L << (REMOVE - 65)) | (1L << (SBYTE - 65)) | (1L << (SELECT - 65)) | (1L << (SET - 65)) | (1L << (SHORT - 65)) | (1L << (SIZEOF - 65)) | (1L << (STRING - 65)) | (1L << (THIS - 65)) | (1L << (TRUE - 65)) | (1L << (TYPEOF - 65)) | (1L << (UINT - 65)) | (1L << (ULONG - 65)) | (1L << (UNCHECKED - 65)) | (1L << (UNMANAGED - 65)) | (1L << (USHORT - 65)) | (1L << (VAR - 65)) | (1L << (VOID - 65)) | (1L << (WHEN - 65)) | (1L << (WHERE - 65)) | (1L << (YIELD - 65)) | (1L << (IDENTIFIER - 65)) | (1L << (LITERAL_ACCESS - 65)) | (1L << (INTEGER_LITERAL - 65)) | (1L << (HEX_INTEGER_LITERAL - 65)) | (1L << (BIN_INTEGER_LITERAL - 65)) | (1L << (REAL_LITERAL - 65)) | (1L << (CHARACTER_LITERAL - 65)) | (1L << (REGULAR_STRING - 65)) | (1L << (VERBATIUM_STRING - 65)) | (1L << (INTERPOLATED_REGULAR_STRING_START - 65)) | (1L << (INTERPOLATED_VERBATIUM_STRING_START - 65)) | (1L << (OPEN_PARENS - 65)))) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & ((1L << (PLUS - 134)) | (1L << (MINUS - 134)) | (1L << (STAR - 134)) | (1L << (AMP - 134)) | (1L << (CARET - 134)) | (1L << (BANG - 134)) | (1L << (TILDE - 134)) | (1L << (OP_INC - 134)) | (1L << (OP_DEC - 134)) | (1L << (OP_RANGE - 134)))) != 0)) {
				{
				State = 2639; ArgumentList();
				}
			}

			State = 2642; Match(CLOSE_PARENS);
			State = 2644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_BRACE) {
				{
				State = 2643; ObjectOrCollectionInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(CSharpParser.IDENTIFIER, 0); }
		public ITerminalNode ADD() { return GetToken(CSharpParser.ADD, 0); }
		public ITerminalNode ALIAS() { return GetToken(CSharpParser.ALIAS, 0); }
		public ITerminalNode ARGLIST() { return GetToken(CSharpParser.ARGLIST, 0); }
		public ITerminalNode ASCENDING() { return GetToken(CSharpParser.ASCENDING, 0); }
		public ITerminalNode ASYNC() { return GetToken(CSharpParser.ASYNC, 0); }
		public ITerminalNode AWAIT() { return GetToken(CSharpParser.AWAIT, 0); }
		public ITerminalNode BY() { return GetToken(CSharpParser.BY, 0); }
		public ITerminalNode DESCENDING() { return GetToken(CSharpParser.DESCENDING, 0); }
		public ITerminalNode DYNAMIC() { return GetToken(CSharpParser.DYNAMIC, 0); }
		public ITerminalNode EQUALS() { return GetToken(CSharpParser.EQUALS, 0); }
		public ITerminalNode FROM() { return GetToken(CSharpParser.FROM, 0); }
		public ITerminalNode GET() { return GetToken(CSharpParser.GET, 0); }
		public ITerminalNode GROUP() { return GetToken(CSharpParser.GROUP, 0); }
		public ITerminalNode INTO() { return GetToken(CSharpParser.INTO, 0); }
		public ITerminalNode JOIN() { return GetToken(CSharpParser.JOIN, 0); }
		public ITerminalNode LET() { return GetToken(CSharpParser.LET, 0); }
		public ITerminalNode NAMEOF() { return GetToken(CSharpParser.NAMEOF, 0); }
		public ITerminalNode ON() { return GetToken(CSharpParser.ON, 0); }
		public ITerminalNode ORDERBY() { return GetToken(CSharpParser.ORDERBY, 0); }
		public ITerminalNode PARTIAL() { return GetToken(CSharpParser.PARTIAL, 0); }
		public ITerminalNode REMOVE() { return GetToken(CSharpParser.REMOVE, 0); }
		public ITerminalNode SELECT() { return GetToken(CSharpParser.SELECT, 0); }
		public ITerminalNode SET() { return GetToken(CSharpParser.SET, 0); }
		public ITerminalNode UNMANAGED() { return GetToken(CSharpParser.UNMANAGED, 0); }
		public ITerminalNode VAR() { return GetToken(CSharpParser.VAR, 0); }
		public ITerminalNode WHEN() { return GetToken(CSharpParser.WHEN, 0); }
		public ITerminalNode WHERE() { return GetToken(CSharpParser.WHERE, 0); }
		public ITerminalNode YIELD() { return GetToken(CSharpParser.YIELD, 0); }
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public string RuleName { get { return "Identifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICSharpParserListener typedListener = listener as ICSharpParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext Identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 434, RULE_identifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ADD) | (1L << ALIAS) | (1L << ARGLIST) | (1L << ASCENDING) | (1L << ASYNC) | (1L << AWAIT) | (1L << BY) | (1L << DESCENDING) | (1L << DYNAMIC) | (1L << EQUALS) | (1L << FROM) | (1L << GET) | (1L << GROUP) | (1L << INTO) | (1L << JOIN) | (1L << LET) | (1L << NAMEOF))) != 0) || ((((_la - 68)) & ~0x3f) == 0 && ((1L << (_la - 68)) & ((1L << (ON - 68)) | (1L << (ORDERBY - 68)) | (1L << (PARTIAL - 68)) | (1L << (REMOVE - 68)) | (1L << (SELECT - 68)) | (1L << (SET - 68)) | (1L << (UNMANAGED - 68)) | (1L << (VAR - 68)) | (1L << (WHEN - 68)) | (1L << (WHERE - 68)) | (1L << (YIELD - 68)) | (1L << (IDENTIFIER - 68)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 187: return rightArrow_sempred((RightArrowContext)_localctx, predIndex);
		case 188: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		case 189: return rightShiftAssignment_sempred((RightShiftAssignmentContext)_localctx, predIndex);
		}
		return true;
	}
	private bool rightArrow_sempred(RightArrowContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShiftAssignment_sempred(RightShiftAssignmentContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\xC7', '\xA5B', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x4', '\xCD', '\t', '\xCD', 
		'\x4', '\xCE', '\t', '\xCE', '\x4', '\xCF', '\t', '\xCF', '\x4', '\xD0', 
		'\t', '\xD0', '\x4', '\xD1', '\t', '\xD1', '\x4', '\xD2', '\t', '\xD2', 
		'\x4', '\xD3', '\t', '\xD3', '\x4', '\xD4', '\t', '\xD4', '\x4', '\xD5', 
		'\t', '\xD5', '\x4', '\xD6', '\t', '\xD6', '\x4', '\xD7', '\t', '\xD7', 
		'\x4', '\xD8', '\t', '\xD8', '\x4', '\xD9', '\t', '\xD9', '\x4', '\xDA', 
		'\t', '\xDA', '\x4', '\xDB', '\t', '\xDB', '\x3', '\x2', '\x5', '\x2', 
		'\x1B8', '\n', '\x2', '\x3', '\x2', '\x5', '\x2', '\x1BB', '\n', '\x2', 
		'\x3', '\x2', '\x5', '\x2', '\x1BE', '\n', '\x2', '\x3', '\x2', '\a', 
		'\x2', '\x1C1', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x1C4', '\v', 
		'\x2', '\x3', '\x2', '\x5', '\x2', '\x1C7', '\n', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1CD', '\n', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1D0', '\n', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x5', '\x3', '\x1D5', '\n', '\x3', '\a', 
		'\x3', '\x1D7', '\n', '\x3', '\f', '\x3', '\xE', '\x3', '\x1DA', '\v', 
		'\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x1E0', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x1E3', '\v', '\x4', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x5', '\x5', '\x1EA', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x6', '\x6', '\x1F0', '\n', '\x6', '\r', '\x6', 
		'\xE', '\x6', '\x1F1', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x1F8', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x5', 
		'\b', '\x1FC', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x201', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', 
		'\x20B', '\n', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', 
		'\a', '\r', '\x211', '\n', '\r', '\f', '\r', '\xE', '\r', '\x214', '\v', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\a', '\xE', '\x21B', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x21E', 
		'\v', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x223', 
		'\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x226', '\n', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x22A', '\n', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x232', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x237', '\n', '\x11', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x6', '\x12', '\x240', '\n', '\x12', '\r', '\x12', '\xE', '\x12', '\x241', 
		'\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\x246', '\n', '\x12', '\x5', 
		'\x12', '\x248', '\n', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x5', '\x13', '\x255', '\n', 
		'\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x25D', '\n', '\x14', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x263', '\n', 
		'\x15', '\x5', '\x15', '\x265', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x16', '\a', '\x16', '\x26A', '\n', '\x16', '\f', '\x16', '\xE', 
		'\x16', '\x26D', '\v', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\a', '\x17', '\x272', '\n', '\x17', '\f', '\x17', '\xE', '\x17', '\x275', 
		'\v', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', 
		'\x27A', '\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x27D', '\v', '\x18', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\a', '\x19', '\x282', '\n', 
		'\x19', '\f', '\x19', '\xE', '\x19', '\x285', '\v', '\x19', '\x3', '\x1A', 
		'\x3', '\x1A', '\x3', '\x1A', '\a', '\x1A', '\x28A', '\n', '\x1A', '\f', 
		'\x1A', '\xE', '\x1A', '\x28D', '\v', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\a', '\x1B', '\x292', '\n', '\x1B', '\f', '\x1B', '\xE', 
		'\x1B', '\x295', '\v', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\a', '\x1C', 
		'\x29E', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x2A1', '\v', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x2A6', '\n', 
		'\x1D', '\x3', '\x1D', '\a', '\x1D', '\x2A9', '\n', '\x1D', '\f', '\x1D', 
		'\xE', '\x1D', '\x2AC', '\v', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\a', '\x1E', '\x2B1', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', 
		'\x2B4', '\v', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', 
		'\x1F', '\x2B9', '\n', '\x1F', '\f', '\x1F', '\xE', '\x1F', '\x2BC', '\v', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x2C3', '\n', ' ', '\x5', ' ', '\x2C5', '\n', ' ', '\x3', ' ', '\x5', 
		' ', '\x2C8', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', 
		'\x2CD', '\n', '!', '\f', '!', '\xE', '!', '\x2D0', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x5', '\"', '\x2D4', '\n', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x5', '#', '\x2DB', '\n', 
		'#', '\x3', '#', '\x3', '#', '\x5', '#', '\x2DF', '\n', '#', '\x5', '#', 
		'\x2E1', '\n', '#', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x5', '$', '\x2FD', '\n', '$', 
		'\x3', '%', '\x3', '%', '\x5', '%', '\x301', '\n', '%', '\x3', '%', '\a', 
		'%', '\x304', '\n', '%', '\f', '%', '\xE', '%', '\x307', '\v', '%', '\x3', 
		'%', '\x5', '%', '\x30A', '\n', '%', '\x3', '%', '\x3', '%', '\x3', '%', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x312', '\n', '%', '\x3', 
		'%', '\x5', '%', '\x315', '\n', '%', '\x3', '%', '\a', '%', '\x318', '\n', 
		'%', '\f', '%', '\xE', '%', '\x31B', '\v', '%', '\x3', '%', '\x5', '%', 
		'\x31E', '\n', '%', '\a', '%', '\x320', '\n', '%', '\f', '%', '\xE', '%', 
		'\x323', '\v', '%', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x328', 
		'\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x336', '\n', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '&', '\x5', '&', '\x33C', '\n', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\a', '&', '\x346', '\n', '&', '\f', '&', '\xE', '&', '\x349', '\v', '&', 
		'\x3', '&', '\x5', '&', '\x34C', '\n', '&', '\x3', '&', '\x6', '&', '\x34F', 
		'\n', '&', '\r', '&', '\xE', '&', '\x350', '\x3', '&', '\x3', '&', '\x5', 
		'&', '\x355', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x35B', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x6', '&', '\x361', '\n', '&', '\r', '&', '\xE', '&', '\x362', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x5', '&', '\x36C', '\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x5', '&', '\x37E', '\n', '&', '\x3', '&', '\x5', '&', '\x381', 
		'\n', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x5', '&', '\x386', '\n', 
		'&', '\x3', '&', '\x5', '&', '\x389', '\n', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\a', '&', '\x396', '\n', '&', '\f', 
		'&', '\xE', '&', '\x399', '\v', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x5', '&', '\x39E', '\n', '&', '\x3', '\'', '\x3', '\'', '\x5', '\'', 
		'\x3A2', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x5', 
		')', '\x3A8', '\n', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', 
		'\x3AD', '\n', ')', '\x3', '*', '\x5', '*', '\x3B0', '\n', '*', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', '*', '\x3B6', '\n', '*', 
		'\f', '*', '\xE', '*', '\x3B9', '\v', '*', '\x3', '*', '\x3', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x5', '+', '\x3C0', '\n', '+', '\x3', '+', 
		'\x3', '+', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', '-', '\x3', '-', 
		'\a', '-', '\x3C9', '\n', '-', '\f', '-', '\xE', '-', '\x3CC', '\v', '-', 
		'\x3', '.', '\x3', '.', '\x5', '.', '\x3D0', '\n', '.', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x5', '/', '\x3D5', '\n', '/', '\x5', '/', '\x3D7', 
		'\n', '/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', 
		'\x30', '\a', '\x30', '\x3DE', '\n', '\x30', '\f', '\x30', '\xE', '\x30', 
		'\x3E1', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', 
		'\x31', '\x3', '\x31', '\x5', '\x31', '\x3E8', '\n', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x3EF', '\n', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\a', '\x33', '\x3F5', '\n', '\x33', '\f', '\x33', '\xE', '\x33', 
		'\x3F8', '\v', '\x33', '\x3', '\x33', '\x5', '\x33', '\x3FB', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x404', '\n', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x409', '\n', '\x35', 
		'\x5', '\x35', '\x40B', '\n', '\x35', '\x3', '\x35', '\x3', '\x35', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x412', '\n', '\x36', 
		'\f', '\x36', '\xE', '\x36', '\x415', '\v', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x41C', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x420', '\n', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x425', 
		'\n', '\x38', '\x5', '\x38', '\x427', '\n', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x42C', '\n', '\x38', '\a', '\x38', 
		'\x42E', '\n', '\x38', '\f', '\x38', '\xE', '\x38', '\x431', '\v', '\x38', 
		'\x3', '\x39', '\x3', '\x39', '\a', '\x39', '\x435', '\n', '\x39', '\f', 
		'\x39', '\xE', '\x39', '\x438', '\v', '\x39', '\x3', '\x39', '\x3', '\x39', 
		'\x3', ':', '\x3', ':', '\x3', ':', '\a', ':', '\x43F', '\n', ':', '\f', 
		':', '\xE', ':', '\x442', '\v', ':', '\x3', ':', '\x5', ':', '\x445', 
		'\n', ':', '\x3', ':', '\x5', ':', '\x448', '\n', ':', '\x3', ':', '\x5', 
		':', '\x44B', '\n', ':', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', ';', 
		'\a', ';', '\x451', '\n', ';', '\f', ';', '\xE', ';', '\x454', '\v', ';', 
		'\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', 
		'\x3', '=', '\x5', '=', '\x45D', '\n', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', '>', '\x3', 
		'>', '\x5', '>', '\x46E', '\n', '>', '\x3', '?', '\x3', '?', '\x3', '?', 
		'\a', '?', '\x473', '\n', '?', '\f', '?', '\xE', '?', '\x476', '\v', '?', 
		'\x3', '@', '\x5', '@', '\x479', '\n', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\a', '\x41', '\x481', 
		'\n', '\x41', '\f', '\x41', '\xE', '\x41', '\x484', '\v', '\x41', '\x3', 
		'\x42', '\x3', '\x42', '\x5', '\x42', '\x488', '\n', '\x42', '\x3', '\x43', 
		'\x3', '\x43', '\x3', '\x43', '\x3', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x48F', '\n', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x3', '\x45', '\a', '\x45', '\x496', '\n', '\x45', '\f', '\x45', 
		'\xE', '\x45', '\x499', '\v', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', 
		'\x45', '\x49D', '\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x5', '\x46', '\x4A4', '\n', '\x46', '\x3', 
		'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'G', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x4B0', '\n', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x4BB', '\n', 'I', '\x3', 
		'J', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\a', 'J', '\x4C1', '\n', 'J', 
		'\f', 'J', '\xE', 'J', '\x4C4', '\v', 'J', '\x3', 'K', '\x3', 'K', '\x5', 
		'K', '\x4C8', '\n', 'K', '\x3', 'L', '\x3', 'L', '\x3', 'L', '\x3', 'L', 
		'\x3', 'L', '\x3', 'L', '\x3', 'L', '\x5', 'L', '\x4D1', '\n', 'L', '\x3', 
		'M', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x3', 'N', '\x3', 'N', '\x3', 
		'N', '\x5', 'N', '\x4DA', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x3', 'O', 
		'\x3', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x4E3', '\n', 
		'O', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'Q', '\x5', 'Q', '\x4E9', 
		'\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x4EE', '\n', 
		'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x4F2', '\n', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x5', 'Q', '\x4F6', '\n', 'Q', '\x3', 'R', '\x3', 'R', '\x5', 
		'R', '\x4FA', '\n', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x4FE', 
		'\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x5', 'S', '\x505', '\n', 'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'U', '\x3', 'U', '\x5', 'U', '\x50D', '\n', 'U', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x51A', '\n', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\a', 'V', '\x522', '\n', 'V', '\f', 'V', '\xE', 'V', '\x525', '\v', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x5', 'V', '\x53A', '\n', 'V', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\x53E', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x542', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x547', '\n', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x5', 'V', '\x55B', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x5', 'V', '\x560', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 
		'V', '\x565', '\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x5', 'V', '\x56C', '\n', 'V', '\x3', 'V', '\x5', 'V', '\x56F', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x585', '\n', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x591', '\n', 'V', 
		'\x3', 'W', '\x3', 'W', '\x5', 'W', '\x595', '\n', 'W', '\x3', 'W', '\x3', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x59D', 
		'\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\a', 'X', 
		'\x5A3', '\n', 'X', '\f', 'X', '\xE', 'X', '\x5A6', '\v', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x5AC', '\n', 'X', 
		'\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x5B0', '\n', 'Y', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x5', 'Z', '\x5B5', '\n', 'Z', '\x3', 'Z', '\x5', 'Z', 
		'\x5B8', '\n', 'Z', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x5BD', 
		'\n', '[', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', '\\', '\x3', 
		']', '\x3', ']', '\x5', ']', '\x5C5', '\n', ']', '\x3', '^', '\x6', '^', 
		'\x5C8', '\n', '^', '\r', '^', '\xE', '^', '\x5C9', '\x3', '^', '\x3', 
		'^', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x5D1', '\n', '_', 
		'\x3', '_', '\x3', '_', '\x3', '_', '\x3', '_', '\x5', '_', '\x5D7', '\n', 
		'_', '\x3', '`', '\x3', '`', '\x3', '`', '\x3', '\x61', '\x6', '\x61', 
		'\x5DD', '\n', '\x61', '\r', '\x61', '\xE', '\x61', '\x5DE', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\a', '\x62', '\x5E5', '\n', 
		'\x62', '\f', '\x62', '\xE', '\x62', '\x5E8', '\v', '\x62', '\x5', '\x62', 
		'\x5EA', '\n', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\a', 
		'\x63', '\x5EF', '\n', '\x63', '\f', '\x63', '\xE', '\x63', '\x5F2', '\v', 
		'\x63', '\x3', '\x64', '\x3', '\x64', '\a', '\x64', '\x5F6', '\n', '\x64', 
		'\f', '\x64', '\xE', '\x64', '\x5F9', '\v', '\x64', '\x3', '\x64', '\x5', 
		'\x64', '\x5FC', '\n', '\x64', '\x3', '\x64', '\x5', '\x64', '\x5FF', 
		'\n', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x65', 
		'\x5', '\x65', '\x605', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x5', 
		'\x65', '\x609', '\n', '\x65', '\x3', '\x65', '\x3', '\x65', '\x3', '\x66', 
		'\x3', '\x66', '\x5', '\x66', '\x60F', '\n', '\x66', '\x3', '\x66', '\x3', 
		'\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 
		'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', '\x5', 'i', '\x61D', 
		'\n', 'i', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', 
		'\x623', '\n', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\a', 'k', '\x628', 
		'\n', 'k', '\f', 'k', '\xE', 'k', '\x62B', '\v', 'k', '\x3', 'l', '\x3', 
		'l', '\x5', 'l', '\x62F', '\n', 'l', '\x3', 'l', '\x5', 'l', '\x632', 
		'\n', 'l', '\x3', 'l', '\x5', 'l', '\x635', '\n', 'l', '\x3', 'l', '\x3', 
		'l', '\x3', 'm', '\x6', 'm', '\x63A', '\n', 'm', '\r', 'm', '\xE', 'm', 
		'\x63B', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 
		'o', '\x6', 'o', '\x644', '\n', 'o', '\r', 'o', '\xE', 'o', '\x645', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x657', '\n', 'p', '\x3', 'q', 
		'\x6', 'q', '\x65A', '\n', 'q', '\r', 'q', '\xE', 'q', '\x65B', '\x3', 
		'r', '\x3', 'r', '\x5', 'r', '\x660', '\n', 'r', '\x3', 's', '\x5', 's', 
		'\x663', '\n', 's', '\x3', 's', '\x5', 's', '\x666', '\n', 's', '\x3', 
		's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x5', 's', '\x66D', 
		'\n', 's', '\x3', 't', '\x3', 't', '\x3', 't', '\x3', 't', '\x5', 't', 
		'\x673', '\n', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\a', 
		'u', '\x679', '\n', 'u', '\f', 'u', '\xE', 'u', '\x67C', '\v', 'u', '\x3', 
		'u', '\x3', 'u', '\x3', 'v', '\x5', 'v', '\x681', '\n', 'v', '\x3', 'v', 
		'\x3', 'v', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\a', 'w', 
		'\x689', '\n', 'w', '\f', 'w', '\xE', 'w', '\x68C', '\v', 'w', '\x3', 
		'x', '\x3', 'x', '\x3', 'x', '\a', 'x', '\x691', '\n', 'x', '\f', 'x', 
		'\xE', 'x', '\x694', '\v', 'x', '\x3', 'y', '\x6', 'y', '\x697', '\n', 
		'y', '\r', 'y', '\xE', 'y', '\x698', '\x3', 'z', '\x3', 'z', '\x3', 'z', 
		'\x3', 'z', '\x3', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', '{', 
		'\x5', '{', '\x6A4', '\n', '{', '\x3', '{', '\x3', '{', '\x5', '{', '\x6A8', 
		'\n', '{', '\x5', '{', '\x6AA', '\n', '{', '\x3', '|', '\x3', '|', '\x3', 
		'|', '\x5', '|', '\x6AF', '\n', '|', '\x3', '|', '\x3', '|', '\x5', '|', 
		'\x6B3', '\n', '|', '\x3', '}', '\x3', '}', '\x3', '}', '\a', '}', '\x6B8', 
		'\n', '}', '\f', '}', '\xE', '}', '\x6BB', '\v', '}', '\x3', '~', '\x3', 
		'~', '\x3', '~', '\x3', '~', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', 
		'\x6C3', '\n', '\x7F', '\x3', '\x7F', '\x3', '\x7F', '\x3', '\x80', '\x6', 
		'\x80', '\x6C8', '\n', '\x80', '\r', '\x80', '\xE', '\x80', '\x6C9', '\x3', 
		'\x81', '\x5', '\x81', '\x6CD', '\n', '\x81', '\x3', '\x81', '\x5', '\x81', 
		'\x6D0', '\n', '\x81', '\x3', '\x81', '\x3', '\x81', '\x5', '\x81', '\x6D4', 
		'\n', '\x81', '\x3', '\x82', '\x6', '\x82', '\x6D7', '\n', '\x82', '\r', 
		'\x82', '\xE', '\x82', '\x6D8', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', 
		'\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x6E6', '\n', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x3', 
		'\x84', '\x3', '\x84', '\x3', '\x84', '\x3', '\x84', '\x5', '\x84', '\x6F0', 
		'\n', '\x84', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x5', '\x85', '\x6F7', '\n', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x3', 
		'\x85', '\x3', '\x85', '\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x703', 
		'\n', '\x85', '\x3', '\x86', '\x3', '\x86', '\x3', '\x86', '\a', '\x86', 
		'\x708', '\n', '\x86', '\f', '\x86', '\xE', '\x86', '\x70B', '\v', '\x86', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\a', '\x88', '\x714', '\n', '\x88', '\f', 
		'\x88', '\xE', '\x88', '\x717', '\v', '\x88', '\x3', '\x89', '\x3', '\x89', 
		'\x3', '\x89', '\x5', '\x89', '\x71C', '\n', '\x89', '\x3', '\x8A', '\x3', 
		'\x8A', '\x5', '\x8A', '\x720', '\n', '\x8A', '\x3', '\x8B', '\x3', '\x8B', 
		'\x5', '\x8B', '\x724', '\n', '\x8B', '\x3', '\x8C', '\x3', '\x8C', '\x3', 
		'\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x72A', '\n', '\x8D', '\x3', '\x8E', 
		'\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\x730', '\n', 
		'\x8E', '\x5', '\x8E', '\x732', '\n', '\x8E', '\x3', '\x8F', '\x3', '\x8F', 
		'\x3', '\x8F', '\a', '\x8F', '\x737', '\n', '\x8F', '\f', '\x8F', '\xE', 
		'\x8F', '\x73A', '\v', '\x8F', '\x3', '\x90', '\x5', '\x90', '\x73D', 
		'\n', '\x90', '\x3', '\x90', '\x5', '\x90', '\x740', '\n', '\x90', '\x3', 
		'\x90', '\x3', '\x90', '\x5', '\x90', '\x744', '\n', '\x90', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', '\x3', '\x91', 
		'\x3', '\x91', '\x3', '\x91', '\x5', '\x91', '\x74E', '\n', '\x91', '\x3', 
		'\x92', '\x5', '\x92', '\x751', '\n', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x3', '\x93', '\x5', '\x93', '\x758', '\n', 
		'\x93', '\x3', '\x93', '\x5', '\x93', '\x75B', '\n', '\x93', '\x3', '\x93', 
		'\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x760', '\n', '\x93', '\x3', 
		'\x93', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x765', '\n', '\x93', 
		'\x5', '\x93', '\x767', '\n', '\x93', '\x3', '\x94', '\x5', '\x94', '\x76A', 
		'\n', '\x94', '\x3', '\x94', '\x5', '\x94', '\x76D', '\n', '\x94', '\x3', 
		'\x94', '\x3', '\x94', '\x3', '\x94', '\x3', '\x95', '\x5', '\x95', '\x773', 
		'\n', '\x95', '\x3', '\x95', '\x5', '\x95', '\x776', '\n', '\x95', '\x3', 
		'\x95', '\x3', '\x95', '\x3', '\x95', '\x3', '\x96', '\x3', '\x96', '\x3', 
		'\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', 
		'\x96', '\x782', '\n', '\x96', '\x3', '\x97', '\x3', '\x97', '\x5', '\x97', 
		'\x786', '\n', '\x97', '\x3', '\x98', '\x5', '\x98', '\x789', '\n', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x98', '\x3', '\x98', '\x3', '\x98', '\x5', '\x98', '\x793', '\n', 
		'\x98', '\x3', '\x99', '\x5', '\x99', '\x796', '\n', '\x99', '\x3', '\x99', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', '\x5', '\x9A', '\x79C', '\n', 
		'\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', 
		'\x9B', '\x5', '\x9B', '\x7B7', '\n', '\x9B', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', 
		'\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', 
		'\x7C4', '\n', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x3', '\x9E', '\x3', 
		'\x9E', '\x5', '\x9E', '\x7CA', '\n', '\x9E', '\x3', '\x9F', '\x3', '\x9F', 
		'\x3', '\x9F', '\x3', '\xA0', '\x3', '\xA0', '\a', '\xA0', '\x7D1', '\n', 
		'\xA0', '\f', '\xA0', '\xE', '\xA0', '\x7D4', '\v', '\xA0', '\x3', '\xA0', 
		'\x3', '\xA0', '\x3', '\xA1', '\x5', '\xA1', '\x7D9', '\n', '\xA1', '\x3', 
		'\xA1', '\x5', '\xA1', '\x7DC', '\n', '\xA1', '\x3', '\xA1', '\x3', '\xA1', 
		'\x3', '\xA1', '\x3', '\xA1', '\x6', '\xA1', '\x7E2', '\n', '\xA1', '\r', 
		'\xA1', '\xE', '\xA1', '\x7E3', '\x3', '\xA1', '\x3', '\xA1', '\x5', '\xA1', 
		'\x7E8', '\n', '\xA1', '\x3', '\xA2', '\x3', '\xA2', '\a', '\xA2', '\x7EC', 
		'\n', '\xA2', '\f', '\xA2', '\xE', '\xA2', '\x7EF', '\v', '\xA2', '\x3', 
		'\xA2', '\x6', '\xA2', '\x7F2', '\n', '\xA2', '\r', '\xA2', '\xE', '\xA2', 
		'\x7F3', '\x3', '\xA3', '\x3', '\xA3', '\a', '\xA3', '\x7F8', '\n', '\xA3', 
		'\f', '\xA3', '\xE', '\xA3', '\x7FB', '\v', '\xA3', '\x3', '\xA3', '\x3', 
		'\xA3', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\a', 
		'\xA4', '\x803', '\n', '\xA4', '\f', '\xA4', '\xE', '\xA4', '\x806', '\v', 
		'\xA4', '\x3', '\xA4', '\x5', '\xA4', '\x809', '\n', '\xA4', '\x5', '\xA4', 
		'\x80B', '\n', '\xA4', '\x3', '\xA4', '\x3', '\xA4', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA5', '\x3', '\xA5', '\a', '\xA5', '\x813', '\n', '\xA5', 
		'\f', '\xA5', '\xE', '\xA5', '\x816', '\v', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA5', '\x3', '\xA6', '\x5', '\xA6', '\x81B', '\n', '\xA6', '\x3', '\xA6', 
		'\x5', '\xA6', '\x81E', '\n', '\xA6', '\x3', '\xA6', '\x3', '\xA6', '\x3', 
		'\xA7', '\x3', '\xA7', '\x3', '\xA8', '\x3', '\xA8', '\x3', '\xA8', '\x3', 
		'\xA9', '\x3', '\xA9', '\a', '\xA9', '\x829', '\n', '\xA9', '\f', '\xA9', 
		'\xE', '\xA9', '\x82C', '\v', '\xA9', '\x3', '\xA9', '\x3', '\xA9', '\x3', 
		'\xAA', '\x5', '\xAA', '\x831', '\n', '\xAA', '\x3', '\xAA', '\x5', '\xAA', 
		'\x834', '\n', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x837', '\n', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x5', '\xAA', '\x83E', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x5', '\xAA', '\x843', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x5', '\xAA', '\x847', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', 
		'\xAA', '\x84B', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x3', '\xAA', '\x5', '\xAA', '\x85C', '\n', '\xAA', '\x3', 
		'\xAA', '\x5', '\xAA', '\x85F', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x3', '\xAA', '\x5', '\xAA', '\x864', '\n', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x5', '\xAA', '\x868', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', 
		'\x5', '\xAA', '\x86C', '\n', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x3', '\xAA', '\x5', 
		'\xAA', '\x875', '\n', '\xAA', '\x3', '\xAB', '\x5', '\xAB', '\x878', 
		'\n', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', 
		'\x87D', '\n', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x881', 
		'\n', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', 
		'\x886', '\n', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x88A', 
		'\n', '\xAB', '\x5', '\xAB', '\x88C', '\n', '\xAB', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x3', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAD', '\a', '\xAD', '\x895', '\n', '\xAD', '\f', '\xAD', '\xE', '\xAD', 
		'\x898', '\v', '\xAD', '\x3', '\xAD', '\x5', '\xAD', '\x89B', '\n', '\xAD', 
		'\x5', '\xAD', '\x89D', '\n', '\xAD', '\x3', '\xAD', '\x3', '\xAD', '\x3', 
		'\xAE', '\x5', '\xAE', '\x8A2', '\n', '\xAE', '\x3', '\xAE', '\x3', '\xAE', 
		'\x3', '\xAE', '\x5', '\xAE', '\x8A7', '\n', '\xAE', '\x3', '\xAF', '\x3', 
		'\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x8AE', 
		'\n', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xB0', '\x3', '\xB0', 
		'\x5', '\xB0', '\x8B4', '\n', '\xB0', '\x3', '\xB1', '\x6', '\xB1', '\x8B7', 
		'\n', '\xB1', '\r', '\xB1', '\xE', '\xB1', '\x8B8', '\x3', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x8BF', '\n', '\xB2', 
		'\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', '\x8C3', '\n', '\xB2', '\x3', 
		'\xB2', '\x3', '\xB2', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8C9', 
		'\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\a', '\xB4', 
		'\x8CE', '\n', '\xB4', '\f', '\xB4', '\xE', '\xB4', '\x8D1', '\v', '\xB4', 
		'\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', 
		'\a', '\xB5', '\x8D8', '\n', '\xB5', '\f', '\xB5', '\xE', '\xB5', '\x8DB', 
		'\v', '\xB5', '\x5', '\xB5', '\x8DD', '\n', '\xB5', '\x3', '\xB5', '\x5', 
		'\xB5', '\x8E0', '\n', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', '\xB6', 
		'\x5', '\xB6', '\x8E5', '\n', '\xB6', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x8EB', '\n', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\a', '\xB7', '\x8EF', '\n', '\xB7', '\f', '\xB7', '\xE', 
		'\xB7', '\x8F2', '\v', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', 
		'\x3', '\xB7', '\x5', '\xB7', '\x8F8', '\n', '\xB7', '\x3', '\xB8', '\x3', 
		'\xB8', '\x3', '\xB8', '\a', '\xB8', '\x8FD', '\n', '\xB8', '\f', '\xB8', 
		'\xE', '\xB8', '\x900', '\v', '\xB8', '\x3', '\xB9', '\x3', '\xB9', '\x3', 
		'\xB9', '\x3', '\xB9', '\x3', '\xBA', '\x5', '\xBA', '\x907', '\n', '\xBA', 
		'\x3', '\xBA', '\x3', '\xBA', '\x5', '\xBA', '\x90B', '\n', '\xBA', '\x3', 
		'\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x91A', '\n', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x91E', '\n', '\xBC', '\x3', 
		'\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\a', 
		'\xBC', '\x925', '\n', '\xBC', '\f', '\xBC', '\xE', '\xBC', '\x928', '\v', 
		'\xBC', '\x3', '\xBC', '\x5', '\xBC', '\x92B', '\n', '\xBC', '\x3', '\xBC', 
		'\x3', '\xBC', '\x5', '\xBC', '\x92F', '\n', '\xBC', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x3', 
		'\xBE', '\x3', '\xBE', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', 
		'\xBF', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x945', 
		'\n', '\xC0', '\x3', '\xC1', '\x3', '\xC1', '\x3', '\xC2', '\x3', '\xC2', 
		'\x3', '\xC2', '\x3', '\xC2', '\x5', '\xC2', '\x94D', '\n', '\xC2', '\x3', 
		'\xC3', '\x3', '\xC3', '\a', '\xC3', '\x951', '\n', '\xC3', '\f', '\xC3', 
		'\xE', '\xC3', '\x954', '\v', '\xC3', '\x3', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC4', '\x3', '\xC4', '\a', '\xC4', '\x95A', '\n', '\xC4', '\f', '\xC4', 
		'\xE', '\xC4', '\x95D', '\v', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', '\xC5', '\x965', 
		'\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x5', '\xC6', '\x96B', '\n', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', 
		'\xC7', '\a', '\xC7', '\x970', '\n', '\xC7', '\f', '\xC7', '\xE', '\xC7', 
		'\x973', '\v', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x6', '\xC7', '\x977', 
		'\n', '\xC7', '\r', '\xC7', '\xE', '\xC7', '\x978', '\x5', '\xC7', '\x97B', 
		'\n', '\xC7', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC9', '\x3', '\xC9', 
		'\x3', '\xC9', '\x5', '\xC9', '\x982', '\n', '\xC9', '\x3', '\xC9', '\x5', 
		'\xC9', '\x985', '\n', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x988', 
		'\n', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x5', '\xC9', '\x98C', '\n', 
		'\xC9', '\x3', '\xCA', '\x5', '\xCA', '\x98F', '\n', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x994', '\n', '\xCA', '\x3', 
		'\xCA', '\x5', '\xCA', '\x997', '\n', '\xCA', '\x3', '\xCA', '\x5', '\xCA', 
		'\x99A', '\n', '\xCA', '\x3', '\xCA', '\x3', '\xCA', '\x5', '\xCA', '\x99E', 
		'\n', '\xCA', '\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCB', '\x5', '\xCB', 
		'\x9A3', '\n', '\xCB', '\x3', '\xCB', '\x5', '\xCB', '\x9A6', '\n', '\xCB', 
		'\x3', '\xCB', '\x5', '\xCB', '\x9A9', '\n', '\xCB', '\x3', '\xCB', '\x3', 
		'\xCB', '\x5', '\xCB', '\x9AD', '\n', '\xCB', '\x3', '\xCC', '\x3', '\xCC', 
		'\x3', '\xCC', '\x5', '\xCC', '\x9B2', '\n', '\xCC', '\x3', '\xCC', '\x3', 
		'\xCC', '\x5', '\xCC', '\x9B6', '\n', '\xCC', '\x3', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x3', '\xCD', '\x5', '\xCD', '\x9BC', '\n', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCD', '\x5', '\xCD', '\x9C0', '\n', '\xCD', '\x3', '\xCD', 
		'\x3', '\xCD', '\x5', '\xCD', '\x9C4', '\n', '\xCD', '\x3', '\xCD', '\x3', 
		'\xCD', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', '\xCE', '\x3', 
		'\xCE', '\x5', '\xCE', '\x9D2', '\n', '\xCE', '\x3', '\xCF', '\x3', '\xCF', 
		'\x3', '\xCF', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', 
		'\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x5', '\xD0', 
		'\x9DF', '\n', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', '\xD0', '\x3', 
		'\xD0', '\x5', '\xD0', '\x9E5', '\n', '\xD0', '\x3', '\xD1', '\x3', '\xD1', 
		'\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD1', '\x3', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', '\x3', '\xD2', 
		'\x5', '\xD2', '\x9F8', '\n', '\xD2', '\x3', '\xD3', '\x3', '\xD3', '\x3', 
		'\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD3', '\x3', '\xD4', '\x3', 
		'\xD4', '\x3', '\xD4', '\x5', '\xD4', '\xA03', '\n', '\xD4', '\x3', '\xD4', 
		'\x3', '\xD4', '\x5', '\xD4', '\xA07', '\n', '\xD4', '\x3', '\xD4', '\x3', 
		'\xD4', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xA0D', '\n', '\xD5', 
		'\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xA11', '\n', '\xD5', '\x3', 
		'\xD5', '\x3', '\xD5', '\x5', '\xD5', '\xA15', '\n', '\xD5', '\x3', '\xD5', 
		'\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x3', '\xD5', '\x5', '\xD5', 
		'\xA1C', '\n', '\xD5', '\x3', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\x3', 
		'\xD6', '\x3', '\xD6', '\x5', '\xD6', '\xA23', '\n', '\xD6', '\x3', '\xD6', 
		'\x5', '\xD6', '\xA26', '\n', '\xD6', '\x3', '\xD6', '\x3', '\xD6', '\a', 
		'\xD6', '\xA2A', '\n', '\xD6', '\f', '\xD6', '\xE', '\xD6', '\xA2D', '\v', 
		'\xD6', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x5', 
		'\xD7', '\xA33', '\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x5', '\xD7', '\xA38', '\n', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xA3B', 
		'\n', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', '\x3', '\xD7', 
		'\x3', '\xD7', '\x3', '\xD7', '\x5', '\xD7', '\xA43', '\n', '\xD7', '\x3', 
		'\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x3', '\xD8', '\x5', '\xD8', '\xA49', 
		'\n', '\xD8', '\x3', '\xD9', '\x3', '\xD9', '\x5', '\xD9', '\xA4D', '\n', 
		'\xD9', '\x3', '\xD9', '\x3', '\xD9', '\x3', '\xDA', '\x3', '\xDA', '\x5', 
		'\xDA', '\xA53', '\n', '\xDA', '\x3', '\xDA', '\x3', '\xDA', '\x5', '\xDA', 
		'\xA57', '\n', '\xDA', '\x3', '\xDB', '\x3', '\xDB', '\x3', '\xDB', '\x2', 
		'\x2', '\xDC', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', 
		'*', ',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', 
		'@', '\x42', '\x44', '\x46', 'H', 'J', 'L', 'N', 'P', 'R', 'T', 'V', 'X', 
		'Z', '\\', '^', '`', '\x62', '\x64', '\x66', 'h', 'j', 'l', 'n', 'p', 
		'r', 't', 'v', 'x', 'z', '|', '~', '\x80', '\x82', '\x84', '\x86', '\x88', 
		'\x8A', '\x8C', '\x8E', '\x90', '\x92', '\x94', '\x96', '\x98', '\x9A', 
		'\x9C', '\x9E', '\xA0', '\xA2', '\xA4', '\xA6', '\xA8', '\xAA', '\xAC', 
		'\xAE', '\xB0', '\xB2', '\xB4', '\xB6', '\xB8', '\xBA', '\xBC', '\xBE', 
		'\xC0', '\xC2', '\xC4', '\xC6', '\xC8', '\xCA', '\xCC', '\xCE', '\xD0', 
		'\xD2', '\xD4', '\xD6', '\xD8', '\xDA', '\xDC', '\xDE', '\xE0', '\xE2', 
		'\xE4', '\xE6', '\xE8', '\xEA', '\xEC', '\xEE', '\xF0', '\xF2', '\xF4', 
		'\xF6', '\xF8', '\xFA', '\xFC', '\xFE', '\x100', '\x102', '\x104', '\x106', 
		'\x108', '\x10A', '\x10C', '\x10E', '\x110', '\x112', '\x114', '\x116', 
		'\x118', '\x11A', '\x11C', '\x11E', '\x120', '\x122', '\x124', '\x126', 
		'\x128', '\x12A', '\x12C', '\x12E', '\x130', '\x132', '\x134', '\x136', 
		'\x138', '\x13A', '\x13C', '\x13E', '\x140', '\x142', '\x144', '\x146', 
		'\x148', '\x14A', '\x14C', '\x14E', '\x150', '\x152', '\x154', '\x156', 
		'\x158', '\x15A', '\x15C', '\x15E', '\x160', '\x162', '\x164', '\x166', 
		'\x168', '\x16A', '\x16C', '\x16E', '\x170', '\x172', '\x174', '\x176', 
		'\x178', '\x17A', '\x17C', '\x17E', '\x180', '\x182', '\x184', '\x186', 
		'\x188', '\x18A', '\x18C', '\x18E', '\x190', '\x192', '\x194', '\x196', 
		'\x198', '\x19A', '\x19C', '\x19E', '\x1A0', '\x1A2', '\x1A4', '\x1A6', 
		'\x1A8', '\x1AA', '\x1AC', '\x1AE', '\x1B0', '\x1B2', '\x1B4', '\x2', 
		'\x15', '\n', '\x2', '\x16', '\x16', '\x19', '\x19', '\x38', '\x38', '@', 
		'@', 'T', 'T', 'X', 'X', '\x64', '\x65', 'i', 'i', '\x4', '\x2', '#', 
		'#', '.', '.', '\x5', '\x2', '\x37', '\x37', 'I', 'I', 'Q', 'Q', '\x3', 
		'\x2', '\x9D', '\x9E', '\x4', '\x2', '\x93', '\x94', '\x9F', '\xA0', '\x3', 
		'\x2', '\x88', '\x89', '\x3', '\x2', '\x8A', '\x8C', '\x10', '\x2', '\x13', 
		'\x13', '\x16', '\x16', '\x19', '\x19', '\x1E', '\x1E', '#', '#', '.', 
		'.', '\x38', '\x38', '@', '@', '\x45', '\x45', 'T', 'T', 'X', 'X', '\\', 
		'\\', '\x64', '\x65', 'i', 'i', '\x4', '\x2', '\xF', '\xF', '!', '!', 
		'\x4', '\x2', '\x10', '\x10', 'h', 'h', '\xE', '\x2', '\n', '\n', '\x10', 
		'\x10', '*', '*', ':', ':', '\x43', '\x43', 'J', 'J', 'L', 'P', 'U', 'U', 
		'[', '[', 'h', 'h', 'l', 'l', 'n', 'n', '\x4', '\x2', ')', ')', '\x36', 
		'\x36', '\x4', '\x2', '\x12', '\x12', '_', '_', '\x4', '\x2', '\x8A', 
		'\x8A', '\x95', '\x95', '\x4', '\x2', '\x37', '\x37', 'I', 'I', '\x4', 
		'\x2', '+', '+', '\x61', '\x61', '\x15', '\x2', '\n', '\n', '\xE', '\xE', 
		'\x12', '\x14', '\x16', ' ', '\"', '#', '%', '&', '(', '\x30', '\x33', 
		'\x33', '\x35', ':', '<', '<', '?', '@', '\x42', '\x45', 'G', 'G', 'I', 
		'K', 'M', 'Q', 'S', 'U', 'X', 'j', 'l', 'n', 'q', 'q', '\x3', '\x2', 'P', 
		'Q', '\x16', '\x2', '\v', '\r', '\xF', '\x11', '\x15', '\x15', '!', '!', 
		'$', '$', '\'', '\'', '\x31', '\x32', '\x34', '\x34', ';', ';', '=', '>', 
		'\x41', '\x41', '\x46', '\x46', 'H', 'H', 'L', 'L', 'R', 'R', 'V', 'W', 
		'g', 'g', 'k', 'k', 'o', 'p', 'r', 's', '\x2', '\xB6B', '\x2', '\x1B7', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '\x1CF', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\b', '\x1E9', '\x3', '\x2', 
		'\x2', '\x2', '\n', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\f', '\x1F5', 
		'\x3', '\x2', '\x2', '\x2', '\xE', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x200', '\x3', '\x2', '\x2', '\x2', '\x12', '\x202', '\x3', '\x2', 
		'\x2', '\x2', '\x14', '\x204', '\x3', '\x2', '\x2', '\x2', '\x16', '\x20A', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x1A', '\x217', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x222', '\x3', '\x2', 
		'\x2', '\x2', '\x1E', '\x231', '\x3', '\x2', '\x2', '\x2', ' ', '\x236', 
		'\x3', '\x2', '\x2', '\x2', '\"', '\x247', '\x3', '\x2', '\x2', '\x2', 
		'$', '\x254', '\x3', '\x2', '\x2', '\x2', '&', '\x256', '\x3', '\x2', 
		'\x2', '\x2', '(', '\x25E', '\x3', '\x2', '\x2', '\x2', '*', '\x266', 
		'\x3', '\x2', '\x2', '\x2', ',', '\x26E', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x276', '\x3', '\x2', '\x2', '\x2', '\x30', '\x27E', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x286', '\x3', '\x2', '\x2', '\x2', '\x34', '\x28E', 
		'\x3', '\x2', '\x2', '\x2', '\x36', '\x296', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '\x2A2', '\x3', '\x2', '\x2', '\x2', ':', '\x2AD', '\x3', '\x2', 
		'\x2', '\x2', '<', '\x2B5', '\x3', '\x2', '\x2', '\x2', '>', '\x2BD', 
		'\x3', '\x2', '\x2', '\x2', '@', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x42', '\x2D1', '\x3', '\x2', '\x2', '\x2', '\x44', '\x2E0', '\x3', '\x2', 
		'\x2', '\x2', '\x46', '\x2FC', '\x3', '\x2', '\x2', '\x2', 'H', '\x2FE', 
		'\x3', '\x2', '\x2', '\x2', 'J', '\x39D', '\x3', '\x2', '\x2', '\x2', 
		'L', '\x3A1', '\x3', '\x2', '\x2', '\x2', 'N', '\x3A3', '\x3', '\x2', 
		'\x2', '\x2', 'P', '\x3A7', '\x3', '\x2', '\x2', '\x2', 'R', '\x3AF', 
		'\x3', '\x2', '\x2', '\x2', 'T', '\x3BF', '\x3', '\x2', '\x2', '\x2', 
		'V', '\x3C3', '\x3', '\x2', '\x2', '\x2', 'X', '\x3C5', '\x3', '\x2', 
		'\x2', '\x2', 'Z', '\x3CF', '\x3', '\x2', '\x2', '\x2', '\\', '\x3D1', 
		'\x3', '\x2', '\x2', '\x2', '^', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'`', '\x3E7', '\x3', '\x2', '\x2', '\x2', '\x62', '\x3EE', '\x3', '\x2', 
		'\x2', '\x2', '\x64', '\x3F0', '\x3', '\x2', '\x2', '\x2', '\x66', '\x403', 
		'\x3', '\x2', '\x2', '\x2', 'h', '\x405', '\x3', '\x2', '\x2', '\x2', 
		'j', '\x40E', '\x3', '\x2', '\x2', '\x2', 'l', '\x41B', '\x3', '\x2', 
		'\x2', '\x2', 'n', '\x41D', '\x3', '\x2', '\x2', '\x2', 'p', '\x432', 
		'\x3', '\x2', '\x2', '\x2', 'r', '\x43B', '\x3', '\x2', '\x2', '\x2', 
		't', '\x44C', '\x3', '\x2', '\x2', '\x2', 'v', '\x457', '\x3', '\x2', 
		'\x2', '\x2', 'x', '\x45C', '\x3', '\x2', '\x2', '\x2', 'z', '\x46D', 
		'\x3', '\x2', '\x2', '\x2', '|', '\x46F', '\x3', '\x2', '\x2', '\x2', 
		'~', '\x478', '\x3', '\x2', '\x2', '\x2', '\x80', '\x47D', '\x3', '\x2', 
		'\x2', '\x2', '\x82', '\x487', '\x3', '\x2', '\x2', '\x2', '\x84', '\x489', 
		'\x3', '\x2', '\x2', '\x2', '\x86', '\x48C', '\x3', '\x2', '\x2', '\x2', 
		'\x88', '\x497', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x4A3', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x4A5', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x4AA', 
		'\x3', '\x2', '\x2', '\x2', '\x90', '\x4AD', '\x3', '\x2', '\x2', '\x2', 
		'\x92', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x94', '\x4C5', '\x3', '\x2', 
		'\x2', '\x2', '\x96', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x98', '\x4D2', 
		'\x3', '\x2', '\x2', '\x2', '\x9A', '\x4D9', '\x3', '\x2', '\x2', '\x2', 
		'\x9C', '\x4E2', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x4E4', '\x3', '\x2', 
		'\x2', '\x2', '\xA0', '\x4E8', '\x3', '\x2', '\x2', '\x2', '\xA2', '\x4FD', 
		'\x3', '\x2', '\x2', '\x2', '\xA4', '\x504', '\x3', '\x2', '\x2', '\x2', 
		'\xA6', '\x506', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x50C', '\x3', '\x2', 
		'\x2', '\x2', '\xAA', '\x590', '\x3', '\x2', '\x2', '\x2', '\xAC', '\x592', 
		'\x3', '\x2', '\x2', '\x2', '\xAE', '\x5AB', '\x3', '\x2', '\x2', '\x2', 
		'\xB0', '\x5AF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x5B1', '\x3', '\x2', 
		'\x2', '\x2', '\xB4', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\xB6', '\x5BE', 
		'\x3', '\x2', '\x2', '\x2', '\xB8', '\x5C4', '\x3', '\x2', '\x2', '\x2', 
		'\xBA', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x5D6', '\x3', '\x2', 
		'\x2', '\x2', '\xBE', '\x5D8', '\x3', '\x2', '\x2', '\x2', '\xC0', '\x5DC', 
		'\x3', '\x2', '\x2', '\x2', '\xC2', '\x5E9', '\x3', '\x2', '\x2', '\x2', 
		'\xC4', '\x5EB', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x5FE', '\x3', '\x2', 
		'\x2', '\x2', '\xC8', '\x600', '\x3', '\x2', '\x2', '\x2', '\xCA', '\x60C', 
		'\x3', '\x2', '\x2', '\x2', '\xCC', '\x612', '\x3', '\x2', '\x2', '\x2', 
		'\xCE', '\x617', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x61C', '\x3', '\x2', 
		'\x2', '\x2', '\xD2', '\x61E', '\x3', '\x2', '\x2', '\x2', '\xD4', '\x624', 
		'\x3', '\x2', '\x2', '\x2', '\xD6', '\x62C', '\x3', '\x2', '\x2', '\x2', 
		'\xD8', '\x639', '\x3', '\x2', '\x2', '\x2', '\xDA', '\x63D', '\x3', '\x2', 
		'\x2', '\x2', '\xDC', '\x643', '\x3', '\x2', '\x2', '\x2', '\xDE', '\x656', 
		'\x3', '\x2', '\x2', '\x2', '\xE0', '\x659', '\x3', '\x2', '\x2', '\x2', 
		'\xE2', '\x65F', '\x3', '\x2', '\x2', '\x2', '\xE4', '\x662', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\x66E', '\x3', '\x2', '\x2', '\x2', '\xE8', '\x674', 
		'\x3', '\x2', '\x2', '\x2', '\xEA', '\x680', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\x684', '\x3', '\x2', '\x2', '\x2', '\xEE', '\x68D', '\x3', '\x2', 
		'\x2', '\x2', '\xF0', '\x696', '\x3', '\x2', '\x2', '\x2', '\xF2', '\x69A', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\x6A9', '\x3', '\x2', '\x2', '\x2', 
		'\xF6', '\x6B2', '\x3', '\x2', '\x2', '\x2', '\xF8', '\x6B4', '\x3', '\x2', 
		'\x2', '\x2', '\xFA', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x6C0', 
		'\x3', '\x2', '\x2', '\x2', '\xFE', '\x6C7', '\x3', '\x2', '\x2', '\x2', 
		'\x100', '\x6CC', '\x3', '\x2', '\x2', '\x2', '\x102', '\x6D6', '\x3', 
		'\x2', '\x2', '\x2', '\x104', '\x6DA', '\x3', '\x2', '\x2', '\x2', '\x106', 
		'\x6EF', '\x3', '\x2', '\x2', '\x2', '\x108', '\x6F6', '\x3', '\x2', '\x2', 
		'\x2', '\x10A', '\x704', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x70C', 
		'\x3', '\x2', '\x2', '\x2', '\x10E', '\x710', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x718', '\x3', '\x2', '\x2', '\x2', '\x112', '\x71F', '\x3', 
		'\x2', '\x2', '\x2', '\x114', '\x723', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x725', '\x3', '\x2', '\x2', '\x2', '\x118', '\x729', '\x3', '\x2', '\x2', 
		'\x2', '\x11A', '\x731', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x733', 
		'\x3', '\x2', '\x2', '\x2', '\x11E', '\x743', '\x3', '\x2', '\x2', '\x2', 
		'\x120', '\x74D', '\x3', '\x2', '\x2', '\x2', '\x122', '\x750', '\x3', 
		'\x2', '\x2', '\x2', '\x124', '\x757', '\x3', '\x2', '\x2', '\x2', '\x126', 
		'\x769', '\x3', '\x2', '\x2', '\x2', '\x128', '\x772', '\x3', '\x2', '\x2', 
		'\x2', '\x12A', '\x781', '\x3', '\x2', '\x2', '\x2', '\x12C', '\x785', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x788', '\x3', '\x2', '\x2', '\x2', 
		'\x130', '\x795', '\x3', '\x2', '\x2', '\x2', '\x132', '\x79B', '\x3', 
		'\x2', '\x2', '\x2', '\x134', '\x7B6', '\x3', '\x2', '\x2', '\x2', '\x136', 
		'\x7B8', '\x3', '\x2', '\x2', '\x2', '\x138', '\x7BF', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x13C', '\x7CB', 
		'\x3', '\x2', '\x2', '\x2', '\x13E', '\x7CE', '\x3', '\x2', '\x2', '\x2', 
		'\x140', '\x7D8', '\x3', '\x2', '\x2', '\x2', '\x142', '\x7E9', '\x3', 
		'\x2', '\x2', '\x2', '\x144', '\x7F5', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x7FE', '\x3', '\x2', '\x2', '\x2', '\x148', '\x80E', '\x3', '\x2', '\x2', 
		'\x2', '\x14A', '\x81A', '\x3', '\x2', '\x2', '\x2', '\x14C', '\x821', 
		'\x3', '\x2', '\x2', '\x2', '\x14E', '\x823', '\x3', '\x2', '\x2', '\x2', 
		'\x150', '\x826', '\x3', '\x2', '\x2', '\x2', '\x152', '\x830', '\x3', 
		'\x2', '\x2', '\x2', '\x154', '\x877', '\x3', '\x2', '\x2', '\x2', '\x156', 
		'\x88D', '\x3', '\x2', '\x2', '\x2', '\x158', '\x890', '\x3', '\x2', '\x2', 
		'\x2', '\x15A', '\x8A1', '\x3', '\x2', '\x2', '\x2', '\x15C', '\x8A8', 
		'\x3', '\x2', '\x2', '\x2', '\x15E', '\x8B3', '\x3', '\x2', '\x2', '\x2', 
		'\x160', '\x8B6', '\x3', '\x2', '\x2', '\x2', '\x162', '\x8BA', '\x3', 
		'\x2', '\x2', '\x2', '\x164', '\x8C8', '\x3', '\x2', '\x2', '\x2', '\x166', 
		'\x8CA', '\x3', '\x2', '\x2', '\x2', '\x168', '\x8D2', '\x3', '\x2', '\x2', 
		'\x2', '\x16A', '\x8E4', '\x3', '\x2', '\x2', '\x2', '\x16C', '\x8F7', 
		'\x3', '\x2', '\x2', '\x2', '\x16E', '\x8F9', '\x3', '\x2', '\x2', '\x2', 
		'\x170', '\x901', '\x3', '\x2', '\x2', '\x2', '\x172', '\x90A', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x90C', '\x3', '\x2', '\x2', '\x2', '\x176', 
		'\x92E', '\x3', '\x2', '\x2', '\x2', '\x178', '\x930', '\x3', '\x2', '\x2', 
		'\x2', '\x17A', '\x934', '\x3', '\x2', '\x2', '\x2', '\x17C', '\x938', 
		'\x3', '\x2', '\x2', '\x2', '\x17E', '\x944', '\x3', '\x2', '\x2', '\x2', 
		'\x180', '\x946', '\x3', '\x2', '\x2', '\x2', '\x182', '\x94C', '\x3', 
		'\x2', '\x2', '\x2', '\x184', '\x94E', '\x3', '\x2', '\x2', '\x2', '\x186', 
		'\x957', '\x3', '\x2', '\x2', '\x2', '\x188', '\x964', '\x3', '\x2', '\x2', 
		'\x2', '\x18A', '\x96A', '\x3', '\x2', '\x2', '\x2', '\x18C', '\x96C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x97C', '\x3', '\x2', '\x2', '\x2', 
		'\x190', '\x97E', '\x3', '\x2', '\x2', '\x2', '\x192', '\x98E', '\x3', 
		'\x2', '\x2', '\x2', '\x194', '\x99F', '\x3', '\x2', '\x2', '\x2', '\x196', 
		'\x9AE', '\x3', '\x2', '\x2', '\x2', '\x198', '\x9B7', '\x3', '\x2', '\x2', 
		'\x2', '\x19A', '\x9C7', '\x3', '\x2', '\x2', '\x2', '\x19C', '\x9D3', 
		'\x3', '\x2', '\x2', '\x2', '\x19E', '\x9D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x9E6', '\x3', '\x2', '\x2', '\x2', '\x1A2', '\x9EB', '\x3', 
		'\x2', '\x2', '\x2', '\x1A4', '\x9F9', '\x3', '\x2', '\x2', '\x2', '\x1A6', 
		'\x9FF', '\x3', '\x2', '\x2', '\x2', '\x1A8', '\xA0A', '\x3', '\x2', '\x2', 
		'\x2', '\x1AA', '\xA22', '\x3', '\x2', '\x2', '\x2', '\x1AC', '\xA2E', 
		'\x3', '\x2', '\x2', '\x2', '\x1AE', '\xA44', '\x3', '\x2', '\x2', '\x2', 
		'\x1B0', '\xA4A', '\x3', '\x2', '\x2', '\x2', '\x1B2', '\xA50', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\xA58', '\x3', '\x2', '\x2', '\x2', '\x1B6', 
		'\x1B8', '\a', '\x3', '\x2', '\x2', '\x1B7', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B7', '\x1B8', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1BA', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BB', '\x5', '\xD8', 'm', '\x2', 
		'\x1BA', '\x1B9', '\x3', '\x2', '\x2', '\x2', '\x1BA', '\x1BB', '\x3', 
		'\x2', '\x2', '\x2', '\x1BB', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BC', 
		'\x1BE', '\x5', '\xDC', 'o', '\x2', '\x1BD', '\x1BC', '\x3', '\x2', '\x2', 
		'\x2', '\x1BD', '\x1BE', '\x3', '\x2', '\x2', '\x2', '\x1BE', '\x1C2', 
		'\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1C1', '\x5', '\x15C', '\xAF', 
		'\x2', '\x1C0', '\x1BF', '\x3', '\x2', '\x2', '\x2', '\x1C1', '\x1C4', 
		'\x3', '\x2', '\x2', '\x2', '\x1C2', '\x1C0', '\x3', '\x2', '\x2', '\x2', 
		'\x1C2', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x1C3', '\x1C6', '\x3', 
		'\x2', '\x2', '\x2', '\x1C4', '\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C5', 
		'\x1C7', '\x5', '\xE0', 'q', '\x2', '\x1C6', '\x1C5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C6', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1C8', 
		'\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1C9', '\a', '\x2', '\x2', '\x3', 
		'\x1C9', '\x3', '\x3', '\x2', '\x2', '\x2', '\x1CA', '\x1CC', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x1CB', '\x1CD', '\x5', '\x18', '\r', '\x2', '\x1CC', 
		'\x1CB', '\x3', '\x2', '\x2', '\x2', '\x1CC', '\x1CD', '\x3', '\x2', '\x2', 
		'\x2', '\x1CD', '\x1D0', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1D0', 
		'\x5', '\xE6', 't', '\x2', '\x1CF', '\x1CA', '\x3', '\x2', '\x2', '\x2', 
		'\x1CF', '\x1CE', '\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1D1', '\x1D2', '\a', '\x84', '\x2', '\x2', '\x1D2', 
		'\x1D4', '\x5', '\x1B4', '\xDB', '\x2', '\x1D3', '\x1D5', '\x5', '\x18', 
		'\r', '\x2', '\x1D4', '\x1D3', '\x3', '\x2', '\x2', '\x2', '\x1D4', '\x1D5', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\x1D1', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1DA', '\x3', 
		'\x2', '\x2', '\x2', '\x1D8', '\x1D6', '\x3', '\x2', '\x2', '\x2', '\x1D8', 
		'\x1D9', '\x3', '\x2', '\x2', '\x2', '\x1D9', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1DA', '\x1D8', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1E1', 
		'\x5', '\b', '\x5', '\x2', '\x1DC', '\x1E0', '\a', '\x95', '\x2', '\x2', 
		'\x1DD', '\x1E0', '\x5', '\x144', '\xA3', '\x2', '\x1DE', '\x1E0', '\a', 
		'\x8A', '\x2', '\x2', '\x1DF', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DF', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DF', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x1E0', '\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', 
		'\x1E2', '\a', '\x3', '\x2', '\x2', '\x2', '\x1E3', '\x1E1', '\x3', '\x2', 
		'\x2', '\x2', '\x1E4', '\x1EA', '\x5', '\xE', '\b', '\x2', '\x1E5', '\x1EA', 
		'\x5', '\x16', '\f', '\x2', '\x1E6', '\x1E7', '\a', 'm', '\x2', '\x2', 
		'\x1E7', '\x1EA', '\a', '\x8A', '\x2', '\x2', '\x1E8', '\x1EA', '\x5', 
		'\n', '\x6', '\x2', '\x1E9', '\x1E4', '\x3', '\x2', '\x2', '\x2', '\x1E9', 
		'\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E9', '\x1E6', '\x3', '\x2', '\x2', 
		'\x2', '\x1E9', '\x1E8', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\t', '\x3', 
		'\x2', '\x2', '\x2', '\x1EB', '\x1EC', '\a', '\x82', '\x2', '\x2', '\x1EC', 
		'\x1EF', '\x5', '\f', '\a', '\x2', '\x1ED', '\x1EE', '\a', '\x85', '\x2', 
		'\x2', '\x1EE', '\x1F0', '\x5', '\f', '\a', '\x2', '\x1EF', '\x1ED', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F1', 
		'\x1EF', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\a', '\x83', '\x2', '\x2', '\x1F4', '\v', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1F7', '\x5', '\x6', '\x4', '\x2', '\x1F6', '\x1F8', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x1F9', '\x1FC', '\x5', '\x10', '\t', '\x2', '\x1FA', '\x1FC', 
		'\a', '\x13', '\x2', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', '\x2', '\x2', 
		'\x1FB', '\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x1FD', '\x201', '\x5', '\x12', '\n', '\x2', '\x1FE', '\x201', 
		'\x5', '\x14', '\v', '\x2', '\x1FF', '\x201', '\a', '\x1E', '\x2', '\x2', 
		'\x200', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x200', '\x1FE', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x202', '\x203', '\t', '\x2', '\x2', 
		'\x2', '\x203', '\x13', '\x3', '\x2', '\x2', '\x2', '\x204', '\x205', 
		'\t', '\x3', '\x2', '\x2', '\x205', '\x15', '\x3', '\x2', '\x2', '\x2', 
		'\x206', '\x20B', '\x5', '\x4', '\x3', '\x2', '\x207', '\x20B', '\a', 
		'\x45', '\x2', '\x2', '\x208', '\x20B', '\a', '$', '\x2', '\x2', '\x209', 
		'\x20B', '\a', '\\', '\x2', '\x2', '\x20A', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x20A', '\x207', '\x3', '\x2', '\x2', '\x2', '\x20A', '\x208', 
		'\x3', '\x2', '\x2', '\x2', '\x20A', '\x209', '\x3', '\x2', '\x2', '\x2', 
		'\x20B', '\x17', '\x3', '\x2', '\x2', '\x2', '\x20C', '\x20D', '\a', '\x93', 
		'\x2', '\x2', '\x20D', '\x212', '\x5', '\x6', '\x4', '\x2', '\x20E', '\x20F', 
		'\a', '\x85', '\x2', '\x2', '\x20F', '\x211', '\x5', '\x6', '\x4', '\x2', 
		'\x210', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x211', '\x214', '\x3', 
		'\x2', '\x2', '\x2', '\x212', '\x210', '\x3', '\x2', '\x2', '\x2', '\x212', 
		'\x213', '\x3', '\x2', '\x2', '\x2', '\x213', '\x215', '\x3', '\x2', '\x2', 
		'\x2', '\x214', '\x212', '\x3', '\x2', '\x2', '\x2', '\x215', '\x216', 
		'\a', '\x94', '\x2', '\x2', '\x216', '\x19', '\x3', '\x2', '\x2', '\x2', 
		'\x217', '\x21C', '\x5', '\x1C', '\xF', '\x2', '\x218', '\x219', '\a', 
		'\x85', '\x2', '\x2', '\x219', '\x21B', '\x5', '\x1C', '\xF', '\x2', '\x21A', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21E', '\x3', '\x2', '\x2', 
		'\x2', '\x21C', '\x21A', '\x3', '\x2', '\x2', '\x2', '\x21C', '\x21D', 
		'\x3', '\x2', '\x2', '\x2', '\x21D', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x21E', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x220', '\x221', '\a', '\x86', '\x2', '\x2', 
		'\x221', '\x223', '\x3', '\x2', '\x2', '\x2', '\x222', '\x21F', '\x3', 
		'\x2', '\x2', '\x2', '\x222', '\x223', '\x3', '\x2', '\x2', '\x2', '\x223', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x224', '\x226', '\t', '\x4', '\x2', 
		'\x2', '\x225', '\x224', '\x3', '\x2', '\x2', '\x2', '\x225', '\x226', 
		'\x3', '\x2', '\x2', '\x2', '\x226', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x22A', '\a', 'k', '\x2', '\x2', '\x228', '\x22A', '\x5', '\x6', 
		'\x4', '\x2', '\x229', '\x227', '\x3', '\x2', '\x2', '\x2', '\x229', '\x228', 
		'\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x5', 
		'\x1E', '\x10', '\x2', '\x22C', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x22D', 
		'\x232', '\x5', '\"', '\x12', '\x2', '\x22E', '\x232', '\x5', ' ', '\x11', 
		'\x2', '\x22F', '\x230', '\a', 'Q', '\x2', '\x2', '\x230', '\x232', '\x5', 
		' ', '\x11', '\x2', '\x231', '\x22D', '\x3', '\x2', '\x2', '\x2', '\x231', 
		'\x22E', '\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', '\x3', '\x2', '\x2', 
		'\x2', '\x232', '\x1F', '\x3', '\x2', '\x2', '\x2', '\x233', '\x237', 
		'\x5', 'x', '=', '\x2', '\x234', '\x237', '\x5', '\x84', '\x43', '\x2', 
		'\x235', '\x237', '\x5', '&', '\x14', '\x2', '\x236', '\x233', '\x3', 
		'\x2', '\x2', '\x2', '\x236', '\x234', '\x3', '\x2', '\x2', '\x2', '\x236', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x237', '!', '\x3', '\x2', '\x2', 
		'\x2', '\x238', '\x239', '\x5', '\x46', '$', '\x2', '\x239', '\x23A', 
		'\x5', '$', '\x13', '\x2', '\x23A', '\x23B', '\x5', '\x1E', '\x10', '\x2', 
		'\x23B', '\x248', '\x3', '\x2', '\x2', '\x2', '\x23C', '\x23D', '\x5', 
		'H', '%', '\x2', '\x23D', '\x23E', '\a', '\xAB', '\x2', '\x2', '\x23E', 
		'\x240', '\x3', '\x2', '\x2', '\x2', '\x23F', '\x23C', '\x3', '\x2', '\x2', 
		'\x2', '\x240', '\x241', '\x3', '\x2', '\x2', '\x2', '\x241', '\x23F', 
		'\x3', '\x2', '\x2', '\x2', '\x241', '\x242', '\x3', '\x2', '\x2', '\x2', 
		'\x242', '\x245', '\x3', '\x2', '\x2', '\x2', '\x243', '\x246', '\x5', 
		'\x46', '$', '\x2', '\x244', '\x246', '\x5', 'N', '(', '\x2', '\x245', 
		'\x243', '\x3', '\x2', '\x2', '\x2', '\x245', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x246', '\x248', '\x3', '\x2', '\x2', '\x2', '\x247', '\x238', 
		'\x3', '\x2', '\x2', '\x2', '\x247', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x248', '#', '\x3', '\x2', '\x2', '\x2', '\x249', '\x255', '\a', '\x92', 
		'\x2', '\x2', '\x24A', '\x255', '\a', '\xA1', '\x2', '\x2', '\x24B', '\x255', 
		'\a', '\xA2', '\x2', '\x2', '\x24C', '\x255', '\a', '\xA3', '\x2', '\x2', 
		'\x24D', '\x255', '\a', '\xA4', '\x2', '\x2', '\x24E', '\x255', '\a', 
		'\xA5', '\x2', '\x2', '\x24F', '\x255', '\a', '\xA6', '\x2', '\x2', '\x250', 
		'\x255', '\a', '\xA7', '\x2', '\x2', '\x251', '\x255', '\a', '\xA8', '\x2', 
		'\x2', '\x252', '\x255', '\a', '\xAA', '\x2', '\x2', '\x253', '\x255', 
		'\x5', '\x17C', '\xBF', '\x2', '\x254', '\x249', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x24A', '\x3', '\x2', '\x2', '\x2', '\x254', '\x24B', 
		'\x3', '\x2', '\x2', '\x2', '\x254', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x254', '\x24E', '\x3', 
		'\x2', '\x2', '\x2', '\x254', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x254', 
		'\x250', '\x3', '\x2', '\x2', '\x2', '\x254', '\x251', '\x3', '\x2', '\x2', 
		'\x2', '\x254', '\x252', '\x3', '\x2', '\x2', '\x2', '\x254', '\x253', 
		'\x3', '\x2', '\x2', '\x2', '\x255', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x256', '\x25C', '\x5', '(', '\x15', '\x2', '\x257', '\x258', '\a', '\x95', 
		'\x2', '\x2', '\x258', '\x259', '\x5', 'L', '\'', '\x2', '\x259', '\x25A', 
		'\a', '\x86', '\x2', '\x2', '\x25A', '\x25B', '\x5', 'L', '\'', '\x2', 
		'\x25B', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x257', '\x3', 
		'\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', '\x2', '\x25D', 
		'\'', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x264', '\x5', '*', '\x16', 
		'\x2', '\x25F', '\x262', '\a', '\x97', '\x2', '\x2', '\x260', '\x263', 
		'\x5', '(', '\x15', '\x2', '\x261', '\x263', '\x5', 'N', '(', '\x2', '\x262', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x262', '\x261', '\x3', '\x2', '\x2', 
		'\x2', '\x263', '\x265', '\x3', '\x2', '\x2', '\x2', '\x264', '\x25F', 
		'\x3', '\x2', '\x2', '\x2', '\x264', '\x265', '\x3', '\x2', '\x2', '\x2', 
		'\x265', ')', '\x3', '\x2', '\x2', '\x2', '\x266', '\x26B', '\x5', ',', 
		'\x17', '\x2', '\x267', '\x268', '\a', '\x9B', '\x2', '\x2', '\x268', 
		'\x26A', '\x5', ',', '\x17', '\x2', '\x269', '\x267', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', '\x26D', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x269', 
		'\x3', '\x2', '\x2', '\x2', '\x26B', '\x26C', '\x3', '\x2', '\x2', '\x2', 
		'\x26C', '+', '\x3', '\x2', '\x2', '\x2', '\x26D', '\x26B', '\x3', '\x2', 
		'\x2', '\x2', '\x26E', '\x273', '\x5', '.', '\x18', '\x2', '\x26F', '\x270', 
		'\a', '\x9A', '\x2', '\x2', '\x270', '\x272', '\x5', '.', '\x18', '\x2', 
		'\x271', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x272', '\x275', '\x3', 
		'\x2', '\x2', '\x2', '\x273', '\x271', '\x3', '\x2', '\x2', '\x2', '\x273', 
		'\x274', '\x3', '\x2', '\x2', '\x2', '\x274', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x275', '\x273', '\x3', '\x2', '\x2', '\x2', '\x276', '\x27B', 
		'\x5', '\x30', '\x19', '\x2', '\x277', '\x278', '\a', '\x8E', '\x2', '\x2', 
		'\x278', '\x27A', '\x5', '\x30', '\x19', '\x2', '\x279', '\x277', '\x3', 
		'\x2', '\x2', '\x2', '\x27A', '\x27D', '\x3', '\x2', '\x2', '\x2', '\x27B', 
		'\x279', '\x3', '\x2', '\x2', '\x2', '\x27B', '\x27C', '\x3', '\x2', '\x2', 
		'\x2', '\x27C', '/', '\x3', '\x2', '\x2', '\x2', '\x27D', '\x27B', '\x3', 
		'\x2', '\x2', '\x2', '\x27E', '\x283', '\x5', '\x32', '\x1A', '\x2', '\x27F', 
		'\x280', '\a', '\x8F', '\x2', '\x2', '\x280', '\x282', '\x5', '\x32', 
		'\x1A', '\x2', '\x281', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x282', 
		'\x285', '\x3', '\x2', '\x2', '\x2', '\x283', '\x281', '\x3', '\x2', '\x2', 
		'\x2', '\x283', '\x284', '\x3', '\x2', '\x2', '\x2', '\x284', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x285', '\x283', '\x3', '\x2', '\x2', '\x2', 
		'\x286', '\x28B', '\x5', '\x34', '\x1B', '\x2', '\x287', '\x288', '\a', 
		'\x8D', '\x2', '\x2', '\x288', '\x28A', '\x5', '\x34', '\x1B', '\x2', 
		'\x289', '\x287', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28D', '\x3', 
		'\x2', '\x2', '\x2', '\x28B', '\x289', '\x3', '\x2', '\x2', '\x2', '\x28B', 
		'\x28C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x33', '\x3', '\x2', '\x2', 
		'\x2', '\x28D', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28E', '\x293', 
		'\x5', '\x36', '\x1C', '\x2', '\x28F', '\x290', '\t', '\x5', '\x2', '\x2', 
		'\x290', '\x292', '\x5', '\x36', '\x1C', '\x2', '\x291', '\x28F', '\x3', 
		'\x2', '\x2', '\x2', '\x292', '\x295', '\x3', '\x2', '\x2', '\x2', '\x293', 
		'\x291', '\x3', '\x2', '\x2', '\x2', '\x293', '\x294', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x35', '\x3', '\x2', '\x2', '\x2', '\x295', '\x293', 
		'\x3', '\x2', '\x2', '\x2', '\x296', '\x29F', '\x5', '\x38', '\x1D', '\x2', 
		'\x297', '\x298', '\t', '\x6', '\x2', '\x2', '\x298', '\x29E', '\x5', 
		'\x38', '\x1D', '\x2', '\x299', '\x29A', '\a', '<', '\x2', '\x2', '\x29A', 
		'\x29E', '\x5', 'r', ':', '\x2', '\x29B', '\x29C', '\a', '\xE', '\x2', 
		'\x2', '\x29C', '\x29E', '\x5', '\x6', '\x4', '\x2', '\x29D', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x29D', '\x299', '\x3', '\x2', '\x2', '\x2', 
		'\x29D', '\x29B', '\x3', '\x2', '\x2', '\x2', '\x29E', '\x2A1', '\x3', 
		'\x2', '\x2', '\x2', '\x29F', '\x29D', '\x3', '\x2', '\x2', '\x2', '\x29F', 
		'\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A0', '\x37', '\x3', '\x2', '\x2', 
		'\x2', '\x2A1', '\x29F', '\x3', '\x2', '\x2', '\x2', '\x2A2', '\x2AA', 
		'\x5', ':', '\x1E', '\x2', '\x2A3', '\x2A6', '\a', '\xA9', '\x2', '\x2', 
		'\x2A4', '\x2A6', '\x5', '\x17A', '\xBE', '\x2', '\x2A5', '\x2A3', '\x3', 
		'\x2', '\x2', '\x2', '\x2A5', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A6', 
		'\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A9', '\x5', ':', '\x1E', 
		'\x2', '\x2A8', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2AC', 
		'\x3', '\x2', '\x2', '\x2', '\x2AA', '\x2A8', '\x3', '\x2', '\x2', '\x2', 
		'\x2AA', '\x2AB', '\x3', '\x2', '\x2', '\x2', '\x2AB', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x2AC', '\x2AA', '\x3', '\x2', '\x2', '\x2', '\x2AD', 
		'\x2B2', '\x5', '<', '\x1F', '\x2', '\x2AE', '\x2AF', '\t', '\a', '\x2', 
		'\x2', '\x2AF', '\x2B1', '\x5', '<', '\x1F', '\x2', '\x2B0', '\x2AE', 
		'\x3', '\x2', '\x2', '\x2', '\x2B1', '\x2B4', '\x3', '\x2', '\x2', '\x2', 
		'\x2B2', '\x2B0', '\x3', '\x2', '\x2', '\x2', '\x2B2', '\x2B3', '\x3', 
		'\x2', '\x2', '\x2', '\x2B3', ';', '\x3', '\x2', '\x2', '\x2', '\x2B4', 
		'\x2B2', '\x3', '\x2', '\x2', '\x2', '\x2B5', '\x2BA', '\x5', '>', ' ', 
		'\x2', '\x2B6', '\x2B7', '\t', '\b', '\x2', '\x2', '\x2B7', '\x2B9', '\x5', 
		'>', ' ', '\x2', '\x2B8', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B9', 
		'\x2BC', '\x3', '\x2', '\x2', '\x2', '\x2BA', '\x2B8', '\x3', '\x2', '\x2', 
		'\x2', '\x2BA', '\x2BB', '\x3', '\x2', '\x2', '\x2', '\x2BB', '=', '\x3', 
		'\x2', '\x2', '\x2', '\x2BC', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BD', 
		'\x2C7', '\x5', '\x44', '#', '\x2', '\x2BE', '\x2BF', '\a', '^', '\x2', 
		'\x2', '\x2BF', '\x2C4', '\a', '~', '\x2', '\x2', '\x2C0', '\x2C2', '\x5', 
		'@', '!', '\x2', '\x2C1', '\x2C3', '\a', '\x85', '\x2', '\x2', '\x2C2', 
		'\x2C1', '\x3', '\x2', '\x2', '\x2', '\x2C2', '\x2C3', '\x3', '\x2', '\x2', 
		'\x2', '\x2C3', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2C4', '\x2C5', '\x3', '\x2', '\x2', '\x2', 
		'\x2C5', '\x2C6', '\x3', '\x2', '\x2', '\x2', '\x2C6', '\x2C8', '\a', 
		'\x7F', '\x2', '\x2', '\x2C7', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C7', 
		'\x2C8', '\x3', '\x2', '\x2', '\x2', '\x2C8', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x2C9', '\x2CE', '\x5', '\x42', '\"', '\x2', '\x2CA', '\x2CB', 
		'\a', '\x85', '\x2', '\x2', '\x2CB', '\x2CD', '\x5', '\x42', '\"', '\x2', 
		'\x2CC', '\x2CA', '\x3', '\x2', '\x2', '\x2', '\x2CD', '\x2D0', '\x3', 
		'\x2', '\x2', '\x2', '\x2CE', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CE', 
		'\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x2D0', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D3', 
		'\x5', '\x1E', '\x10', '\x2', '\x2D2', '\x2D4', '\x5', '\xBE', '`', '\x2', 
		'\x2D3', '\x2D2', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x3', 
		'\x2', '\x2', '\x2', '\x2D4', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D5', 
		'\x2D6', '\x5', '\x178', '\xBD', '\x2', '\x2D6', '\x2D7', '\x5', 'L', 
		'\'', '\x2', '\x2D7', '\x43', '\x3', '\x2', '\x2', '\x2', '\x2D8', '\x2E1', 
		'\x5', '\x46', '$', '\x2', '\x2D9', '\x2DB', '\x5', '\x46', '$', '\x2', 
		'\x2DA', '\x2D9', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x3', 
		'\x2', '\x2', '\x2', '\x2DB', '\x2DC', '\x3', '\x2', '\x2', '\x2', '\x2DC', 
		'\x2DE', '\a', '\xAC', '\x2', '\x2', '\x2DD', '\x2DF', '\x5', '\x46', 
		'$', '\x2', '\x2DE', '\x2DD', '\x3', '\x2', '\x2', '\x2', '\x2DE', '\x2DF', 
		'\x3', '\x2', '\x2', '\x2', '\x2DF', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x2E0', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2DA', '\x3', 
		'\x2', '\x2', '\x2', '\x2E1', '\x45', '\x3', '\x2', '\x2', '\x2', '\x2E2', 
		'\x2FD', '\x5', 'H', '%', '\x2', '\x2E3', '\x2E4', '\a', '\x88', '\x2', 
		'\x2', '\x2E4', '\x2FD', '\x5', '\x46', '$', '\x2', '\x2E5', '\x2E6', 
		'\a', '\x89', '\x2', '\x2', '\x2E6', '\x2FD', '\x5', '\x46', '$', '\x2', 
		'\x2E7', '\x2E8', '\a', '\x90', '\x2', '\x2', '\x2E8', '\x2FD', '\x5', 
		'\x46', '$', '\x2', '\x2E9', '\x2EA', '\a', '\x91', '\x2', '\x2', '\x2EA', 
		'\x2FD', '\x5', '\x46', '$', '\x2', '\x2EB', '\x2EC', '\a', '\x98', '\x2', 
		'\x2', '\x2EC', '\x2FD', '\x5', '\x46', '$', '\x2', '\x2ED', '\x2EE', 
		'\a', '\x99', '\x2', '\x2', '\x2EE', '\x2FD', '\x5', '\x46', '$', '\x2', 
		'\x2EF', '\x2F0', '\a', '\x82', '\x2', '\x2', '\x2F0', '\x2F1', '\x5', 
		'\x6', '\x4', '\x2', '\x2F1', '\x2F2', '\a', '\x83', '\x2', '\x2', '\x2F2', 
		'\x2F3', '\x5', '\x46', '$', '\x2', '\x2F3', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2F4', '\x2F5', '\a', '\x11', '\x2', '\x2', '\x2F5', '\x2FD', 
		'\x5', '\x46', '$', '\x2', '\x2F6', '\x2F7', '\a', '\x8D', '\x2', '\x2', 
		'\x2F7', '\x2FD', '\x5', '\x46', '$', '\x2', '\x2F8', '\x2F9', '\a', '\x8A', 
		'\x2', '\x2', '\x2F9', '\x2FD', '\x5', '\x46', '$', '\x2', '\x2FA', '\x2FB', 
		'\a', '\x8F', '\x2', '\x2', '\x2FB', '\x2FD', '\x5', '\x46', '$', '\x2', 
		'\x2FC', '\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2FC', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2FC', 
		'\x2E7', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2E9', '\x3', '\x2', '\x2', 
		'\x2', '\x2FC', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2EF', '\x3', '\x2', '\x2', '\x2', 
		'\x2FC', '\x2F4', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x2FC', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2FC', 
		'\x2FA', '\x3', '\x2', '\x2', '\x2', '\x2FD', 'G', '\x3', '\x2', '\x2', 
		'\x2', '\x2FE', '\x300', '\x5', 'J', '&', '\x2', '\x2FF', '\x301', '\a', 
		'\x90', '\x2', '\x2', '\x300', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x300', 
		'\x301', '\x3', '\x2', '\x2', '\x2', '\x301', '\x305', '\x3', '\x2', '\x2', 
		'\x2', '\x302', '\x304', '\x5', 'R', '*', '\x2', '\x303', '\x302', '\x3', 
		'\x2', '\x2', '\x2', '\x304', '\x307', '\x3', '\x2', '\x2', '\x2', '\x305', 
		'\x303', '\x3', '\x2', '\x2', '\x2', '\x305', '\x306', '\x3', '\x2', '\x2', 
		'\x2', '\x306', '\x309', '\x3', '\x2', '\x2', '\x2', '\x307', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x308', '\x30A', '\a', '\x90', '\x2', '\x2', 
		'\x309', '\x308', '\x3', '\x2', '\x2', '\x2', '\x309', '\x30A', '\x3', 
		'\x2', '\x2', '\x2', '\x30A', '\x321', '\x3', '\x2', '\x2', '\x2', '\x30B', 
		'\x312', '\x5', 'P', ')', '\x2', '\x30C', '\x312', '\x5', '\x1B0', '\xD9', 
		'\x2', '\x30D', '\x312', '\a', '\x98', '\x2', '\x2', '\x30E', '\x312', 
		'\a', '\x99', '\x2', '\x2', '\x30F', '\x310', '\a', '\x9C', '\x2', '\x2', 
		'\x310', '\x312', '\x5', '\x1B4', '\xDB', '\x2', '\x311', '\x30B', '\x3', 
		'\x2', '\x2', '\x2', '\x311', '\x30C', '\x3', '\x2', '\x2', '\x2', '\x311', 
		'\x30D', '\x3', '\x2', '\x2', '\x2', '\x311', '\x30E', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '\x30F', '\x3', '\x2', '\x2', '\x2', '\x312', '\x314', 
		'\x3', '\x2', '\x2', '\x2', '\x313', '\x315', '\a', '\x90', '\x2', '\x2', 
		'\x314', '\x313', '\x3', '\x2', '\x2', '\x2', '\x314', '\x315', '\x3', 
		'\x2', '\x2', '\x2', '\x315', '\x319', '\x3', '\x2', '\x2', '\x2', '\x316', 
		'\x318', '\x5', 'R', '*', '\x2', '\x317', '\x316', '\x3', '\x2', '\x2', 
		'\x2', '\x318', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x319', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x319', '\x31A', '\x3', '\x2', '\x2', '\x2', 
		'\x31A', '\x31D', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x319', '\x3', 
		'\x2', '\x2', '\x2', '\x31C', '\x31E', '\a', '\x90', '\x2', '\x2', '\x31D', 
		'\x31C', '\x3', '\x2', '\x2', '\x2', '\x31D', '\x31E', '\x3', '\x2', '\x2', 
		'\x2', '\x31E', '\x320', '\x3', '\x2', '\x2', '\x2', '\x31F', '\x311', 
		'\x3', '\x2', '\x2', '\x2', '\x320', '\x323', '\x3', '\x2', '\x2', '\x2', 
		'\x321', '\x31F', '\x3', '\x2', '\x2', '\x2', '\x321', '\x322', '\x3', 
		'\x2', '\x2', '\x2', '\x322', 'I', '\x3', '\x2', '\x2', '\x2', '\x323', 
		'\x321', '\x3', '\x2', '\x2', '\x2', '\x324', '\x39E', '\x5', '\x17E', 
		'\xC0', '\x2', '\x325', '\x327', '\x5', '\x1B4', '\xDB', '\x2', '\x326', 
		'\x328', '\x5', '\x18', '\r', '\x2', '\x327', '\x326', '\x3', '\x2', '\x2', 
		'\x2', '\x327', '\x328', '\x3', '\x2', '\x2', '\x2', '\x328', '\x39E', 
		'\x3', '\x2', '\x2', '\x2', '\x329', '\x32A', '\a', '\x82', '\x2', '\x2', 
		'\x32A', '\x32B', '\x5', '\x1E', '\x10', '\x2', '\x32B', '\x32C', '\a', 
		'\x83', '\x2', '\x2', '\x32C', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x32D', 
		'\x39E', '\x5', 'V', ',', '\x2', '\x32E', '\x39E', '\x5', '\xE6', 't', 
		'\x2', '\x32F', '\x39E', '\a', 't', '\x2', '\x2', '\x330', '\x39E', '\a', 
		'_', '\x2', '\x2', '\x331', '\x33B', '\a', '\x12', '\x2', '\x2', '\x332', 
		'\x333', '\a', '\x84', '\x2', '\x2', '\x333', '\x335', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x334', '\x336', '\x5', '\x18', '\r', '\x2', '\x335', 
		'\x334', '\x3', '\x2', '\x2', '\x2', '\x335', '\x336', '\x3', '\x2', '\x2', 
		'\x2', '\x336', '\x33C', '\x3', '\x2', '\x2', '\x2', '\x337', '\x338', 
		'\a', '\x80', '\x2', '\x2', '\x338', '\x339', '\x5', 'X', '-', '\x2', 
		'\x339', '\x33A', '\a', '\x81', '\x2', '\x2', '\x33A', '\x33C', '\x3', 
		'\x2', '\x2', '\x2', '\x33B', '\x332', '\x3', '\x2', '\x2', '\x2', '\x33B', 
		'\x337', '\x3', '\x2', '\x2', '\x2', '\x33C', '\x39E', '\x3', '\x2', '\x2', 
		'\x2', '\x33D', '\x35A', '\a', '\x43', '\x2', '\x2', '\x33E', '\x354', 
		'\x5', '\x6', '\x4', '\x2', '\x33F', '\x355', '\x5', '\x1B2', '\xDA', 
		'\x2', '\x340', '\x355', '\x5', 'Z', '.', '\x2', '\x341', '\x342', '\a', 
		'\x80', '\x2', '\x2', '\x342', '\x343', '\x5', 'X', '-', '\x2', '\x343', 
		'\x347', '\a', '\x81', '\x2', '\x2', '\x344', '\x346', '\x5', '\x144', 
		'\xA3', '\x2', '\x345', '\x344', '\x3', '\x2', '\x2', '\x2', '\x346', 
		'\x349', '\x3', '\x2', '\x2', '\x2', '\x347', '\x345', '\x3', '\x2', '\x2', 
		'\x2', '\x347', '\x348', '\x3', '\x2', '\x2', '\x2', '\x348', '\x34B', 
		'\x3', '\x2', '\x2', '\x2', '\x349', '\x347', '\x3', '\x2', '\x2', '\x2', 
		'\x34A', '\x34C', '\x5', '\x146', '\xA4', '\x2', '\x34B', '\x34A', '\x3', 
		'\x2', '\x2', '\x2', '\x34B', '\x34C', '\x3', '\x2', '\x2', '\x2', '\x34C', 
		'\x355', '\x3', '\x2', '\x2', '\x2', '\x34D', '\x34F', '\x5', '\x144', 
		'\xA3', '\x2', '\x34E', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x34F', 
		'\x350', '\x3', '\x2', '\x2', '\x2', '\x350', '\x34E', '\x3', '\x2', '\x2', 
		'\x2', '\x350', '\x351', '\x3', '\x2', '\x2', '\x2', '\x351', '\x352', 
		'\x3', '\x2', '\x2', '\x2', '\x352', '\x353', '\x5', '\x146', '\xA4', 
		'\x2', '\x353', '\x355', '\x3', '\x2', '\x2', '\x2', '\x354', '\x33F', 
		'\x3', '\x2', '\x2', '\x2', '\x354', '\x340', '\x3', '\x2', '\x2', '\x2', 
		'\x354', '\x341', '\x3', '\x2', '\x2', '\x2', '\x354', '\x34E', '\x3', 
		'\x2', '\x2', '\x2', '\x355', '\x35B', '\x3', '\x2', '\x2', '\x2', '\x356', 
		'\x35B', '\x5', 'h', '\x35', '\x2', '\x357', '\x358', '\x5', '\x144', 
		'\xA3', '\x2', '\x358', '\x359', '\x5', '\x146', '\xA4', '\x2', '\x359', 
		'\x35B', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x33E', '\x3', '\x2', '\x2', 
		'\x2', '\x35A', '\x356', '\x3', '\x2', '\x2', '\x2', '\x35A', '\x357', 
		'\x3', '\x2', '\x2', '\x2', '\x35B', '\x39E', '\x3', '\x2', '\x2', '\x2', 
		'\x35C', '\x35D', '\a', '\x82', '\x2', '\x2', '\x35D', '\x360', '\x5', 
		'\x1C', '\xF', '\x2', '\x35E', '\x35F', '\a', '\x85', '\x2', '\x2', '\x35F', 
		'\x361', '\x5', '\x1C', '\xF', '\x2', '\x360', '\x35E', '\x3', '\x2', 
		'\x2', '\x2', '\x361', '\x362', '\x3', '\x2', '\x2', '\x2', '\x362', '\x360', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x363', '\x3', '\x2', '\x2', '\x2', 
		'\x363', '\x364', '\x3', '\x2', '\x2', '\x2', '\x364', '\x365', '\a', 
		'\x83', '\x2', '\x2', '\x365', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x366', 
		'\x367', '\a', '\x63', '\x2', '\x2', '\x367', '\x36B', '\a', '\x82', '\x2', 
		'\x2', '\x368', '\x36C', '\x5', 'n', '\x38', '\x2', '\x369', '\x36C', 
		'\x5', '\x6', '\x4', '\x2', '\x36A', '\x36C', '\a', 'm', '\x2', '\x2', 
		'\x36B', '\x368', '\x3', '\x2', '\x2', '\x2', '\x36B', '\x369', '\x3', 
		'\x2', '\x2', '\x2', '\x36B', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x36C', 
		'\x36D', '\x3', '\x2', '\x2', '\x2', '\x36D', '\x39E', '\a', '\x83', '\x2', 
		'\x2', '\x36E', '\x36F', '\a', '\x1A', '\x2', '\x2', '\x36F', '\x370', 
		'\a', '\x82', '\x2', '\x2', '\x370', '\x371', '\x5', '\x1E', '\x10', '\x2', 
		'\x371', '\x372', '\a', '\x83', '\x2', '\x2', '\x372', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x373', '\x374', '\a', '\x66', '\x2', '\x2', '\x374', 
		'\x375', '\a', '\x82', '\x2', '\x2', '\x375', '\x376', '\x5', '\x1E', 
		'\x10', '\x2', '\x376', '\x377', '\a', '\x83', '\x2', '\x2', '\x377', 
		'\x39E', '\x3', '\x2', '\x2', '\x2', '\x378', '\x37D', '\a', '\x1F', '\x2', 
		'\x2', '\x379', '\x37A', '\a', '\x82', '\x2', '\x2', '\x37A', '\x37B', 
		'\x5', '\x6', '\x4', '\x2', '\x37B', '\x37C', '\a', '\x83', '\x2', '\x2', 
		'\x37C', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37D', '\x379', '\x3', 
		'\x2', '\x2', '\x2', '\x37D', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37E', 
		'\x39E', '\x3', '\x2', '\x2', '\x2', '\x37F', '\x381', '\a', '\x10', '\x2', 
		'\x2', '\x380', '\x37F', '\x3', '\x2', '\x2', '\x2', '\x380', '\x381', 
		'\x3', '\x2', '\x2', '\x2', '\x381', '\x382', '\x3', '\x2', '\x2', '\x2', 
		'\x382', '\x388', '\a', ' ', '\x2', '\x2', '\x383', '\x385', '\a', '\x82', 
		'\x2', '\x2', '\x384', '\x386', '\x5', '|', '?', '\x2', '\x385', '\x384', 
		'\x3', '\x2', '\x2', '\x2', '\x385', '\x386', '\x3', '\x2', '\x2', '\x2', 
		'\x386', '\x387', '\x3', '\x2', '\x2', '\x2', '\x387', '\x389', '\a', 
		'\x83', '\x2', '\x2', '\x388', '\x383', '\x3', '\x2', '\x2', '\x2', '\x388', 
		'\x389', '\x3', '\x2', '\x2', '\x2', '\x389', '\x38A', '\x3', '\x2', '\x2', 
		'\x2', '\x38A', '\x39E', '\x5', '\xAC', 'W', '\x2', '\x38B', '\x38C', 
		'\a', 'Y', '\x2', '\x2', '\x38C', '\x38D', '\a', '\x82', '\x2', '\x2', 
		'\x38D', '\x38E', '\x5', '\x6', '\x4', '\x2', '\x38E', '\x38F', '\a', 
		'\x83', '\x2', '\x2', '\x38F', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x390', 
		'\x391', '\a', '\x41', '\x2', '\x2', '\x391', '\x397', '\a', '\x82', '\x2', 
		'\x2', '\x392', '\x393', '\x5', '\x1B4', '\xDB', '\x2', '\x393', '\x394', 
		'\a', '\x84', '\x2', '\x2', '\x394', '\x396', '\x3', '\x2', '\x2', '\x2', 
		'\x395', '\x392', '\x3', '\x2', '\x2', '\x2', '\x396', '\x399', '\x3', 
		'\x2', '\x2', '\x2', '\x397', '\x395', '\x3', '\x2', '\x2', '\x2', '\x397', 
		'\x398', '\x3', '\x2', '\x2', '\x2', '\x398', '\x39A', '\x3', '\x2', '\x2', 
		'\x2', '\x399', '\x397', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x39B', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x39B', '\x39C', '\a', '\x83', '\x2', 
		'\x2', '\x39C', '\x39E', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x324', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x39D', '\x329', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x32D', '\x3', 
		'\x2', '\x2', '\x2', '\x39D', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x39D', 
		'\x32F', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x330', '\x3', '\x2', '\x2', 
		'\x2', '\x39D', '\x331', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x33D', 
		'\x3', '\x2', '\x2', '\x2', '\x39D', '\x35C', '\x3', '\x2', '\x2', '\x2', 
		'\x39D', '\x366', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x36E', '\x3', 
		'\x2', '\x2', '\x2', '\x39D', '\x373', '\x3', '\x2', '\x2', '\x2', '\x39D', 
		'\x378', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x380', '\x3', '\x2', '\x2', 
		'\x2', '\x39D', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x39D', '\x390', 
		'\x3', '\x2', '\x2', '\x2', '\x39E', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x39F', '\x3A2', '\x5', '\x1E', '\x10', '\x2', '\x3A0', '\x3A2', '\x5', 
		'N', '(', '\x2', '\x3A1', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A1', 
		'\x3A0', '\x3', '\x2', '\x2', '\x2', '\x3A2', 'M', '\x3', '\x2', '\x2', 
		'\x2', '\x3A3', '\x3A4', '\a', '`', '\x2', '\x2', '\x3A4', '\x3A5', '\x5', 
		'\x1E', '\x10', '\x2', '\x3A5', 'O', '\x3', '\x2', '\x2', '\x2', '\x3A6', 
		'\x3A8', '\a', '\x95', '\x2', '\x2', '\x3A7', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x3A7', '\x3A8', '\x3', '\x2', '\x2', '\x2', '\x3A8', '\x3A9', 
		'\x3', '\x2', '\x2', '\x2', '\x3A9', '\x3AA', '\a', '\x84', '\x2', '\x2', 
		'\x3AA', '\x3AC', '\x5', '\x1B4', '\xDB', '\x2', '\x3AB', '\x3AD', '\x5', 
		'\x18', '\r', '\x2', '\x3AC', '\x3AB', '\x3', '\x2', '\x2', '\x2', '\x3AC', 
		'\x3AD', '\x3', '\x2', '\x2', '\x2', '\x3AD', 'Q', '\x3', '\x2', '\x2', 
		'\x2', '\x3AE', '\x3B0', '\a', '\x95', '\x2', '\x2', '\x3AF', '\x3AE', 
		'\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', '\x3', '\x2', '\x2', '\x2', 
		'\x3B0', '\x3B1', '\x3', '\x2', '\x2', '\x2', '\x3B1', '\x3B2', '\a', 
		'\x80', '\x2', '\x2', '\x3B2', '\x3B7', '\x5', 'T', '+', '\x2', '\x3B3', 
		'\x3B4', '\a', '\x85', '\x2', '\x2', '\x3B4', '\x3B6', '\x5', 'T', '+', 
		'\x2', '\x3B5', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B6', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3B7', '\x3B5', '\x3', '\x2', '\x2', '\x2', 
		'\x3B7', '\x3B8', '\x3', '\x2', '\x2', '\x2', '\x3B8', '\x3BA', '\x3', 
		'\x2', '\x2', '\x2', '\x3B9', '\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3BA', 
		'\x3BB', '\a', '\x81', '\x2', '\x2', '\x3BB', 'S', '\x3', '\x2', '\x2', 
		'\x2', '\x3BC', '\x3BD', '\x5', '\x1B4', '\xDB', '\x2', '\x3BD', '\x3BE', 
		'\a', '\x86', '\x2', '\x2', '\x3BE', '\x3C0', '\x3', '\x2', '\x2', '\x2', 
		'\x3BF', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3BF', '\x3C0', '\x3', 
		'\x2', '\x2', '\x2', '\x3C0', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C1', 
		'\x3C2', '\x5', '\x1E', '\x10', '\x2', '\x3C2', 'U', '\x3', '\x2', '\x2', 
		'\x2', '\x3C3', '\x3C4', '\t', '\t', '\x2', '\x2', '\x3C4', 'W', '\x3', 
		'\x2', '\x2', '\x2', '\x3C5', '\x3CA', '\x5', '\x1E', '\x10', '\x2', '\x3C6', 
		'\x3C7', '\a', '\x85', '\x2', '\x2', '\x3C7', '\x3C9', '\x5', '\x1E', 
		'\x10', '\x2', '\x3C8', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x3C9', 
		'\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3C8', '\x3', '\x2', '\x2', 
		'\x2', '\x3CA', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CB', 'Y', '\x3', 
		'\x2', '\x2', '\x2', '\x3CC', '\x3CA', '\x3', '\x2', '\x2', '\x2', '\x3CD', 
		'\x3D0', '\x5', '\\', '/', '\x2', '\x3CE', '\x3D0', '\x5', '\x64', '\x33', 
		'\x2', '\x3CF', '\x3CD', '\x3', '\x2', '\x2', '\x2', '\x3CF', '\x3CE', 
		'\x3', '\x2', '\x2', '\x2', '\x3D0', '[', '\x3', '\x2', '\x2', '\x2', 
		'\x3D1', '\x3D6', '\a', '~', '\x2', '\x2', '\x3D2', '\x3D4', '\x5', '^', 
		'\x30', '\x2', '\x3D3', '\x3D5', '\a', '\x85', '\x2', '\x2', '\x3D4', 
		'\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D4', '\x3D5', '\x3', '\x2', '\x2', 
		'\x2', '\x3D5', '\x3D7', '\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D2', 
		'\x3', '\x2', '\x2', '\x2', '\x3D6', '\x3D7', '\x3', '\x2', '\x2', '\x2', 
		'\x3D7', '\x3D8', '\x3', '\x2', '\x2', '\x2', '\x3D8', '\x3D9', '\a', 
		'\x7F', '\x2', '\x2', '\x3D9', ']', '\x3', '\x2', '\x2', '\x2', '\x3DA', 
		'\x3DF', '\x5', '`', '\x31', '\x2', '\x3DB', '\x3DC', '\a', '\x85', '\x2', 
		'\x2', '\x3DC', '\x3DE', '\x5', '`', '\x31', '\x2', '\x3DD', '\x3DB', 
		'\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3E1', '\x3', '\x2', '\x2', '\x2', 
		'\x3DF', '\x3DD', '\x3', '\x2', '\x2', '\x2', '\x3DF', '\x3E0', '\x3', 
		'\x2', '\x2', '\x2', '\x3E0', '_', '\x3', '\x2', '\x2', '\x2', '\x3E1', 
		'\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3E2', '\x3E8', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x3E3', '\x3E4', '\a', '\x80', '\x2', '\x2', '\x3E4', 
		'\x3E5', '\x5', '\x1E', '\x10', '\x2', '\x3E5', '\x3E6', '\a', '\x81', 
		'\x2', '\x2', '\x3E6', '\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E2', 
		'\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E3', '\x3', '\x2', '\x2', '\x2', 
		'\x3E8', '\x3E9', '\x3', '\x2', '\x2', '\x2', '\x3E9', '\x3EA', '\a', 
		'\x92', '\x2', '\x2', '\x3EA', '\x3EB', '\x5', '\x62', '\x32', '\x2', 
		'\x3EB', '\x61', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3EF', '\x5', 
		'\x1E', '\x10', '\x2', '\x3ED', '\x3EF', '\x5', 'Z', '.', '\x2', '\x3EE', 
		'\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EE', '\x3ED', '\x3', '\x2', '\x2', 
		'\x2', '\x3EF', '\x63', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F1', 
		'\a', '~', '\x2', '\x2', '\x3F1', '\x3F6', '\x5', '\x66', '\x34', '\x2', 
		'\x3F2', '\x3F3', '\a', '\x85', '\x2', '\x2', '\x3F3', '\x3F5', '\x5', 
		'\x66', '\x34', '\x2', '\x3F4', '\x3F2', '\x3', '\x2', '\x2', '\x2', '\x3F5', 
		'\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F6', '\x3F4', '\x3', '\x2', '\x2', 
		'\x2', '\x3F6', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x3FA', 
		'\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3F6', '\x3', '\x2', '\x2', '\x2', 
		'\x3F9', '\x3FB', '\a', '\x85', '\x2', '\x2', '\x3FA', '\x3F9', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', 
		'\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FC', '\x3FD', '\a', '\x7F', '\x2', 
		'\x2', '\x3FD', '\x65', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x404', 
		'\x5', ' ', '\x11', '\x2', '\x3FF', '\x400', '\a', '~', '\x2', '\x2', 
		'\x400', '\x401', '\x5', 'X', '-', '\x2', '\x401', '\x402', '\a', '\x7F', 
		'\x2', '\x2', '\x402', '\x404', '\x3', '\x2', '\x2', '\x2', '\x403', '\x3FE', 
		'\x3', '\x2', '\x2', '\x2', '\x403', '\x3FF', '\x3', '\x2', '\x2', '\x2', 
		'\x404', 'g', '\x3', '\x2', '\x2', '\x2', '\x405', '\x40A', '\a', '~', 
		'\x2', '\x2', '\x406', '\x408', '\x5', 'j', '\x36', '\x2', '\x407', '\x409', 
		'\a', '\x85', '\x2', '\x2', '\x408', '\x407', '\x3', '\x2', '\x2', '\x2', 
		'\x408', '\x409', '\x3', '\x2', '\x2', '\x2', '\x409', '\x40B', '\x3', 
		'\x2', '\x2', '\x2', '\x40A', '\x406', '\x3', '\x2', '\x2', '\x2', '\x40A', 
		'\x40B', '\x3', '\x2', '\x2', '\x2', '\x40B', '\x40C', '\x3', '\x2', '\x2', 
		'\x2', '\x40C', '\x40D', '\a', '\x7F', '\x2', '\x2', '\x40D', 'i', '\x3', 
		'\x2', '\x2', '\x2', '\x40E', '\x413', '\x5', 'l', '\x37', '\x2', '\x40F', 
		'\x410', '\a', '\x85', '\x2', '\x2', '\x410', '\x412', '\x5', 'l', '\x37', 
		'\x2', '\x411', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x412', '\x415', 
		'\x3', '\x2', '\x2', '\x2', '\x413', '\x411', '\x3', '\x2', '\x2', '\x2', 
		'\x413', '\x414', '\x3', '\x2', '\x2', '\x2', '\x414', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x415', '\x413', '\x3', '\x2', '\x2', '\x2', '\x416', '\x41C', 
		'\x5', 'H', '%', '\x2', '\x417', '\x418', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x418', '\x419', '\a', '\x92', '\x2', '\x2', '\x419', '\x41A', '\x5', 
		'\x1E', '\x10', '\x2', '\x41A', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41B', 
		'\x416', '\x3', '\x2', '\x2', '\x2', '\x41B', '\x417', '\x3', '\x2', '\x2', 
		'\x2', '\x41C', 'm', '\x3', '\x2', '\x2', '\x2', '\x41D', '\x426', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x41E', '\x420', '\x5', 'p', '\x39', '\x2', '\x41F', 
		'\x41E', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x420', '\x3', '\x2', '\x2', 
		'\x2', '\x420', '\x427', '\x3', '\x2', '\x2', '\x2', '\x421', '\x422', 
		'\a', '\x96', '\x2', '\x2', '\x422', '\x424', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x423', '\x425', '\x5', 'p', '\x39', '\x2', '\x424', '\x423', 
		'\x3', '\x2', '\x2', '\x2', '\x424', '\x425', '\x3', '\x2', '\x2', '\x2', 
		'\x425', '\x427', '\x3', '\x2', '\x2', '\x2', '\x426', '\x41F', '\x3', 
		'\x2', '\x2', '\x2', '\x426', '\x421', '\x3', '\x2', '\x2', '\x2', '\x427', 
		'\x42F', '\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\a', '\x84', '\x2', 
		'\x2', '\x429', '\x42B', '\x5', '\x1B4', '\xDB', '\x2', '\x42A', '\x42C', 
		'\x5', 'p', '\x39', '\x2', '\x42B', '\x42A', '\x3', '\x2', '\x2', '\x2', 
		'\x42B', '\x42C', '\x3', '\x2', '\x2', '\x2', '\x42C', '\x42E', '\x3', 
		'\x2', '\x2', '\x2', '\x42D', '\x428', '\x3', '\x2', '\x2', '\x2', '\x42E', 
		'\x431', '\x3', '\x2', '\x2', '\x2', '\x42F', '\x42D', '\x3', '\x2', '\x2', 
		'\x2', '\x42F', '\x430', '\x3', '\x2', '\x2', '\x2', '\x430', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x431', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x432', 
		'\x436', '\a', '\x93', '\x2', '\x2', '\x433', '\x435', '\a', '\x85', '\x2', 
		'\x2', '\x434', '\x433', '\x3', '\x2', '\x2', '\x2', '\x435', '\x438', 
		'\x3', '\x2', '\x2', '\x2', '\x436', '\x434', '\x3', '\x2', '\x2', '\x2', 
		'\x436', '\x437', '\x3', '\x2', '\x2', '\x2', '\x437', '\x439', '\x3', 
		'\x2', '\x2', '\x2', '\x438', '\x436', '\x3', '\x2', '\x2', '\x2', '\x439', 
		'\x43A', '\a', '\x94', '\x2', '\x2', '\x43A', 'q', '\x3', '\x2', '\x2', 
		'\x2', '\x43B', '\x440', '\x5', '\b', '\x5', '\x2', '\x43C', '\x43F', 
		'\x5', '\x144', '\xA3', '\x2', '\x43D', '\x43F', '\a', '\x8A', '\x2', 
		'\x2', '\x43E', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x43E', '\x43D', 
		'\x3', '\x2', '\x2', '\x2', '\x43F', '\x442', '\x3', '\x2', '\x2', '\x2', 
		'\x440', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x440', '\x441', '\x3', 
		'\x2', '\x2', '\x2', '\x441', '\x444', '\x3', '\x2', '\x2', '\x2', '\x442', 
		'\x440', '\x3', '\x2', '\x2', '\x2', '\x443', '\x445', '\a', '\x95', '\x2', 
		'\x2', '\x444', '\x443', '\x3', '\x2', '\x2', '\x2', '\x444', '\x445', 
		'\x3', '\x2', '\x2', '\x2', '\x445', '\x447', '\x3', '\x2', '\x2', '\x2', 
		'\x446', '\x448', '\x5', 't', ';', '\x2', '\x447', '\x446', '\x3', '\x2', 
		'\x2', '\x2', '\x447', '\x448', '\x3', '\x2', '\x2', '\x2', '\x448', '\x44A', 
		'\x3', '\x2', '\x2', '\x2', '\x449', '\x44B', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x44A', '\x449', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x44B', 
		'\x3', '\x2', '\x2', '\x2', '\x44B', 's', '\x3', '\x2', '\x2', '\x2', 
		'\x44C', '\x44D', '\a', '~', '\x2', '\x2', '\x44D', '\x452', '\x5', 'v', 
		'<', '\x2', '\x44E', '\x44F', '\a', '\x85', '\x2', '\x2', '\x44F', '\x451', 
		'\x5', 'v', '<', '\x2', '\x450', '\x44E', '\x3', '\x2', '\x2', '\x2', 
		'\x451', '\x454', '\x3', '\x2', '\x2', '\x2', '\x452', '\x450', '\x3', 
		'\x2', '\x2', '\x2', '\x452', '\x453', '\x3', '\x2', '\x2', '\x2', '\x453', 
		'\x455', '\x3', '\x2', '\x2', '\x2', '\x454', '\x452', '\x3', '\x2', '\x2', 
		'\x2', '\x455', '\x456', '\a', '\x7F', '\x2', '\x2', '\x456', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x457', '\x458', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x458', '\x459', '\a', '\x86', '\x2', '\x2', '\x459', '\x45A', '\x5', 
		'\x1E', '\x10', '\x2', '\x45A', 'w', '\x3', '\x2', '\x2', '\x2', '\x45B', 
		'\x45D', '\a', '\x10', '\x2', '\x2', '\x45C', '\x45B', '\x3', '\x2', '\x2', 
		'\x2', '\x45C', '\x45D', '\x3', '\x2', '\x2', '\x2', '\x45D', '\x45E', 
		'\x3', '\x2', '\x2', '\x2', '\x45E', '\x45F', '\x5', 'z', '>', '\x2', 
		'\x45F', '\x460', '\x5', '\x178', '\xBD', '\x2', '\x460', '\x461', '\x5', 
		'\x82', '\x42', '\x2', '\x461', 'y', '\x3', '\x2', '\x2', '\x2', '\x462', 
		'\x463', '\a', '\x82', '\x2', '\x2', '\x463', '\x46E', '\a', '\x83', '\x2', 
		'\x2', '\x464', '\x465', '\a', '\x82', '\x2', '\x2', '\x465', '\x466', 
		'\x5', '|', '?', '\x2', '\x466', '\x467', '\a', '\x83', '\x2', '\x2', 
		'\x467', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x468', '\x469', '\a', 
		'\x82', '\x2', '\x2', '\x469', '\x46A', '\x5', '\x80', '\x41', '\x2', 
		'\x46A', '\x46B', '\a', '\x83', '\x2', '\x2', '\x46B', '\x46E', '\x3', 
		'\x2', '\x2', '\x2', '\x46C', '\x46E', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x46D', '\x462', '\x3', '\x2', '\x2', '\x2', '\x46D', '\x464', '\x3', 
		'\x2', '\x2', '\x2', '\x46D', '\x468', '\x3', '\x2', '\x2', '\x2', '\x46D', 
		'\x46C', '\x3', '\x2', '\x2', '\x2', '\x46E', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x46F', '\x474', '\x5', '~', '@', '\x2', '\x470', '\x471', '\a', 
		'\x85', '\x2', '\x2', '\x471', '\x473', '\x5', '~', '@', '\x2', '\x472', 
		'\x470', '\x3', '\x2', '\x2', '\x2', '\x473', '\x476', '\x3', '\x2', '\x2', 
		'\x2', '\x474', '\x472', '\x3', '\x2', '\x2', '\x2', '\x474', '\x475', 
		'\x3', '\x2', '\x2', '\x2', '\x475', '}', '\x3', '\x2', '\x2', '\x2', 
		'\x476', '\x474', '\x3', '\x2', '\x2', '\x2', '\x477', '\x479', '\t', 
		'\x4', '\x2', '\x2', '\x478', '\x477', '\x3', '\x2', '\x2', '\x2', '\x478', 
		'\x479', '\x3', '\x2', '\x2', '\x2', '\x479', '\x47A', '\x3', '\x2', '\x2', 
		'\x2', '\x47A', '\x47B', '\x5', '\x6', '\x4', '\x2', '\x47B', '\x47C', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x47C', '\x7F', '\x3', '\x2', '\x2', '\x2', 
		'\x47D', '\x482', '\x5', '\x1B4', '\xDB', '\x2', '\x47E', '\x47F', '\a', 
		'\x85', '\x2', '\x2', '\x47F', '\x481', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x480', '\x47E', '\x3', '\x2', '\x2', '\x2', '\x481', '\x484', '\x3', 
		'\x2', '\x2', '\x2', '\x482', '\x480', '\x3', '\x2', '\x2', '\x2', '\x482', 
		'\x483', '\x3', '\x2', '\x2', '\x2', '\x483', '\x81', '\x3', '\x2', '\x2', 
		'\x2', '\x484', '\x482', '\x3', '\x2', '\x2', '\x2', '\x485', '\x488', 
		'\x5', 'L', '\'', '\x2', '\x486', '\x488', '\x5', '\xAC', 'W', '\x2', 
		'\x487', '\x485', '\x3', '\x2', '\x2', '\x2', '\x487', '\x486', '\x3', 
		'\x2', '\x2', '\x2', '\x488', '\x83', '\x3', '\x2', '\x2', '\x2', '\x489', 
		'\x48A', '\x5', '\x86', '\x44', '\x2', '\x48A', '\x48B', '\x5', '\x88', 
		'\x45', '\x2', '\x48B', '\x85', '\x3', '\x2', '\x2', '\x2', '\x48C', '\x48E', 
		'\a', '\x31', '\x2', '\x2', '\x48D', '\x48F', '\x5', '\x6', '\x4', '\x2', 
		'\x48E', '\x48D', '\x3', '\x2', '\x2', '\x2', '\x48E', '\x48F', '\x3', 
		'\x2', '\x2', '\x2', '\x48F', '\x490', '\x3', '\x2', '\x2', '\x2', '\x490', 
		'\x491', '\x5', '\x1B4', '\xDB', '\x2', '\x491', '\x492', '\a', '\x37', 
		'\x2', '\x2', '\x492', '\x493', '\x5', '\x1E', '\x10', '\x2', '\x493', 
		'\x87', '\x3', '\x2', '\x2', '\x2', '\x494', '\x496', '\x5', '\x8A', '\x46', 
		'\x2', '\x495', '\x494', '\x3', '\x2', '\x2', '\x2', '\x496', '\x499', 
		'\x3', '\x2', '\x2', '\x2', '\x497', '\x495', '\x3', '\x2', '\x2', '\x2', 
		'\x497', '\x498', '\x3', '\x2', '\x2', '\x2', '\x498', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x499', '\x497', '\x3', '\x2', '\x2', '\x2', '\x49A', 
		'\x49C', '\x5', '\x96', 'L', '\x2', '\x49B', '\x49D', '\x5', '\x98', 'M', 
		'\x2', '\x49C', '\x49B', '\x3', '\x2', '\x2', '\x2', '\x49C', '\x49D', 
		'\x3', '\x2', '\x2', '\x2', '\x49D', '\x89', '\x3', '\x2', '\x2', '\x2', 
		'\x49E', '\x4A4', '\x5', '\x86', '\x44', '\x2', '\x49F', '\x4A4', '\x5', 
		'\x8C', 'G', '\x2', '\x4A0', '\x4A4', '\x5', '\x8E', 'H', '\x2', '\x4A1', 
		'\x4A4', '\x5', '\x90', 'I', '\x2', '\x4A2', '\x4A4', '\x5', '\x92', 'J', 
		'\x2', '\x4A3', '\x49E', '\x3', '\x2', '\x2', '\x2', '\x4A3', '\x49F', 
		'\x3', '\x2', '\x2', '\x2', '\x4A3', '\x4A0', '\x3', '\x2', '\x2', '\x2', 
		'\x4A3', '\x4A1', '\x3', '\x2', '\x2', '\x2', '\x4A3', '\x4A2', '\x3', 
		'\x2', '\x2', '\x2', '\x4A4', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x4A5', 
		'\x4A6', '\a', '>', '\x2', '\x2', '\x4A6', '\x4A7', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x4A7', '\x4A8', '\a', '\x92', '\x2', '\x2', '\x4A8', '\x4A9', 
		'\x5', '\x1E', '\x10', '\x2', '\x4A9', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x4AA', '\x4AB', '\a', 'p', '\x2', '\x2', '\x4AB', '\x4AC', '\x5', '\x1E', 
		'\x10', '\x2', '\x4AC', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x4AD', '\x4AF', 
		'\a', '=', '\x2', '\x2', '\x4AE', '\x4B0', '\x5', '\x6', '\x4', '\x2', 
		'\x4AF', '\x4AE', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B0', '\x3', 
		'\x2', '\x2', '\x2', '\x4B0', '\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B1', 
		'\x4B2', '\x5', '\x1B4', '\xDB', '\x2', '\x4B2', '\x4B3', '\a', '\x37', 
		'\x2', '\x2', '\x4B3', '\x4B4', '\x5', '\x1E', '\x10', '\x2', '\x4B4', 
		'\x4B5', '\a', '\x46', '\x2', '\x2', '\x4B5', '\x4B6', '\x5', '\x1E', 
		'\x10', '\x2', '\x4B6', '\x4B7', '\a', '\'', '\x2', '\x2', '\x4B7', '\x4BA', 
		'\x5', '\x1E', '\x10', '\x2', '\x4B8', '\x4B9', '\a', ';', '\x2', '\x2', 
		'\x4B9', '\x4BB', '\x5', '\x1B4', '\xDB', '\x2', '\x4BA', '\x4B8', '\x3', 
		'\x2', '\x2', '\x2', '\x4BA', '\x4BB', '\x3', '\x2', '\x2', '\x2', '\x4BB', 
		'\x91', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4BD', '\a', 'H', '\x2', 
		'\x2', '\x4BD', '\x4C2', '\x5', '\x94', 'K', '\x2', '\x4BE', '\x4BF', 
		'\a', '\x85', '\x2', '\x2', '\x4BF', '\x4C1', '\x5', '\x94', 'K', '\x2', 
		'\x4C0', '\x4BE', '\x3', '\x2', '\x2', '\x2', '\x4C1', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4C2', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4C2', 
		'\x4C3', '\x3', '\x2', '\x2', '\x2', '\x4C3', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x4C4', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x4C5', '\x4C7', 
		'\x5', '\x1E', '\x10', '\x2', '\x4C6', '\x4C8', '\t', '\n', '\x2', '\x2', 
		'\x4C7', '\x4C6', '\x3', '\x2', '\x2', '\x2', '\x4C7', '\x4C8', '\x3', 
		'\x2', '\x2', '\x2', '\x4C8', '\x95', '\x3', '\x2', '\x2', '\x2', '\x4C9', 
		'\x4CA', '\a', 'V', '\x2', '\x2', '\x4CA', '\x4D1', '\x5', '\x1E', '\x10', 
		'\x2', '\x4CB', '\x4CC', '\a', '\x34', '\x2', '\x2', '\x4CC', '\x4CD', 
		'\x5', '\x1E', '\x10', '\x2', '\x4CD', '\x4CE', '\a', '\x15', '\x2', '\x2', 
		'\x4CE', '\x4CF', '\x5', '\x1E', '\x10', '\x2', '\x4CF', '\x4D1', '\x3', 
		'\x2', '\x2', '\x2', '\x4D0', '\x4C9', '\x3', '\x2', '\x2', '\x2', '\x4D0', 
		'\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x97', '\x3', '\x2', '\x2', 
		'\x2', '\x4D2', '\x4D3', '\a', ';', '\x2', '\x2', '\x4D3', '\x4D4', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x4D4', '\x4D5', '\x5', '\x88', '\x45', '\x2', 
		'\x4D5', '\x99', '\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4DA', '\x5', 
		'\xA6', 'T', '\x2', '\x4D7', '\x4DA', '\x5', '\x9C', 'O', '\x2', '\x4D8', 
		'\x4DA', '\x5', '\xA8', 'U', '\x2', '\x4D9', '\x4D6', '\x3', '\x2', '\x2', 
		'\x2', '\x4D9', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D9', '\x4D8', 
		'\x3', '\x2', '\x2', '\x2', '\x4DA', '\x9B', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4DC', '\x5', '\xAE', 'X', '\x2', '\x4DC', '\x4DD', '\a', '\x87', 
		'\x2', '\x2', '\x4DD', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4DE', '\x4DF', 
		'\x5', '\xB6', '\\', '\x2', '\x4DF', '\x4E0', '\a', '\x87', '\x2', '\x2', 
		'\x4E0', '\x4E3', '\x3', '\x2', '\x2', '\x2', '\x4E1', '\x4E3', '\x5', 
		'\x9E', 'P', '\x2', '\x4E2', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x4E2', 
		'\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', 
		'\x2', '\x4E3', '\x9D', '\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4E5', 
		'\x5', '\xA0', 'Q', '\x2', '\x4E5', '\x4E6', '\x5', '\xA4', 'S', '\x2', 
		'\x4E6', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x4E7', '\x4E9', '\x5', 
		'\xA2', 'R', '\x2', '\x4E8', '\x4E7', '\x3', '\x2', '\x2', '\x2', '\x4E8', 
		'\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4EA', '\x3', '\x2', '\x2', 
		'\x2', '\x4EA', '\x4EB', '\x5', '\x114', '\x8B', '\x2', '\x4EB', '\x4ED', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x4EC', '\x4EE', '\x5', '\xE8', 'u', '\x2', 
		'\x4ED', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EE', '\x3', 
		'\x2', '\x2', '\x2', '\x4EE', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4EF', 
		'\x4F1', '\a', '\x82', '\x2', '\x2', '\x4F0', '\x4F2', '\x5', '\x11A', 
		'\x8E', '\x2', '\x4F1', '\x4F0', '\x3', '\x2', '\x2', '\x2', '\x4F1', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F3', '\x3', '\x2', '\x2', 
		'\x2', '\x4F3', '\x4F5', '\a', '\x83', '\x2', '\x2', '\x4F4', '\x4F6', 
		'\x5', '\xF0', 'y', '\x2', '\x4F5', '\x4F4', '\x3', '\x2', '\x2', '\x2', 
		'\x4F5', '\x4F6', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\xA1', '\x3', 
		'\x2', '\x2', '\x2', '\x4F7', '\x4F9', '\t', '\v', '\x2', '\x2', '\x4F8', 
		'\x4FA', '\a', '[', '\x2', '\x2', '\x4F9', '\x4F8', '\x3', '\x2', '\x2', 
		'\x2', '\x4F9', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\a', '[', '\x2', '\x2', 
		'\x4FC', '\x4FE', '\t', '\v', '\x2', '\x2', '\x4FD', '\x4F7', '\x3', '\x2', 
		'\x2', '\x2', '\x4FD', '\x4FB', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\xA3', 
		'\x3', '\x2', '\x2', '\x2', '\x4FF', '\x505', '\x5', '\xAC', 'W', '\x2', 
		'\x500', '\x501', '\x5', '\x178', '\xBD', '\x2', '\x501', '\x502', '\x5', 
		'L', '\'', '\x2', '\x502', '\x503', '\a', '\x87', '\x2', '\x2', '\x503', 
		'\x505', '\x3', '\x2', '\x2', '\x2', '\x504', '\x4FF', '\x3', '\x2', '\x2', 
		'\x2', '\x504', '\x500', '\x3', '\x2', '\x2', '\x2', '\x505', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x506', '\x507', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x507', '\x508', '\a', '\x86', '\x2', '\x2', '\x508', '\x509', 
		'\x5', '\x9A', 'N', '\x2', '\x509', '\xA7', '\x3', '\x2', '\x2', '\x2', 
		'\x50A', '\x50D', '\x5', '\xAC', 'W', '\x2', '\x50B', '\x50D', '\x5', 
		'\xAA', 'V', '\x2', '\x50C', '\x50A', '\x3', '\x2', '\x2', '\x2', '\x50C', 
		'\x50B', '\x3', '\x2', '\x2', '\x2', '\x50D', '\xA9', '\x3', '\x2', '\x2', 
		'\x2', '\x50E', '\x591', '\a', '\x87', '\x2', '\x2', '\x50F', '\x510', 
		'\x5', '\x1E', '\x10', '\x2', '\x510', '\x511', '\a', '\x87', '\x2', '\x2', 
		'\x511', '\x591', '\x3', '\x2', '\x2', '\x2', '\x512', '\x513', '\a', 
		'\x35', '\x2', '\x2', '\x513', '\x514', '\a', '\x82', '\x2', '\x2', '\x514', 
		'\x515', '\x5', '\x1E', '\x10', '\x2', '\x515', '\x516', '\a', '\x83', 
		'\x2', '\x2', '\x516', '\x519', '\x5', '\xB8', ']', '\x2', '\x517', '\x518', 
		'\a', '%', '\x2', '\x2', '\x518', '\x51A', '\x5', '\xB8', ']', '\x2', 
		'\x519', '\x517', '\x3', '\x2', '\x2', '\x2', '\x519', '\x51A', '\x3', 
		'\x2', '\x2', '\x2', '\x51A', '\x591', '\x3', '\x2', '\x2', '\x2', '\x51B', 
		'\x51C', '\a', '^', '\x2', '\x2', '\x51C', '\x51D', '\a', '\x82', '\x2', 
		'\x2', '\x51D', '\x51E', '\x5', '\x1E', '\x10', '\x2', '\x51E', '\x51F', 
		'\a', '\x83', '\x2', '\x2', '\x51F', '\x523', '\a', '~', '\x2', '\x2', 
		'\x520', '\x522', '\x5', '\xBA', '^', '\x2', '\x521', '\x520', '\x3', 
		'\x2', '\x2', '\x2', '\x522', '\x525', '\x3', '\x2', '\x2', '\x2', '\x523', 
		'\x521', '\x3', '\x2', '\x2', '\x2', '\x523', '\x524', '\x3', '\x2', '\x2', 
		'\x2', '\x524', '\x526', '\x3', '\x2', '\x2', '\x2', '\x525', '\x523', 
		'\x3', '\x2', '\x2', '\x2', '\x526', '\x527', '\a', '\x7F', '\x2', '\x2', 
		'\x527', '\x591', '\x3', '\x2', '\x2', '\x2', '\x528', '\x529', '\a', 
		'q', '\x2', '\x2', '\x529', '\x52A', '\a', '\x82', '\x2', '\x2', '\x52A', 
		'\x52B', '\x5', '\x1E', '\x10', '\x2', '\x52B', '\x52C', '\a', '\x83', 
		'\x2', '\x2', '\x52C', '\x52D', '\x5', '\xA8', 'U', '\x2', '\x52D', '\x591', 
		'\x3', '\x2', '\x2', '\x2', '\x52E', '\x52F', '\a', '\"', '\x2', '\x2', 
		'\x52F', '\x530', '\x5', '\xA8', 'U', '\x2', '\x530', '\x531', '\a', 'q', 
		'\x2', '\x2', '\x531', '\x532', '\a', '\x82', '\x2', '\x2', '\x532', '\x533', 
		'\x5', '\x1E', '\x10', '\x2', '\x533', '\x534', '\a', '\x83', '\x2', '\x2', 
		'\x534', '\x535', '\a', '\x87', '\x2', '\x2', '\x535', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x536', '\x537', '\a', '/', '\x2', '\x2', '\x537', 
		'\x539', '\a', '\x82', '\x2', '\x2', '\x538', '\x53A', '\x5', '\xC2', 
		'\x62', '\x2', '\x539', '\x538', '\x3', '\x2', '\x2', '\x2', '\x539', 
		'\x53A', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x53B', '\x3', '\x2', '\x2', 
		'\x2', '\x53B', '\x53D', '\a', '\x87', '\x2', '\x2', '\x53C', '\x53E', 
		'\x5', '\x1E', '\x10', '\x2', '\x53D', '\x53C', '\x3', '\x2', '\x2', '\x2', 
		'\x53D', '\x53E', '\x3', '\x2', '\x2', '\x2', '\x53E', '\x53F', '\x3', 
		'\x2', '\x2', '\x2', '\x53F', '\x541', '\a', '\x87', '\x2', '\x2', '\x540', 
		'\x542', '\x5', '\xC4', '\x63', '\x2', '\x541', '\x540', '\x3', '\x2', 
		'\x2', '\x2', '\x541', '\x542', '\x3', '\x2', '\x2', '\x2', '\x542', '\x543', 
		'\x3', '\x2', '\x2', '\x2', '\x543', '\x544', '\a', '\x83', '\x2', '\x2', 
		'\x544', '\x591', '\x5', '\xA8', 'U', '\x2', '\x545', '\x547', '\a', '\x11', 
		'\x2', '\x2', '\x546', '\x545', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', 
		'\x3', '\x2', '\x2', '\x2', '\x547', '\x548', '\x3', '\x2', '\x2', '\x2', 
		'\x548', '\x549', '\a', '\x30', '\x2', '\x2', '\x549', '\x54A', '\a', 
		'\x82', '\x2', '\x2', '\x54A', '\x54B', '\x5', '\xB0', 'Y', '\x2', '\x54B', 
		'\x54C', '\x5', '\x1B4', '\xDB', '\x2', '\x54C', '\x54D', '\a', '\x37', 
		'\x2', '\x2', '\x54D', '\x54E', '\x5', '\x1E', '\x10', '\x2', '\x54E', 
		'\x54F', '\a', '\x83', '\x2', '\x2', '\x54F', '\x550', '\x5', '\xA8', 
		'U', '\x2', '\x550', '\x591', '\x3', '\x2', '\x2', '\x2', '\x551', '\x552', 
		'\a', '\x14', '\x2', '\x2', '\x552', '\x591', '\a', '\x87', '\x2', '\x2', 
		'\x553', '\x554', '\a', '\x1D', '\x2', '\x2', '\x554', '\x591', '\a', 
		'\x87', '\x2', '\x2', '\x555', '\x55A', '\a', '\x33', '\x2', '\x2', '\x556', 
		'\x55B', '\x5', '\x1B4', '\xDB', '\x2', '\x557', '\x558', '\a', '\x17', 
		'\x2', '\x2', '\x558', '\x55B', '\x5', '\x1E', '\x10', '\x2', '\x559', 
		'\x55B', '\a', '\x1F', '\x2', '\x2', '\x55A', '\x556', '\x3', '\x2', '\x2', 
		'\x2', '\x55A', '\x557', '\x3', '\x2', '\x2', '\x2', '\x55A', '\x559', 
		'\x3', '\x2', '\x2', '\x2', '\x55B', '\x55C', '\x3', '\x2', '\x2', '\x2', 
		'\x55C', '\x591', '\a', '\x87', '\x2', '\x2', '\x55D', '\x55F', '\a', 
		'S', '\x2', '\x2', '\x55E', '\x560', '\x5', '\x1E', '\x10', '\x2', '\x55F', 
		'\x55E', '\x3', '\x2', '\x2', '\x2', '\x55F', '\x560', '\x3', '\x2', '\x2', 
		'\x2', '\x560', '\x561', '\x3', '\x2', '\x2', '\x2', '\x561', '\x591', 
		'\a', '\x87', '\x2', '\x2', '\x562', '\x564', '\a', '`', '\x2', '\x2', 
		'\x563', '\x565', '\x5', '\x1E', '\x10', '\x2', '\x564', '\x563', '\x3', 
		'\x2', '\x2', '\x2', '\x564', '\x565', '\x3', '\x2', '\x2', '\x2', '\x565', 
		'\x566', '\x3', '\x2', '\x2', '\x2', '\x566', '\x591', '\a', '\x87', '\x2', 
		'\x2', '\x567', '\x568', '\a', '\x62', '\x2', '\x2', '\x568', '\x56E', 
		'\x5', '\xAC', 'W', '\x2', '\x569', '\x56B', '\x5', '\xC6', '\x64', '\x2', 
		'\x56A', '\x56C', '\x5', '\xCE', 'h', '\x2', '\x56B', '\x56A', '\x3', 
		'\x2', '\x2', '\x2', '\x56B', '\x56C', '\x3', '\x2', '\x2', '\x2', '\x56C', 
		'\x56F', '\x3', '\x2', '\x2', '\x2', '\x56D', '\x56F', '\x5', '\xCE', 
		'h', '\x2', '\x56E', '\x569', '\x3', '\x2', '\x2', '\x2', '\x56E', '\x56D', 
		'\x3', '\x2', '\x2', '\x2', '\x56F', '\x591', '\x3', '\x2', '\x2', '\x2', 
		'\x570', '\x571', '\a', '\x1A', '\x2', '\x2', '\x571', '\x591', '\x5', 
		'\xAC', 'W', '\x2', '\x572', '\x573', '\a', '\x66', '\x2', '\x2', '\x573', 
		'\x591', '\x5', '\xAC', 'W', '\x2', '\x574', '\x575', '\a', '?', '\x2', 
		'\x2', '\x575', '\x576', '\a', '\x82', '\x2', '\x2', '\x576', '\x577', 
		'\x5', '\x1E', '\x10', '\x2', '\x577', '\x578', '\a', '\x83', '\x2', '\x2', 
		'\x578', '\x579', '\x5', '\xA8', 'U', '\x2', '\x579', '\x591', '\x3', 
		'\x2', '\x2', '\x2', '\x57A', '\x57B', '\a', 'j', '\x2', '\x2', '\x57B', 
		'\x57C', '\a', '\x82', '\x2', '\x2', '\x57C', '\x57D', '\x5', '\xD0', 
		'i', '\x2', '\x57D', '\x57E', '\a', '\x83', '\x2', '\x2', '\x57E', '\x57F', 
		'\x5', '\xA8', 'U', '\x2', '\x57F', '\x591', '\x3', '\x2', '\x2', '\x2', 
		'\x580', '\x584', '\a', 'r', '\x2', '\x2', '\x581', '\x582', '\a', 'S', 
		'\x2', '\x2', '\x582', '\x585', '\x5', '\x1E', '\x10', '\x2', '\x583', 
		'\x585', '\a', '\x14', '\x2', '\x2', '\x584', '\x581', '\x3', '\x2', '\x2', 
		'\x2', '\x584', '\x583', '\x3', '\x2', '\x2', '\x2', '\x585', '\x586', 
		'\x3', '\x2', '\x2', '\x2', '\x586', '\x591', '\a', '\x87', '\x2', '\x2', 
		'\x587', '\x588', '\a', 'h', '\x2', '\x2', '\x588', '\x591', '\x5', '\xAC', 
		'W', '\x2', '\x589', '\x58A', '\a', '-', '\x2', '\x2', '\x58A', '\x58B', 
		'\a', '\x82', '\x2', '\x2', '\x58B', '\x58C', '\x5', '\x16C', '\xB7', 
		'\x2', '\x58C', '\x58D', '\x5', '\x16E', '\xB8', '\x2', '\x58D', '\x58E', 
		'\a', '\x83', '\x2', '\x2', '\x58E', '\x58F', '\x5', '\xA8', 'U', '\x2', 
		'\x58F', '\x591', '\x3', '\x2', '\x2', '\x2', '\x590', '\x50E', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x512', '\x3', '\x2', '\x2', '\x2', '\x590', '\x51B', '\x3', '\x2', '\x2', 
		'\x2', '\x590', '\x528', '\x3', '\x2', '\x2', '\x2', '\x590', '\x52E', 
		'\x3', '\x2', '\x2', '\x2', '\x590', '\x536', '\x3', '\x2', '\x2', '\x2', 
		'\x590', '\x546', '\x3', '\x2', '\x2', '\x2', '\x590', '\x551', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x553', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x555', '\x3', '\x2', '\x2', '\x2', '\x590', '\x55D', '\x3', '\x2', '\x2', 
		'\x2', '\x590', '\x562', '\x3', '\x2', '\x2', '\x2', '\x590', '\x567', 
		'\x3', '\x2', '\x2', '\x2', '\x590', '\x570', '\x3', '\x2', '\x2', '\x2', 
		'\x590', '\x572', '\x3', '\x2', '\x2', '\x2', '\x590', '\x574', '\x3', 
		'\x2', '\x2', '\x2', '\x590', '\x57A', '\x3', '\x2', '\x2', '\x2', '\x590', 
		'\x580', '\x3', '\x2', '\x2', '\x2', '\x590', '\x587', '\x3', '\x2', '\x2', 
		'\x2', '\x590', '\x589', '\x3', '\x2', '\x2', '\x2', '\x591', '\xAB', 
		'\x3', '\x2', '\x2', '\x2', '\x592', '\x594', '\a', '~', '\x2', '\x2', 
		'\x593', '\x595', '\x5', '\xC0', '\x61', '\x2', '\x594', '\x593', '\x3', 
		'\x2', '\x2', '\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', '\x595', 
		'\x596', '\x3', '\x2', '\x2', '\x2', '\x596', '\x597', '\a', '\x7F', '\x2', 
		'\x2', '\x597', '\xAD', '\x3', '\x2', '\x2', '\x2', '\x598', '\x59D', 
		'\a', 'j', '\x2', '\x2', '\x599', '\x59D', '\a', 'Q', '\x2', '\x2', '\x59A', 
		'\x59B', '\a', 'Q', '\x2', '\x2', '\x59B', '\x59D', '\a', 'P', '\x2', 
		'\x2', '\x59C', '\x598', '\x3', '\x2', '\x2', '\x2', '\x59C', '\x599', 
		'\x3', '\x2', '\x2', '\x2', '\x59C', '\x59A', '\x3', '\x2', '\x2', '\x2', 
		'\x59C', '\x59D', '\x3', '\x2', '\x2', '\x2', '\x59D', '\x59E', '\x3', 
		'\x2', '\x2', '\x2', '\x59E', '\x59F', '\x5', '\xB0', 'Y', '\x2', '\x59F', 
		'\x5A4', '\x5', '\xB2', 'Z', '\x2', '\x5A0', '\x5A1', '\a', '\x85', '\x2', 
		'\x2', '\x5A1', '\x5A3', '\x5', '\xB2', 'Z', '\x2', '\x5A2', '\x5A0', 
		'\x3', '\x2', '\x2', '\x2', '\x5A3', '\x5A6', '\x3', '\x2', '\x2', '\x2', 
		'\x5A4', '\x5A2', '\x3', '\x2', '\x2', '\x2', '\x5A4', '\x5A5', '\x3', 
		'\x2', '\x2', '\x2', '\x5A5', '\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5A6', 
		'\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A7', '\x5A8', '\a', '-', '\x2', 
		'\x2', '\x5A8', '\x5A9', '\x5', '\x16C', '\xB7', '\x2', '\x5A9', '\x5AA', 
		'\x5', '\x16E', '\xB8', '\x2', '\x5AA', '\x5AC', '\x3', '\x2', '\x2', 
		'\x2', '\x5AB', '\x59C', '\x3', '\x2', '\x2', '\x2', '\x5AB', '\x5A7', 
		'\x3', '\x2', '\x2', '\x2', '\x5AC', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x5AD', '\x5B0', '\a', 'k', '\x2', '\x2', '\x5AE', '\x5B0', '\x5', '\x6', 
		'\x4', '\x2', '\x5AF', '\x5AD', '\x3', '\x2', '\x2', '\x2', '\x5AF', '\x5AE', 
		'\x3', '\x2', '\x2', '\x2', '\x5B0', '\xB1', '\x3', '\x2', '\x2', '\x2', 
		'\x5B1', '\x5B7', '\x5', '\x1B4', '\xDB', '\x2', '\x5B2', '\x5B4', '\a', 
		'\x92', '\x2', '\x2', '\x5B3', '\x5B5', '\a', 'Q', '\x2', '\x2', '\x5B4', 
		'\x5B3', '\x3', '\x2', '\x2', '\x2', '\x5B4', '\x5B5', '\x3', '\x2', '\x2', 
		'\x2', '\x5B5', '\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5B6', '\x5B8', 
		'\x5', '\xB4', '[', '\x2', '\x5B7', '\x5B2', '\x3', '\x2', '\x2', '\x2', 
		'\x5B7', '\x5B8', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x5B9', '\x5BD', '\x5', '\x1E', '\x10', '\x2', '\x5BA', 
		'\x5BD', '\x5', '\x146', '\xA4', '\x2', '\x5BB', '\x5BD', '\x5', '\x176', 
		'\xBC', '\x2', '\x5BC', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\x5BC', 
		'\x5BA', '\x3', '\x2', '\x2', '\x2', '\x5BC', '\x5BB', '\x3', '\x2', '\x2', 
		'\x2', '\x5BD', '\xB5', '\x3', '\x2', '\x2', '\x2', '\x5BE', '\x5BF', 
		'\a', '\x1C', '\x2', '\x2', '\x5BF', '\x5C0', '\x5', '\x6', '\x4', '\x2', 
		'\x5C0', '\x5C1', '\x5', '\x10A', '\x86', '\x2', '\x5C1', '\xB7', '\x3', 
		'\x2', '\x2', '\x2', '\x5C2', '\x5C5', '\x5', '\xAC', 'W', '\x2', '\x5C3', 
		'\x5C5', '\x5', '\xAA', 'V', '\x2', '\x5C4', '\x5C2', '\x3', '\x2', '\x2', 
		'\x2', '\x5C4', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C5', '\xB9', 
		'\x3', '\x2', '\x2', '\x2', '\x5C6', '\x5C8', '\x5', '\xBC', '_', '\x2', 
		'\x5C7', '\x5C6', '\x3', '\x2', '\x2', '\x2', '\x5C8', '\x5C9', '\x3', 
		'\x2', '\x2', '\x2', '\x5C9', '\x5C7', '\x3', '\x2', '\x2', '\x2', '\x5C9', 
		'\x5CA', '\x3', '\x2', '\x2', '\x2', '\x5CA', '\x5CB', '\x3', '\x2', '\x2', 
		'\x2', '\x5CB', '\x5CC', '\x5', '\xC0', '\x61', '\x2', '\x5CC', '\xBB', 
		'\x3', '\x2', '\x2', '\x2', '\x5CD', '\x5CE', '\a', '\x17', '\x2', '\x2', 
		'\x5CE', '\x5D0', '\x5', '\x1E', '\x10', '\x2', '\x5CF', '\x5D1', '\x5', 
		'\xBE', '`', '\x2', '\x5D0', '\x5CF', '\x3', '\x2', '\x2', '\x2', '\x5D0', 
		'\x5D1', '\x3', '\x2', '\x2', '\x2', '\x5D1', '\x5D2', '\x3', '\x2', '\x2', 
		'\x2', '\x5D2', '\x5D3', '\a', '\x86', '\x2', '\x2', '\x5D3', '\x5D7', 
		'\x3', '\x2', '\x2', '\x2', '\x5D4', '\x5D5', '\a', '\x1F', '\x2', '\x2', 
		'\x5D5', '\x5D7', '\a', '\x86', '\x2', '\x2', '\x5D6', '\x5CD', '\x3', 
		'\x2', '\x2', '\x2', '\x5D6', '\x5D4', '\x3', '\x2', '\x2', '\x2', '\x5D7', 
		'\xBD', '\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D9', '\a', 'o', '\x2', 
		'\x2', '\x5D9', '\x5DA', '\x5', '\x1E', '\x10', '\x2', '\x5DA', '\xBF', 
		'\x3', '\x2', '\x2', '\x2', '\x5DB', '\x5DD', '\x5', '\x9A', 'N', '\x2', 
		'\x5DC', '\x5DB', '\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DE', '\x3', 
		'\x2', '\x2', '\x2', '\x5DE', '\x5DC', '\x3', '\x2', '\x2', '\x2', '\x5DE', 
		'\x5DF', '\x3', '\x2', '\x2', '\x2', '\x5DF', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\x5E0', '\x5EA', '\x5', '\xAE', 'X', '\x2', '\x5E1', '\x5E6', 
		'\x5', '\x1E', '\x10', '\x2', '\x5E2', '\x5E3', '\a', '\x85', '\x2', '\x2', 
		'\x5E3', '\x5E5', '\x5', '\x1E', '\x10', '\x2', '\x5E4', '\x5E2', '\x3', 
		'\x2', '\x2', '\x2', '\x5E5', '\x5E8', '\x3', '\x2', '\x2', '\x2', '\x5E6', 
		'\x5E4', '\x3', '\x2', '\x2', '\x2', '\x5E6', '\x5E7', '\x3', '\x2', '\x2', 
		'\x2', '\x5E7', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5E6', 
		'\x3', '\x2', '\x2', '\x2', '\x5E9', '\x5E0', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5E1', '\x3', '\x2', '\x2', '\x2', '\x5EA', '\xC3', '\x3', 
		'\x2', '\x2', '\x2', '\x5EB', '\x5F0', '\x5', '\x1E', '\x10', '\x2', '\x5EC', 
		'\x5ED', '\a', '\x85', '\x2', '\x2', '\x5ED', '\x5EF', '\x5', '\x1E', 
		'\x10', '\x2', '\x5EE', '\x5EC', '\x3', '\x2', '\x2', '\x2', '\x5EF', 
		'\x5F2', '\x3', '\x2', '\x2', '\x2', '\x5F0', '\x5EE', '\x3', '\x2', '\x2', 
		'\x2', '\x5F0', '\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x5F2', '\x5F0', '\x3', '\x2', '\x2', '\x2', 
		'\x5F3', '\x5F7', '\x5', '\xC8', '\x65', '\x2', '\x5F4', '\x5F6', '\x5', 
		'\xC8', '\x65', '\x2', '\x5F5', '\x5F4', '\x3', '\x2', '\x2', '\x2', '\x5F6', 
		'\x5F9', '\x3', '\x2', '\x2', '\x2', '\x5F7', '\x5F5', '\x3', '\x2', '\x2', 
		'\x2', '\x5F7', '\x5F8', '\x3', '\x2', '\x2', '\x2', '\x5F8', '\x5FB', 
		'\x3', '\x2', '\x2', '\x2', '\x5F9', '\x5F7', '\x3', '\x2', '\x2', '\x2', 
		'\x5FA', '\x5FC', '\x5', '\xCA', '\x66', '\x2', '\x5FB', '\x5FA', '\x3', 
		'\x2', '\x2', '\x2', '\x5FB', '\x5FC', '\x3', '\x2', '\x2', '\x2', '\x5FC', 
		'\x5FF', '\x3', '\x2', '\x2', '\x2', '\x5FD', '\x5FF', '\x5', '\xCA', 
		'\x66', '\x2', '\x5FE', '\x5F3', '\x3', '\x2', '\x2', '\x2', '\x5FE', 
		'\x5FD', '\x3', '\x2', '\x2', '\x2', '\x5FF', '\xC7', '\x3', '\x2', '\x2', 
		'\x2', '\x600', '\x601', '\a', '\x18', '\x2', '\x2', '\x601', '\x602', 
		'\a', '\x82', '\x2', '\x2', '\x602', '\x604', '\x5', '\x16', '\f', '\x2', 
		'\x603', '\x605', '\x5', '\x1B4', '\xDB', '\x2', '\x604', '\x603', '\x3', 
		'\x2', '\x2', '\x2', '\x604', '\x605', '\x3', '\x2', '\x2', '\x2', '\x605', 
		'\x606', '\x3', '\x2', '\x2', '\x2', '\x606', '\x608', '\a', '\x83', '\x2', 
		'\x2', '\x607', '\x609', '\x5', '\xCC', 'g', '\x2', '\x608', '\x607', 
		'\x3', '\x2', '\x2', '\x2', '\x608', '\x609', '\x3', '\x2', '\x2', '\x2', 
		'\x609', '\x60A', '\x3', '\x2', '\x2', '\x2', '\x60A', '\x60B', '\x5', 
		'\xAC', 'W', '\x2', '\x60B', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x60C', 
		'\x60E', '\a', '\x18', '\x2', '\x2', '\x60D', '\x60F', '\x5', '\xCC', 
		'g', '\x2', '\x60E', '\x60D', '\x3', '\x2', '\x2', '\x2', '\x60E', '\x60F', 
		'\x3', '\x2', '\x2', '\x2', '\x60F', '\x610', '\x3', '\x2', '\x2', '\x2', 
		'\x610', '\x611', '\x5', '\xAC', 'W', '\x2', '\x611', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x612', '\x613', '\a', 'o', '\x2', '\x2', '\x613', '\x614', 
		'\a', '\x82', '\x2', '\x2', '\x614', '\x615', '\x5', '\x1E', '\x10', '\x2', 
		'\x615', '\x616', '\a', '\x83', '\x2', '\x2', '\x616', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x617', '\x618', '\a', ',', '\x2', '\x2', '\x618', 
		'\x619', '\x5', '\xAC', 'W', '\x2', '\x619', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\x61A', '\x61D', '\x5', '\xAE', 'X', '\x2', '\x61B', '\x61D', 
		'\x5', '\x1E', '\x10', '\x2', '\x61C', '\x61A', '\x3', '\x2', '\x2', '\x2', 
		'\x61C', '\x61B', '\x3', '\x2', '\x2', '\x2', '\x61D', '\xD1', '\x3', 
		'\x2', '\x2', '\x2', '\x61E', '\x61F', '\a', '\x42', '\x2', '\x2', '\x61F', 
		'\x620', '\x5', '\xD4', 'k', '\x2', '\x620', '\x622', '\x5', '\xD6', 'l', 
		'\x2', '\x621', '\x623', '\a', '\x87', '\x2', '\x2', '\x622', '\x621', 
		'\x3', '\x2', '\x2', '\x2', '\x622', '\x623', '\x3', '\x2', '\x2', '\x2', 
		'\x623', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x624', '\x629', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x625', '\x626', '\a', '\x84', '\x2', '\x2', 
		'\x626', '\x628', '\x5', '\x1B4', '\xDB', '\x2', '\x627', '\x625', '\x3', 
		'\x2', '\x2', '\x2', '\x628', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x629', 
		'\x627', '\x3', '\x2', '\x2', '\x2', '\x629', '\x62A', '\x3', '\x2', '\x2', 
		'\x2', '\x62A', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x62B', '\x629', 
		'\x3', '\x2', '\x2', '\x2', '\x62C', '\x62E', '\a', '~', '\x2', '\x2', 
		'\x62D', '\x62F', '\x5', '\xD8', 'm', '\x2', '\x62E', '\x62D', '\x3', 
		'\x2', '\x2', '\x2', '\x62E', '\x62F', '\x3', '\x2', '\x2', '\x2', '\x62F', 
		'\x631', '\x3', '\x2', '\x2', '\x2', '\x630', '\x632', '\x5', '\xDC', 
		'o', '\x2', '\x631', '\x630', '\x3', '\x2', '\x2', '\x2', '\x631', '\x632', 
		'\x3', '\x2', '\x2', '\x2', '\x632', '\x634', '\x3', '\x2', '\x2', '\x2', 
		'\x633', '\x635', '\x5', '\xE0', 'q', '\x2', '\x634', '\x633', '\x3', 
		'\x2', '\x2', '\x2', '\x634', '\x635', '\x3', '\x2', '\x2', '\x2', '\x635', 
		'\x636', '\x3', '\x2', '\x2', '\x2', '\x636', '\x637', '\a', '\x7F', '\x2', 
		'\x2', '\x637', '\xD7', '\x3', '\x2', '\x2', '\x2', '\x638', '\x63A', 
		'\x5', '\xDA', 'n', '\x2', '\x639', '\x638', '\x3', '\x2', '\x2', '\x2', 
		'\x63A', '\x63B', '\x3', '\x2', '\x2', '\x2', '\x63B', '\x639', '\x3', 
		'\x2', '\x2', '\x2', '\x63B', '\x63C', '\x3', '\x2', '\x2', '\x2', '\x63C', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x63D', '\x63E', '\a', '*', '\x2', 
		'\x2', '\x63E', '\x63F', '\a', '\f', '\x2', '\x2', '\x63F', '\x640', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x640', '\x641', '\a', '\x87', '\x2', '\x2', 
		'\x641', '\xDB', '\x3', '\x2', '\x2', '\x2', '\x642', '\x644', '\x5', 
		'\xDE', 'p', '\x2', '\x643', '\x642', '\x3', '\x2', '\x2', '\x2', '\x644', 
		'\x645', '\x3', '\x2', '\x2', '\x2', '\x645', '\x643', '\x3', '\x2', '\x2', 
		'\x2', '\x645', '\x646', '\x3', '\x2', '\x2', '\x2', '\x646', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x647', '\x648', '\a', 'j', '\x2', '\x2', 
		'\x648', '\x649', '\x5', '\x1B4', '\xDB', '\x2', '\x649', '\x64A', '\a', 
		'\x92', '\x2', '\x2', '\x64A', '\x64B', '\x5', '\x4', '\x3', '\x2', '\x64B', 
		'\x64C', '\a', '\x87', '\x2', '\x2', '\x64C', '\x657', '\x3', '\x2', '\x2', 
		'\x2', '\x64D', '\x64E', '\a', 'j', '\x2', '\x2', '\x64E', '\x64F', '\x5', 
		'\x4', '\x3', '\x2', '\x64F', '\x650', '\a', '\x87', '\x2', '\x2', '\x650', 
		'\x657', '\x3', '\x2', '\x2', '\x2', '\x651', '\x652', '\a', 'j', '\x2', 
		'\x2', '\x652', '\x653', '\a', '[', '\x2', '\x2', '\x653', '\x654', '\x5', 
		'\x4', '\x3', '\x2', '\x654', '\x655', '\a', '\x87', '\x2', '\x2', '\x655', 
		'\x657', '\x3', '\x2', '\x2', '\x2', '\x656', '\x647', '\x3', '\x2', '\x2', 
		'\x2', '\x656', '\x64D', '\x3', '\x2', '\x2', '\x2', '\x656', '\x651', 
		'\x3', '\x2', '\x2', '\x2', '\x657', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\x658', '\x65A', '\x5', '\xE2', 'r', '\x2', '\x659', '\x658', '\x3', 
		'\x2', '\x2', '\x2', '\x65A', '\x65B', '\x3', '\x2', '\x2', '\x2', '\x65B', 
		'\x659', '\x3', '\x2', '\x2', '\x2', '\x65B', '\x65C', '\x3', '\x2', '\x2', 
		'\x2', '\x65C', '\xE1', '\x3', '\x2', '\x2', '\x2', '\x65D', '\x660', 
		'\x5', '\xD2', 'j', '\x2', '\x65E', '\x660', '\x5', '\xE4', 's', '\x2', 
		'\x65F', '\x65D', '\x3', '\x2', '\x2', '\x2', '\x65F', '\x65E', '\x3', 
		'\x2', '\x2', '\x2', '\x660', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x661', 
		'\x663', '\x5', '\x160', '\xB1', '\x2', '\x662', '\x661', '\x3', '\x2', 
		'\x2', '\x2', '\x662', '\x663', '\x3', '\x2', '\x2', '\x2', '\x663', '\x665', 
		'\x3', '\x2', '\x2', '\x2', '\x664', '\x666', '\x5', '\x102', '\x82', 
		'\x2', '\x665', '\x664', '\x3', '\x2', '\x2', '\x2', '\x665', '\x666', 
		'\x3', '\x2', '\x2', '\x2', '\x666', '\x66C', '\x3', '\x2', '\x2', '\x2', 
		'\x667', '\x66D', '\x5', '\x190', '\xC9', '\x2', '\x668', '\x66D', '\x5', 
		'\x192', '\xCA', '\x2', '\x669', '\x66D', '\x5', '\x194', '\xCB', '\x2', 
		'\x66A', '\x66D', '\x5', '\x196', '\xCC', '\x2', '\x66B', '\x66D', '\x5', 
		'\x198', '\xCD', '\x2', '\x66C', '\x667', '\x3', '\x2', '\x2', '\x2', 
		'\x66C', '\x668', '\x3', '\x2', '\x2', '\x2', '\x66C', '\x669', '\x3', 
		'\x2', '\x2', '\x2', '\x66C', '\x66A', '\x3', '\x2', '\x2', '\x2', '\x66C', 
		'\x66B', '\x3', '\x2', '\x2', '\x2', '\x66D', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x66E', '\x66F', '\x5', '\x1B4', '\xDB', '\x2', '\x66F', '\x670', 
		'\a', '\x96', '\x2', '\x2', '\x670', '\x672', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x671', '\x673', '\x5', '\x18', '\r', '\x2', '\x672', '\x671', 
		'\x3', '\x2', '\x2', '\x2', '\x672', '\x673', '\x3', '\x2', '\x2', '\x2', 
		'\x673', '\xE7', '\x3', '\x2', '\x2', '\x2', '\x674', '\x675', '\a', '\x93', 
		'\x2', '\x2', '\x675', '\x67A', '\x5', '\xEA', 'v', '\x2', '\x676', '\x677', 
		'\a', '\x85', '\x2', '\x2', '\x677', '\x679', '\x5', '\xEA', 'v', '\x2', 
		'\x678', '\x676', '\x3', '\x2', '\x2', '\x2', '\x679', '\x67C', '\x3', 
		'\x2', '\x2', '\x2', '\x67A', '\x678', '\x3', '\x2', '\x2', '\x2', '\x67A', 
		'\x67B', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x67D', '\x3', '\x2', '\x2', 
		'\x2', '\x67C', '\x67A', '\x3', '\x2', '\x2', '\x2', '\x67D', '\x67E', 
		'\a', '\x94', '\x2', '\x2', '\x67E', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\x67F', '\x681', '\x5', '\x160', '\xB1', '\x2', '\x680', '\x67F', '\x3', 
		'\x2', '\x2', '\x2', '\x680', '\x681', '\x3', '\x2', '\x2', '\x2', '\x681', 
		'\x682', '\x3', '\x2', '\x2', '\x2', '\x682', '\x683', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x683', '\xEB', '\x3', '\x2', '\x2', '\x2', '\x684', '\x685', 
		'\a', '\x86', '\x2', '\x2', '\x685', '\x68A', '\x5', '\x16', '\f', '\x2', 
		'\x686', '\x687', '\a', '\x85', '\x2', '\x2', '\x687', '\x689', '\x5', 
		'\x4', '\x3', '\x2', '\x688', '\x686', '\x3', '\x2', '\x2', '\x2', '\x689', 
		'\x68C', '\x3', '\x2', '\x2', '\x2', '\x68A', '\x688', '\x3', '\x2', '\x2', 
		'\x2', '\x68A', '\x68B', '\x3', '\x2', '\x2', '\x2', '\x68B', '\xED', 
		'\x3', '\x2', '\x2', '\x2', '\x68C', '\x68A', '\x3', '\x2', '\x2', '\x2', 
		'\x68D', '\x692', '\x5', '\x4', '\x3', '\x2', '\x68E', '\x68F', '\a', 
		'\x85', '\x2', '\x2', '\x68F', '\x691', '\x5', '\x4', '\x3', '\x2', '\x690', 
		'\x68E', '\x3', '\x2', '\x2', '\x2', '\x691', '\x694', '\x3', '\x2', '\x2', 
		'\x2', '\x692', '\x690', '\x3', '\x2', '\x2', '\x2', '\x692', '\x693', 
		'\x3', '\x2', '\x2', '\x2', '\x693', '\xEF', '\x3', '\x2', '\x2', '\x2', 
		'\x694', '\x692', '\x3', '\x2', '\x2', '\x2', '\x695', '\x697', '\x5', 
		'\xF2', 'z', '\x2', '\x696', '\x695', '\x3', '\x2', '\x2', '\x2', '\x697', 
		'\x698', '\x3', '\x2', '\x2', '\x2', '\x698', '\x696', '\x3', '\x2', '\x2', 
		'\x2', '\x698', '\x699', '\x3', '\x2', '\x2', '\x2', '\x699', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\x69A', '\x69B', '\a', 'p', '\x2', '\x2', 
		'\x69B', '\x69C', '\x5', '\x1B4', '\xDB', '\x2', '\x69C', '\x69D', '\a', 
		'\x86', '\x2', '\x2', '\x69D', '\x69E', '\x5', '\xF4', '{', '\x2', '\x69E', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x69F', '\x6AA', '\x5', '\xFA', '~', 
		'\x2', '\x6A0', '\x6A3', '\x5', '\xF6', '|', '\x2', '\x6A1', '\x6A2', 
		'\a', '\x85', '\x2', '\x2', '\x6A2', '\x6A4', '\x5', '\xF8', '}', '\x2', 
		'\x6A3', '\x6A1', '\x3', '\x2', '\x2', '\x2', '\x6A3', '\x6A4', '\x3', 
		'\x2', '\x2', '\x2', '\x6A4', '\x6A7', '\x3', '\x2', '\x2', '\x2', '\x6A5', 
		'\x6A6', '\a', '\x85', '\x2', '\x2', '\x6A6', '\x6A8', '\x5', '\xFA', 
		'~', '\x2', '\x6A7', '\x6A5', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', 
		'\x3', '\x2', '\x2', '\x2', '\x6A8', '\x6AA', '\x3', '\x2', '\x2', '\x2', 
		'\x6A9', '\x69F', '\x3', '\x2', '\x2', '\x2', '\x6A9', '\x6A0', '\x3', 
		'\x2', '\x2', '\x2', '\x6AA', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x6AB', 
		'\x6B3', '\x5', '\x16', '\f', '\x2', '\x6AC', '\x6AE', '\a', '\x1B', '\x2', 
		'\x2', '\x6AD', '\x6AF', '\a', '\x95', '\x2', '\x2', '\x6AE', '\x6AD', 
		'\x3', '\x2', '\x2', '\x2', '\x6AE', '\x6AF', '\x3', '\x2', '\x2', '\x2', 
		'\x6AF', '\x6B3', '\x3', '\x2', '\x2', '\x2', '\x6B0', '\x6B3', '\a', 
		']', '\x2', '\x2', '\x6B1', '\x6B3', '\a', 'g', '\x2', '\x2', '\x6B2', 
		'\x6AB', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6AC', '\x3', '\x2', '\x2', 
		'\x2', '\x6B2', '\x6B0', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6B1', 
		'\x3', '\x2', '\x2', '\x2', '\x6B3', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\x6B4', '\x6B9', '\x5', '\x4', '\x3', '\x2', '\x6B5', '\x6B6', '\a', 
		'\x85', '\x2', '\x2', '\x6B6', '\x6B8', '\x5', '\x4', '\x3', '\x2', '\x6B7', 
		'\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6BB', '\x3', '\x2', '\x2', 
		'\x2', '\x6B9', '\x6B7', '\x3', '\x2', '\x2', '\x2', '\x6B9', '\x6BA', 
		'\x3', '\x2', '\x2', '\x2', '\x6BA', '\xF9', '\x3', '\x2', '\x2', '\x2', 
		'\x6BB', '\x6B9', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BD', '\a', 
		'\x43', '\x2', '\x2', '\x6BD', '\x6BE', '\a', '\x82', '\x2', '\x2', '\x6BE', 
		'\x6BF', '\a', '\x83', '\x2', '\x2', '\x6BF', '\xFB', '\x3', '\x2', '\x2', 
		'\x2', '\x6C0', '\x6C2', '\a', '~', '\x2', '\x2', '\x6C1', '\x6C3', '\x5', 
		'\xFE', '\x80', '\x2', '\x6C2', '\x6C1', '\x3', '\x2', '\x2', '\x2', '\x6C2', 
		'\x6C3', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C4', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x6C5', '\a', '\x7F', '\x2', '\x2', '\x6C5', '\xFD', 
		'\x3', '\x2', '\x2', '\x2', '\x6C6', '\x6C8', '\x5', '\x100', '\x81', 
		'\x2', '\x6C7', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6C9', 
		'\x3', '\x2', '\x2', '\x2', '\x6C9', '\x6C7', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x6CA', '\x3', '\x2', '\x2', '\x2', '\x6CA', '\xFF', '\x3', 
		'\x2', '\x2', '\x2', '\x6CB', '\x6CD', '\x5', '\x160', '\xB1', '\x2', 
		'\x6CC', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CC', '\x6CD', '\x3', 
		'\x2', '\x2', '\x2', '\x6CD', '\x6CF', '\x3', '\x2', '\x2', '\x2', '\x6CE', 
		'\x6D0', '\x5', '\x102', '\x82', '\x2', '\x6CF', '\x6CE', '\x3', '\x2', 
		'\x2', '\x2', '\x6CF', '\x6D0', '\x3', '\x2', '\x2', '\x2', '\x6D0', '\x6D3', 
		'\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D4', '\x5', '\x106', '\x84', 
		'\x2', '\x6D2', '\x6D4', '\x5', '\x1A4', '\xD3', '\x2', '\x6D3', '\x6D1', 
		'\x3', '\x2', '\x2', '\x2', '\x6D3', '\x6D2', '\x3', '\x2', '\x2', '\x2', 
		'\x6D4', '\x101', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D7', '\x5', 
		'\x104', '\x83', '\x2', '\x6D6', '\x6D5', '\x3', '\x2', '\x2', '\x2', 
		'\x6D7', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6D8', '\x6D6', '\x3', 
		'\x2', '\x2', '\x2', '\x6D8', '\x6D9', '\x3', '\x2', '\x2', '\x2', '\x6D9', 
		'\x103', '\x3', '\x2', '\x2', '\x2', '\x6DA', '\x6DB', '\t', '\f', '\x2', 
		'\x2', '\x6DB', '\x105', '\x3', '\x2', '\x2', '\x2', '\x6DC', '\x6F0', 
		'\x5', '\x1A0', '\xD1', '\x2', '\x6DD', '\x6F0', '\x5', '\x108', '\x85', 
		'\x2', '\x6DE', '\x6F0', '\x5', '\x19A', '\xCE', '\x2', '\x6DF', '\x6E5', 
		'\x5', '\x136', '\x9C', '\x2', '\x6E0', '\x6E6', '\x5', '\x13A', '\x9E', 
		'\x2', '\x6E1', '\x6E2', '\x5', '\x178', '\xBD', '\x2', '\x6E2', '\x6E3', 
		'\x5', 'L', '\'', '\x2', '\x6E3', '\x6E4', '\a', '\x87', '\x2', '\x2', 
		'\x6E4', '\x6E6', '\x3', '\x2', '\x2', '\x2', '\x6E5', '\x6E0', '\x3', 
		'\x2', '\x2', '\x2', '\x6E5', '\x6E1', '\x3', '\x2', '\x2', '\x2', '\x6E6', 
		'\x6F0', '\x3', '\x2', '\x2', '\x2', '\x6E7', '\x6F0', '\x5', '\x1A6', 
		'\xD4', '\x2', '\x6E8', '\x6E9', '\a', 'm', '\x2', '\x2', '\x6E9', '\x6F0', 
		'\x5', '\x1A8', '\xD5', '\x2', '\x6EA', '\x6F0', '\x5', '\x190', '\xC9', 
		'\x2', '\x6EB', '\x6F0', '\x5', '\x192', '\xCA', '\x2', '\x6EC', '\x6F0', 
		'\x5', '\x194', '\xCB', '\x2', '\x6ED', '\x6F0', '\x5', '\x196', '\xCC', 
		'\x2', '\x6EE', '\x6F0', '\x5', '\x198', '\xCD', '\x2', '\x6EF', '\x6DC', 
		'\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6DD', '\x3', '\x2', '\x2', '\x2', 
		'\x6EF', '\x6DE', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6DF', '\x3', 
		'\x2', '\x2', '\x2', '\x6EF', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6EF', 
		'\x6E8', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6EA', '\x3', '\x2', '\x2', 
		'\x2', '\x6EF', '\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6EC', 
		'\x3', '\x2', '\x2', '\x2', '\x6EF', '\x6ED', '\x3', '\x2', '\x2', '\x2', 
		'\x6EF', '\x6EE', '\x3', '\x2', '\x2', '\x2', '\x6F0', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x6F1', '\x6F7', '\a', 'Q', '\x2', '\x2', '\x6F2', 
		'\x6F3', '\a', 'P', '\x2', '\x2', '\x6F3', '\x6F7', '\a', 'Q', '\x2', 
		'\x2', '\x6F4', '\x6F5', '\a', 'Q', '\x2', '\x2', '\x6F5', '\x6F7', '\a', 
		'P', '\x2', '\x2', '\x6F6', '\x6F1', '\x3', '\x2', '\x2', '\x2', '\x6F6', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F6', '\x6F4', '\x3', '\x2', '\x2', 
		'\x2', '\x6F6', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x6F7', '\x6F8', 
		'\x3', '\x2', '\x2', '\x2', '\x6F8', '\x702', '\x5', '\x6', '\x4', '\x2', 
		'\x6F9', '\x6FA', '\x5', '\x4', '\x3', '\x2', '\x6FA', '\x6FB', '\a', 
		'\x84', '\x2', '\x2', '\x6FB', '\x6FC', '\x5', '\x1A2', '\xD2', '\x2', 
		'\x6FC', '\x703', '\x3', '\x2', '\x2', '\x2', '\x6FD', '\x703', '\x5', 
		'\x1A8', '\xD5', '\x2', '\x6FE', '\x703', '\x5', '\x19E', '\xD0', '\x2', 
		'\x6FF', '\x703', '\x5', '\x1A2', '\xD2', '\x2', '\x700', '\x703', '\x5', 
		'\x1AC', '\xD7', '\x2', '\x701', '\x703', '\x5', '\x19C', '\xCF', '\x2', 
		'\x702', '\x6F9', '\x3', '\x2', '\x2', '\x2', '\x702', '\x6FD', '\x3', 
		'\x2', '\x2', '\x2', '\x702', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x702', 
		'\x6FF', '\x3', '\x2', '\x2', '\x2', '\x702', '\x700', '\x3', '\x2', '\x2', 
		'\x2', '\x702', '\x701', '\x3', '\x2', '\x2', '\x2', '\x703', '\x109', 
		'\x3', '\x2', '\x2', '\x2', '\x704', '\x709', '\x5', '\x10C', '\x87', 
		'\x2', '\x705', '\x706', '\a', '\x85', '\x2', '\x2', '\x706', '\x708', 
		'\x5', '\x10C', '\x87', '\x2', '\x707', '\x705', '\x3', '\x2', '\x2', 
		'\x2', '\x708', '\x70B', '\x3', '\x2', '\x2', '\x2', '\x709', '\x707', 
		'\x3', '\x2', '\x2', '\x2', '\x709', '\x70A', '\x3', '\x2', '\x2', '\x2', 
		'\x70A', '\x10B', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x709', '\x3', 
		'\x2', '\x2', '\x2', '\x70C', '\x70D', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x70D', '\x70E', '\a', '\x92', '\x2', '\x2', '\x70E', '\x70F', '\x5', 
		'\x1E', '\x10', '\x2', '\x70F', '\x10D', '\x3', '\x2', '\x2', '\x2', '\x710', 
		'\x715', '\x5', '\x110', '\x89', '\x2', '\x711', '\x712', '\a', '\x85', 
		'\x2', '\x2', '\x712', '\x714', '\x5', '\x110', '\x89', '\x2', '\x713', 
		'\x711', '\x3', '\x2', '\x2', '\x2', '\x714', '\x717', '\x3', '\x2', '\x2', 
		'\x2', '\x715', '\x713', '\x3', '\x2', '\x2', '\x2', '\x715', '\x716', 
		'\x3', '\x2', '\x2', '\x2', '\x716', '\x10F', '\x3', '\x2', '\x2', '\x2', 
		'\x717', '\x715', '\x3', '\x2', '\x2', '\x2', '\x718', '\x71B', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x719', '\x71A', '\a', '\x92', '\x2', '\x2', 
		'\x71A', '\x71C', '\x5', '\x112', '\x8A', '\x2', '\x71B', '\x719', '\x3', 
		'\x2', '\x2', '\x2', '\x71B', '\x71C', '\x3', '\x2', '\x2', '\x2', '\x71C', 
		'\x111', '\x3', '\x2', '\x2', '\x2', '\x71D', '\x720', '\x5', '\x1E', 
		'\x10', '\x2', '\x71E', '\x720', '\x5', '\x146', '\xA4', '\x2', '\x71F', 
		'\x71D', '\x3', '\x2', '\x2', '\x2', '\x71F', '\x71E', '\x3', '\x2', '\x2', 
		'\x2', '\x720', '\x113', '\x3', '\x2', '\x2', '\x2', '\x721', '\x724', 
		'\x5', '\x6', '\x4', '\x2', '\x722', '\x724', '\a', 'm', '\x2', '\x2', 
		'\x723', '\x721', '\x3', '\x2', '\x2', '\x2', '\x723', '\x722', '\x3', 
		'\x2', '\x2', '\x2', '\x724', '\x115', '\x3', '\x2', '\x2', '\x2', '\x725', 
		'\x726', '\x5', '\x4', '\x3', '\x2', '\x726', '\x117', '\x3', '\x2', '\x2', 
		'\x2', '\x727', '\x72A', '\x5', '\xAC', 'W', '\x2', '\x728', '\x72A', 
		'\a', '\x87', '\x2', '\x2', '\x729', '\x727', '\x3', '\x2', '\x2', '\x2', 
		'\x729', '\x728', '\x3', '\x2', '\x2', '\x2', '\x72A', '\x119', '\x3', 
		'\x2', '\x2', '\x2', '\x72B', '\x732', '\x5', '\x122', '\x92', '\x2', 
		'\x72C', '\x72F', '\x5', '\x11C', '\x8F', '\x2', '\x72D', '\x72E', '\a', 
		'\x85', '\x2', '\x2', '\x72E', '\x730', '\x5', '\x122', '\x92', '\x2', 
		'\x72F', '\x72D', '\x3', '\x2', '\x2', '\x2', '\x72F', '\x730', '\x3', 
		'\x2', '\x2', '\x2', '\x730', '\x732', '\x3', '\x2', '\x2', '\x2', '\x731', 
		'\x72B', '\x3', '\x2', '\x2', '\x2', '\x731', '\x72C', '\x3', '\x2', '\x2', 
		'\x2', '\x732', '\x11B', '\x3', '\x2', '\x2', '\x2', '\x733', '\x738', 
		'\x5', '\x11E', '\x90', '\x2', '\x734', '\x735', '\a', '\x85', '\x2', 
		'\x2', '\x735', '\x737', '\x5', '\x11E', '\x90', '\x2', '\x736', '\x734', 
		'\x3', '\x2', '\x2', '\x2', '\x737', '\x73A', '\x3', '\x2', '\x2', '\x2', 
		'\x738', '\x736', '\x3', '\x2', '\x2', '\x2', '\x738', '\x739', '\x3', 
		'\x2', '\x2', '\x2', '\x739', '\x11D', '\x3', '\x2', '\x2', '\x2', '\x73A', 
		'\x738', '\x3', '\x2', '\x2', '\x2', '\x73B', '\x73D', '\x5', '\x160', 
		'\xB1', '\x2', '\x73C', '\x73B', '\x3', '\x2', '\x2', '\x2', '\x73C', 
		'\x73D', '\x3', '\x2', '\x2', '\x2', '\x73D', '\x73F', '\x3', '\x2', '\x2', 
		'\x2', '\x73E', '\x740', '\x5', '\x120', '\x91', '\x2', '\x73F', '\x73E', 
		'\x3', '\x2', '\x2', '\x2', '\x73F', '\x740', '\x3', '\x2', '\x2', '\x2', 
		'\x740', '\x741', '\x3', '\x2', '\x2', '\x2', '\x741', '\x744', '\x5', 
		'\x1AE', '\xD8', '\x2', '\x742', '\x744', '\a', '\r', '\x2', '\x2', '\x743', 
		'\x73C', '\x3', '\x2', '\x2', '\x2', '\x743', '\x742', '\x3', '\x2', '\x2', 
		'\x2', '\x744', '\x11F', '\x3', '\x2', '\x2', '\x2', '\x745', '\x74E', 
		'\a', 'Q', '\x2', '\x2', '\x746', '\x74E', '\a', 'I', '\x2', '\x2', '\x747', 
		'\x74E', '\a', '\x37', '\x2', '\x2', '\x748', '\x749', '\a', 'Q', '\x2', 
		'\x2', '\x749', '\x74E', '\a', '_', '\x2', '\x2', '\x74A', '\x74B', '\a', 
		'\x37', '\x2', '\x2', '\x74B', '\x74E', '\a', '_', '\x2', '\x2', '\x74C', 
		'\x74E', '\a', '_', '\x2', '\x2', '\x74D', '\x745', '\x3', '\x2', '\x2', 
		'\x2', '\x74D', '\x746', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x747', 
		'\x3', '\x2', '\x2', '\x2', '\x74D', '\x748', '\x3', '\x2', '\x2', '\x2', 
		'\x74D', '\x74A', '\x3', '\x2', '\x2', '\x2', '\x74D', '\x74C', '\x3', 
		'\x2', '\x2', '\x2', '\x74E', '\x121', '\x3', '\x2', '\x2', '\x2', '\x74F', 
		'\x751', '\x5', '\x160', '\xB1', '\x2', '\x750', '\x74F', '\x3', '\x2', 
		'\x2', '\x2', '\x750', '\x751', '\x3', '\x2', '\x2', '\x2', '\x751', '\x752', 
		'\x3', '\x2', '\x2', '\x2', '\x752', '\x753', '\a', 'K', '\x2', '\x2', 
		'\x753', '\x754', '\x5', '\x142', '\xA2', '\x2', '\x754', '\x755', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x755', '\x123', '\x3', '\x2', '\x2', '\x2', 
		'\x756', '\x758', '\x5', '\x160', '\xB1', '\x2', '\x757', '\x756', '\x3', 
		'\x2', '\x2', '\x2', '\x757', '\x758', '\x3', '\x2', '\x2', '\x2', '\x758', 
		'\x75A', '\x3', '\x2', '\x2', '\x2', '\x759', '\x75B', '\x5', '\x12A', 
		'\x96', '\x2', '\x75A', '\x759', '\x3', '\x2', '\x2', '\x2', '\x75A', 
		'\x75B', '\x3', '\x2', '\x2', '\x2', '\x75B', '\x766', '\x3', '\x2', '\x2', 
		'\x2', '\x75C', '\x75D', '\a', '\x32', '\x2', '\x2', '\x75D', '\x75F', 
		'\x5', '\x12C', '\x97', '\x2', '\x75E', '\x760', '\x5', '\x128', '\x95', 
		'\x2', '\x75F', '\x75E', '\x3', '\x2', '\x2', '\x2', '\x75F', '\x760', 
		'\x3', '\x2', '\x2', '\x2', '\x760', '\x767', '\x3', '\x2', '\x2', '\x2', 
		'\x761', '\x762', '\a', 'W', '\x2', '\x2', '\x762', '\x764', '\x5', '\x12C', 
		'\x97', '\x2', '\x763', '\x765', '\x5', '\x126', '\x94', '\x2', '\x764', 
		'\x763', '\x3', '\x2', '\x2', '\x2', '\x764', '\x765', '\x3', '\x2', '\x2', 
		'\x2', '\x765', '\x767', '\x3', '\x2', '\x2', '\x2', '\x766', '\x75C', 
		'\x3', '\x2', '\x2', '\x2', '\x766', '\x761', '\x3', '\x2', '\x2', '\x2', 
		'\x767', '\x125', '\x3', '\x2', '\x2', '\x2', '\x768', '\x76A', '\x5', 
		'\x160', '\xB1', '\x2', '\x769', '\x768', '\x3', '\x2', '\x2', '\x2', 
		'\x769', '\x76A', '\x3', '\x2', '\x2', '\x2', '\x76A', '\x76C', '\x3', 
		'\x2', '\x2', '\x2', '\x76B', '\x76D', '\x5', '\x12A', '\x96', '\x2', 
		'\x76C', '\x76B', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', '\x3', 
		'\x2', '\x2', '\x2', '\x76D', '\x76E', '\x3', '\x2', '\x2', '\x2', '\x76E', 
		'\x76F', '\a', '\x32', '\x2', '\x2', '\x76F', '\x770', '\x5', '\x12C', 
		'\x97', '\x2', '\x770', '\x127', '\x3', '\x2', '\x2', '\x2', '\x771', 
		'\x773', '\x5', '\x160', '\xB1', '\x2', '\x772', '\x771', '\x3', '\x2', 
		'\x2', '\x2', '\x772', '\x773', '\x3', '\x2', '\x2', '\x2', '\x773', '\x775', 
		'\x3', '\x2', '\x2', '\x2', '\x774', '\x776', '\x5', '\x12A', '\x96', 
		'\x2', '\x775', '\x774', '\x3', '\x2', '\x2', '\x2', '\x775', '\x776', 
		'\x3', '\x2', '\x2', '\x2', '\x776', '\x777', '\x3', '\x2', '\x2', '\x2', 
		'\x777', '\x778', '\a', 'W', '\x2', '\x2', '\x778', '\x779', '\x5', '\x12C', 
		'\x97', '\x2', '\x779', '\x129', '\x3', '\x2', '\x2', '\x2', '\x77A', 
		'\x782', '\a', 'N', '\x2', '\x2', '\x77B', '\x782', '\a', ':', '\x2', 
		'\x2', '\x77C', '\x782', '\a', 'M', '\x2', '\x2', '\x77D', '\x77E', '\a', 
		'N', '\x2', '\x2', '\x77E', '\x782', '\a', ':', '\x2', '\x2', '\x77F', 
		'\x780', '\a', ':', '\x2', '\x2', '\x780', '\x782', '\a', 'N', '\x2', 
		'\x2', '\x781', '\x77A', '\x3', '\x2', '\x2', '\x2', '\x781', '\x77B', 
		'\x3', '\x2', '\x2', '\x2', '\x781', '\x77C', '\x3', '\x2', '\x2', '\x2', 
		'\x781', '\x77D', '\x3', '\x2', '\x2', '\x2', '\x781', '\x77F', '\x3', 
		'\x2', '\x2', '\x2', '\x782', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x783', 
		'\x786', '\x5', '\xAC', 'W', '\x2', '\x784', '\x786', '\a', '\x87', '\x2', 
		'\x2', '\x785', '\x783', '\x3', '\x2', '\x2', '\x2', '\x785', '\x784', 
		'\x3', '\x2', '\x2', '\x2', '\x786', '\x12D', '\x3', '\x2', '\x2', '\x2', 
		'\x787', '\x789', '\x5', '\x160', '\xB1', '\x2', '\x788', '\x787', '\x3', 
		'\x2', '\x2', '\x2', '\x788', '\x789', '\x3', '\x2', '\x2', '\x2', '\x789', 
		'\x792', '\x3', '\x2', '\x2', '\x2', '\x78A', '\x78B', '\a', '\v', '\x2', 
		'\x2', '\x78B', '\x78C', '\x5', '\xAC', 'W', '\x2', '\x78C', '\x78D', 
		'\x5', '\x132', '\x9A', '\x2', '\x78D', '\x793', '\x3', '\x2', '\x2', 
		'\x2', '\x78E', '\x78F', '\a', 'R', '\x2', '\x2', '\x78F', '\x790', '\x5', 
		'\xAC', 'W', '\x2', '\x790', '\x791', '\x5', '\x130', '\x99', '\x2', '\x791', 
		'\x793', '\x3', '\x2', '\x2', '\x2', '\x792', '\x78A', '\x3', '\x2', '\x2', 
		'\x2', '\x792', '\x78E', '\x3', '\x2', '\x2', '\x2', '\x793', '\x12F', 
		'\x3', '\x2', '\x2', '\x2', '\x794', '\x796', '\x5', '\x160', '\xB1', 
		'\x2', '\x795', '\x794', '\x3', '\x2', '\x2', '\x2', '\x795', '\x796', 
		'\x3', '\x2', '\x2', '\x2', '\x796', '\x797', '\x3', '\x2', '\x2', '\x2', 
		'\x797', '\x798', '\a', '\v', '\x2', '\x2', '\x798', '\x799', '\x5', '\xAC', 
		'W', '\x2', '\x799', '\x131', '\x3', '\x2', '\x2', '\x2', '\x79A', '\x79C', 
		'\x5', '\x160', '\xB1', '\x2', '\x79B', '\x79A', '\x3', '\x2', '\x2', 
		'\x2', '\x79B', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79C', '\x79D', 
		'\x3', '\x2', '\x2', '\x2', '\x79D', '\x79E', '\a', 'R', '\x2', '\x2', 
		'\x79E', '\x79F', '\x5', '\xAC', 'W', '\x2', '\x79F', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x7A0', '\x7B7', '\a', '\x88', '\x2', '\x2', '\x7A1', 
		'\x7B7', '\a', '\x89', '\x2', '\x2', '\x7A2', '\x7B7', '\a', '\x90', '\x2', 
		'\x2', '\x7A3', '\x7B7', '\a', '\x91', '\x2', '\x2', '\x7A4', '\x7B7', 
		'\a', '\x98', '\x2', '\x2', '\x7A5', '\x7B7', '\a', '\x99', '\x2', '\x2', 
		'\x7A6', '\x7B7', '\a', '\x61', '\x2', '\x2', '\x7A7', '\x7B7', '\a', 
		'+', '\x2', '\x2', '\x7A8', '\x7B7', '\a', '\x8A', '\x2', '\x2', '\x7A9', 
		'\x7B7', '\a', '\x8B', '\x2', '\x2', '\x7AA', '\x7B7', '\a', '\x8C', '\x2', 
		'\x2', '\x7AB', '\x7B7', '\a', '\x8D', '\x2', '\x2', '\x7AC', '\x7B7', 
		'\a', '\x8E', '\x2', '\x2', '\x7AD', '\x7B7', '\a', '\x8F', '\x2', '\x2', 
		'\x7AE', '\x7B7', '\a', '\xA9', '\x2', '\x2', '\x7AF', '\x7B7', '\x5', 
		'\x17A', '\xBE', '\x2', '\x7B0', '\x7B7', '\a', '\x9D', '\x2', '\x2', 
		'\x7B1', '\x7B7', '\a', '\x9E', '\x2', '\x2', '\x7B2', '\x7B7', '\a', 
		'\x94', '\x2', '\x2', '\x7B3', '\x7B7', '\a', '\x93', '\x2', '\x2', '\x7B4', 
		'\x7B7', '\a', '\xA0', '\x2', '\x2', '\x7B5', '\x7B7', '\a', '\x9F', '\x2', 
		'\x2', '\x7B6', '\x7A0', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7A1', 
		'\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7A2', '\x3', '\x2', '\x2', '\x2', 
		'\x7B6', '\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7A4', '\x3', 
		'\x2', '\x2', '\x2', '\x7B6', '\x7A5', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\x7A6', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7A7', '\x3', '\x2', '\x2', 
		'\x2', '\x7B6', '\x7A8', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7A9', 
		'\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7AA', '\x3', '\x2', '\x2', '\x2', 
		'\x7B6', '\x7AB', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7AC', '\x3', 
		'\x2', '\x2', '\x2', '\x7B6', '\x7AD', '\x3', '\x2', '\x2', '\x2', '\x7B6', 
		'\x7AE', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7AF', '\x3', '\x2', '\x2', 
		'\x2', '\x7B6', '\x7B0', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B1', 
		'\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B2', '\x3', '\x2', '\x2', '\x2', 
		'\x7B6', '\x7B3', '\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B4', '\x3', 
		'\x2', '\x2', '\x2', '\x7B6', '\x7B5', '\x3', '\x2', '\x2', '\x2', '\x7B7', 
		'\x135', '\x3', '\x2', '\x2', '\x2', '\x7B8', '\x7B9', '\t', '\r', '\x2', 
		'\x2', '\x7B9', '\x7BA', '\a', 'G', '\x2', '\x2', '\x7BA', '\x7BB', '\x5', 
		'\x6', '\x4', '\x2', '\x7BB', '\x7BC', '\a', '\x82', '\x2', '\x2', '\x7BC', 
		'\x7BD', '\x5', '\x1AE', '\xD8', '\x2', '\x7BD', '\x7BE', '\a', '\x83', 
		'\x2', '\x2', '\x7BE', '\x137', '\x3', '\x2', '\x2', '\x2', '\x7BF', '\x7C0', 
		'\a', '\x86', '\x2', '\x2', '\x7C0', '\x7C1', '\t', '\xE', '\x2', '\x2', 
		'\x7C1', '\x7C3', '\a', '\x82', '\x2', '\x2', '\x7C2', '\x7C4', '\x5', 
		'\x1A', '\xE', '\x2', '\x7C3', '\x7C2', '\x3', '\x2', '\x2', '\x2', '\x7C3', 
		'\x7C4', '\x3', '\x2', '\x2', '\x2', '\x7C4', '\x7C5', '\x3', '\x2', '\x2', 
		'\x2', '\x7C5', '\x7C6', '\a', '\x83', '\x2', '\x2', '\x7C6', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x7C7', '\x7CA', '\x5', '\xAC', 'W', '\x2', 
		'\x7C8', '\x7CA', '\a', '\x87', '\x2', '\x2', '\x7C9', '\x7C7', '\x3', 
		'\x2', '\x2', '\x2', '\x7C9', '\x7C8', '\x3', '\x2', '\x2', '\x2', '\x7CA', 
		'\x13B', '\x3', '\x2', '\x2', '\x2', '\x7CB', '\x7CC', '\a', '\x86', '\x2', 
		'\x2', '\x7CC', '\x7CD', '\x5', '\xEE', 'x', '\x2', '\x7CD', '\x13D', 
		'\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7D2', '\a', '~', '\x2', '\x2', 
		'\x7CF', '\x7D1', '\x5', '\x140', '\xA1', '\x2', '\x7D0', '\x7CF', '\x3', 
		'\x2', '\x2', '\x2', '\x7D1', '\x7D4', '\x3', '\x2', '\x2', '\x2', '\x7D2', 
		'\x7D0', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D3', '\x3', '\x2', '\x2', 
		'\x2', '\x7D3', '\x7D5', '\x3', '\x2', '\x2', '\x2', '\x7D4', '\x7D2', 
		'\x3', '\x2', '\x2', '\x2', '\x7D5', '\x7D6', '\a', '\x7F', '\x2', '\x2', 
		'\x7D6', '\x13F', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D9', '\x5', 
		'\x160', '\xB1', '\x2', '\x7D8', '\x7D7', '\x3', '\x2', '\x2', '\x2', 
		'\x7D8', '\x7D9', '\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DB', '\x3', 
		'\x2', '\x2', '\x2', '\x7DA', '\x7DC', '\x5', '\x102', '\x82', '\x2', 
		'\x7DB', '\x7DA', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7DC', '\x3', 
		'\x2', '\x2', '\x2', '\x7DC', '\x7E7', '\x3', '\x2', '\x2', '\x2', '\x7DD', 
		'\x7E8', '\x5', '\x106', '\x84', '\x2', '\x7DE', '\x7DF', '\a', '-', '\x2', 
		'\x2', '\x7DF', '\x7E1', '\x5', '\x6', '\x4', '\x2', '\x7E0', '\x7E2', 
		'\x5', '\x174', '\xBB', '\x2', '\x7E1', '\x7E0', '\x3', '\x2', '\x2', 
		'\x2', '\x7E2', '\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E1', 
		'\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E4', '\x3', '\x2', '\x2', '\x2', 
		'\x7E4', '\x7E5', '\x3', '\x2', '\x2', '\x2', '\x7E5', '\x7E6', '\a', 
		'\x87', '\x2', '\x2', '\x7E6', '\x7E8', '\x3', '\x2', '\x2', '\x2', '\x7E7', 
		'\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7E7', '\x7DE', '\x3', '\x2', '\x2', 
		'\x2', '\x7E8', '\x141', '\x3', '\x2', '\x2', '\x2', '\x7E9', '\x7F1', 
		'\x5', '\b', '\x5', '\x2', '\x7EA', '\x7EC', '\t', '\xF', '\x2', '\x2', 
		'\x7EB', '\x7EA', '\x3', '\x2', '\x2', '\x2', '\x7EC', '\x7EF', '\x3', 
		'\x2', '\x2', '\x2', '\x7ED', '\x7EB', '\x3', '\x2', '\x2', '\x2', '\x7ED', 
		'\x7EE', '\x3', '\x2', '\x2', '\x2', '\x7EE', '\x7F0', '\x3', '\x2', '\x2', 
		'\x2', '\x7EF', '\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7F0', '\x7F2', 
		'\x5', '\x144', '\xA3', '\x2', '\x7F1', '\x7ED', '\x3', '\x2', '\x2', 
		'\x2', '\x7F2', '\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F1', 
		'\x3', '\x2', '\x2', '\x2', '\x7F3', '\x7F4', '\x3', '\x2', '\x2', '\x2', 
		'\x7F4', '\x143', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F9', '\a', 
		'\x80', '\x2', '\x2', '\x7F6', '\x7F8', '\a', '\x85', '\x2', '\x2', '\x7F7', 
		'\x7F6', '\x3', '\x2', '\x2', '\x2', '\x7F8', '\x7FB', '\x3', '\x2', '\x2', 
		'\x2', '\x7F9', '\x7F7', '\x3', '\x2', '\x2', '\x2', '\x7F9', '\x7FA', 
		'\x3', '\x2', '\x2', '\x2', '\x7FA', '\x7FC', '\x3', '\x2', '\x2', '\x2', 
		'\x7FB', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\a', 
		'\x81', '\x2', '\x2', '\x7FD', '\x145', '\x3', '\x2', '\x2', '\x2', '\x7FE', 
		'\x80A', '\a', '~', '\x2', '\x2', '\x7FF', '\x804', '\x5', '\x112', '\x8A', 
		'\x2', '\x800', '\x801', '\a', '\x85', '\x2', '\x2', '\x801', '\x803', 
		'\x5', '\x112', '\x8A', '\x2', '\x802', '\x800', '\x3', '\x2', '\x2', 
		'\x2', '\x803', '\x806', '\x3', '\x2', '\x2', '\x2', '\x804', '\x802', 
		'\x3', '\x2', '\x2', '\x2', '\x804', '\x805', '\x3', '\x2', '\x2', '\x2', 
		'\x805', '\x808', '\x3', '\x2', '\x2', '\x2', '\x806', '\x804', '\x3', 
		'\x2', '\x2', '\x2', '\x807', '\x809', '\a', '\x85', '\x2', '\x2', '\x808', 
		'\x807', '\x3', '\x2', '\x2', '\x2', '\x808', '\x809', '\x3', '\x2', '\x2', 
		'\x2', '\x809', '\x80B', '\x3', '\x2', '\x2', '\x2', '\x80A', '\x7FF', 
		'\x3', '\x2', '\x2', '\x2', '\x80A', '\x80B', '\x3', '\x2', '\x2', '\x2', 
		'\x80B', '\x80C', '\x3', '\x2', '\x2', '\x2', '\x80C', '\x80D', '\a', 
		'\x7F', '\x2', '\x2', '\x80D', '\x147', '\x3', '\x2', '\x2', '\x2', '\x80E', 
		'\x80F', '\a', '\x93', '\x2', '\x2', '\x80F', '\x814', '\x5', '\x14A', 
		'\xA6', '\x2', '\x810', '\x811', '\a', '\x85', '\x2', '\x2', '\x811', 
		'\x813', '\x5', '\x14A', '\xA6', '\x2', '\x812', '\x810', '\x3', '\x2', 
		'\x2', '\x2', '\x813', '\x816', '\x3', '\x2', '\x2', '\x2', '\x814', '\x812', 
		'\x3', '\x2', '\x2', '\x2', '\x814', '\x815', '\x3', '\x2', '\x2', '\x2', 
		'\x815', '\x817', '\x3', '\x2', '\x2', '\x2', '\x816', '\x814', '\x3', 
		'\x2', '\x2', '\x2', '\x817', '\x818', '\a', '\x94', '\x2', '\x2', '\x818', 
		'\x149', '\x3', '\x2', '\x2', '\x2', '\x819', '\x81B', '\x5', '\x160', 
		'\xB1', '\x2', '\x81A', '\x819', '\x3', '\x2', '\x2', '\x2', '\x81A', 
		'\x81B', '\x3', '\x2', '\x2', '\x2', '\x81B', '\x81D', '\x3', '\x2', '\x2', 
		'\x2', '\x81C', '\x81E', '\x5', '\x14C', '\xA7', '\x2', '\x81D', '\x81C', 
		'\x3', '\x2', '\x2', '\x2', '\x81D', '\x81E', '\x3', '\x2', '\x2', '\x2', 
		'\x81E', '\x81F', '\x3', '\x2', '\x2', '\x2', '\x81F', '\x820', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x820', '\x14B', '\x3', '\x2', '\x2', '\x2', 
		'\x821', '\x822', '\t', '\x10', '\x2', '\x2', '\x822', '\x14D', '\x3', 
		'\x2', '\x2', '\x2', '\x823', '\x824', '\a', '\x86', '\x2', '\x2', '\x824', 
		'\x825', '\x5', '\xEE', 'x', '\x2', '\x825', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x826', '\x82A', '\a', '~', '\x2', '\x2', '\x827', '\x829', '\x5', 
		'\x152', '\xAA', '\x2', '\x828', '\x827', '\x3', '\x2', '\x2', '\x2', 
		'\x829', '\x82C', '\x3', '\x2', '\x2', '\x2', '\x82A', '\x828', '\x3', 
		'\x2', '\x2', '\x2', '\x82A', '\x82B', '\x3', '\x2', '\x2', '\x2', '\x82B', 
		'\x82D', '\x3', '\x2', '\x2', '\x2', '\x82C', '\x82A', '\x3', '\x2', '\x2', 
		'\x2', '\x82D', '\x82E', '\a', '\x7F', '\x2', '\x2', '\x82E', '\x151', 
		'\x3', '\x2', '\x2', '\x2', '\x82F', '\x831', '\x5', '\x160', '\xB1', 
		'\x2', '\x830', '\x82F', '\x3', '\x2', '\x2', '\x2', '\x830', '\x831', 
		'\x3', '\x2', '\x2', '\x2', '\x831', '\x833', '\x3', '\x2', '\x2', '\x2', 
		'\x832', '\x834', '\a', '\x43', '\x2', '\x2', '\x833', '\x832', '\x3', 
		'\x2', '\x2', '\x2', '\x833', '\x834', '\x3', '\x2', '\x2', '\x2', '\x834', 
		'\x874', '\x3', '\x2', '\x2', '\x2', '\x835', '\x837', '\a', 'h', '\x2', 
		'\x2', '\x836', '\x835', '\x3', '\x2', '\x2', '\x2', '\x836', '\x837', 
		'\x3', '\x2', '\x2', '\x2', '\x837', '\x83D', '\x3', '\x2', '\x2', '\x2', 
		'\x838', '\x83E', '\a', 'Q', '\x2', '\x2', '\x839', '\x83A', '\a', 'Q', 
		'\x2', '\x2', '\x83A', '\x83E', '\a', 'P', '\x2', '\x2', '\x83B', '\x83C', 
		'\a', 'P', '\x2', '\x2', '\x83C', '\x83E', '\a', 'Q', '\x2', '\x2', '\x83D', 
		'\x838', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x839', '\x3', '\x2', '\x2', 
		'\x2', '\x83D', '\x83B', '\x3', '\x2', '\x2', '\x2', '\x83D', '\x83E', 
		'\x3', '\x2', '\x2', '\x2', '\x83E', '\x83F', '\x3', '\x2', '\x2', '\x2', 
		'\x83F', '\x85B', '\x5', '\x6', '\x4', '\x2', '\x840', '\x842', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x841', '\x843', '\x5', '\xE8', 'u', '\x2', '\x842', 
		'\x841', '\x3', '\x2', '\x2', '\x2', '\x842', '\x843', '\x3', '\x2', '\x2', 
		'\x2', '\x843', '\x844', '\x3', '\x2', '\x2', '\x2', '\x844', '\x846', 
		'\a', '\x82', '\x2', '\x2', '\x845', '\x847', '\x5', '\x11A', '\x8E', 
		'\x2', '\x846', '\x845', '\x3', '\x2', '\x2', '\x2', '\x846', '\x847', 
		'\x3', '\x2', '\x2', '\x2', '\x847', '\x848', '\x3', '\x2', '\x2', '\x2', 
		'\x848', '\x84A', '\a', '\x83', '\x2', '\x2', '\x849', '\x84B', '\x5', 
		'\xF0', 'y', '\x2', '\x84A', '\x849', '\x3', '\x2', '\x2', '\x2', '\x84A', 
		'\x84B', '\x3', '\x2', '\x2', '\x2', '\x84B', '\x84C', '\x3', '\x2', '\x2', 
		'\x2', '\x84C', '\x84D', '\a', '\x87', '\x2', '\x2', '\x84D', '\x85C', 
		'\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x84F', '\x850', '\a', '~', '\x2', '\x2', '\x850', '\x851', '\x5', 
		'\x154', '\xAB', '\x2', '\x851', '\x852', '\a', '\x7F', '\x2', '\x2', 
		'\x852', '\x85C', '\x3', '\x2', '\x2', '\x2', '\x853', '\x854', '\a', 
		'_', '\x2', '\x2', '\x854', '\x855', '\a', '\x80', '\x2', '\x2', '\x855', 
		'\x856', '\x5', '\x11A', '\x8E', '\x2', '\x856', '\x857', '\a', '\x81', 
		'\x2', '\x2', '\x857', '\x858', '\a', '~', '\x2', '\x2', '\x858', '\x859', 
		'\x5', '\x154', '\xAB', '\x2', '\x859', '\x85A', '\a', '\x7F', '\x2', 
		'\x2', '\x85A', '\x85C', '\x3', '\x2', '\x2', '\x2', '\x85B', '\x840', 
		'\x3', '\x2', '\x2', '\x2', '\x85B', '\x84E', '\x3', '\x2', '\x2', '\x2', 
		'\x85B', '\x853', '\x3', '\x2', '\x2', '\x2', '\x85C', '\x875', '\x3', 
		'\x2', '\x2', '\x2', '\x85D', '\x85F', '\a', 'h', '\x2', '\x2', '\x85E', 
		'\x85D', '\x3', '\x2', '\x2', '\x2', '\x85E', '\x85F', '\x3', '\x2', '\x2', 
		'\x2', '\x85F', '\x860', '\x3', '\x2', '\x2', '\x2', '\x860', '\x861', 
		'\a', 'm', '\x2', '\x2', '\x861', '\x863', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x862', '\x864', '\x5', '\xE8', 'u', '\x2', '\x863', '\x862', '\x3', 
		'\x2', '\x2', '\x2', '\x863', '\x864', '\x3', '\x2', '\x2', '\x2', '\x864', 
		'\x865', '\x3', '\x2', '\x2', '\x2', '\x865', '\x867', '\a', '\x82', '\x2', 
		'\x2', '\x866', '\x868', '\x5', '\x11A', '\x8E', '\x2', '\x867', '\x866', 
		'\x3', '\x2', '\x2', '\x2', '\x867', '\x868', '\x3', '\x2', '\x2', '\x2', 
		'\x868', '\x869', '\x3', '\x2', '\x2', '\x2', '\x869', '\x86B', '\a', 
		'\x83', '\x2', '\x2', '\x86A', '\x86C', '\x5', '\xF0', 'y', '\x2', '\x86B', 
		'\x86A', '\x3', '\x2', '\x2', '\x2', '\x86B', '\x86C', '\x3', '\x2', '\x2', 
		'\x2', '\x86C', '\x86D', '\x3', '\x2', '\x2', '\x2', '\x86D', '\x86E', 
		'\a', '\x87', '\x2', '\x2', '\x86E', '\x875', '\x3', '\x2', '\x2', '\x2', 
		'\x86F', '\x870', '\a', '(', '\x2', '\x2', '\x870', '\x871', '\x5', '\x6', 
		'\x4', '\x2', '\x871', '\x872', '\x5', '\x1B4', '\xDB', '\x2', '\x872', 
		'\x873', '\a', '\x87', '\x2', '\x2', '\x873', '\x875', '\x3', '\x2', '\x2', 
		'\x2', '\x874', '\x836', '\x3', '\x2', '\x2', '\x2', '\x874', '\x85E', 
		'\x3', '\x2', '\x2', '\x2', '\x874', '\x86F', '\x3', '\x2', '\x2', '\x2', 
		'\x875', '\x153', '\x3', '\x2', '\x2', '\x2', '\x876', '\x878', '\x5', 
		'\x160', '\xB1', '\x2', '\x877', '\x876', '\x3', '\x2', '\x2', '\x2', 
		'\x877', '\x878', '\x3', '\x2', '\x2', '\x2', '\x878', '\x88B', '\x3', 
		'\x2', '\x2', '\x2', '\x879', '\x87A', '\a', '\x32', '\x2', '\x2', '\x87A', 
		'\x880', '\a', '\x87', '\x2', '\x2', '\x87B', '\x87D', '\x5', '\x160', 
		'\xB1', '\x2', '\x87C', '\x87B', '\x3', '\x2', '\x2', '\x2', '\x87C', 
		'\x87D', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x87E', '\x3', '\x2', '\x2', 
		'\x2', '\x87E', '\x87F', '\a', 'W', '\x2', '\x2', '\x87F', '\x881', '\a', 
		'\x87', '\x2', '\x2', '\x880', '\x87C', '\x3', '\x2', '\x2', '\x2', '\x880', 
		'\x881', '\x3', '\x2', '\x2', '\x2', '\x881', '\x88C', '\x3', '\x2', '\x2', 
		'\x2', '\x882', '\x883', '\a', 'W', '\x2', '\x2', '\x883', '\x889', '\a', 
		'\x87', '\x2', '\x2', '\x884', '\x886', '\x5', '\x160', '\xB1', '\x2', 
		'\x885', '\x884', '\x3', '\x2', '\x2', '\x2', '\x885', '\x886', '\x3', 
		'\x2', '\x2', '\x2', '\x886', '\x887', '\x3', '\x2', '\x2', '\x2', '\x887', 
		'\x888', '\a', '\x32', '\x2', '\x2', '\x888', '\x88A', '\a', '\x87', '\x2', 
		'\x2', '\x889', '\x885', '\x3', '\x2', '\x2', '\x2', '\x889', '\x88A', 
		'\x3', '\x2', '\x2', '\x2', '\x88A', '\x88C', '\x3', '\x2', '\x2', '\x2', 
		'\x88B', '\x879', '\x3', '\x2', '\x2', '\x2', '\x88B', '\x882', '\x3', 
		'\x2', '\x2', '\x2', '\x88C', '\x155', '\x3', '\x2', '\x2', '\x2', '\x88D', 
		'\x88E', '\a', '\x86', '\x2', '\x2', '\x88E', '\x88F', '\x5', '\x6', '\x4', 
		'\x2', '\x88F', '\x157', '\x3', '\x2', '\x2', '\x2', '\x890', '\x89C', 
		'\a', '~', '\x2', '\x2', '\x891', '\x896', '\x5', '\x15A', '\xAE', '\x2', 
		'\x892', '\x893', '\a', '\x85', '\x2', '\x2', '\x893', '\x895', '\x5', 
		'\x15A', '\xAE', '\x2', '\x894', '\x892', '\x3', '\x2', '\x2', '\x2', 
		'\x895', '\x898', '\x3', '\x2', '\x2', '\x2', '\x896', '\x894', '\x3', 
		'\x2', '\x2', '\x2', '\x896', '\x897', '\x3', '\x2', '\x2', '\x2', '\x897', 
		'\x89A', '\x3', '\x2', '\x2', '\x2', '\x898', '\x896', '\x3', '\x2', '\x2', 
		'\x2', '\x899', '\x89B', '\a', '\x85', '\x2', '\x2', '\x89A', '\x899', 
		'\x3', '\x2', '\x2', '\x2', '\x89A', '\x89B', '\x3', '\x2', '\x2', '\x2', 
		'\x89B', '\x89D', '\x3', '\x2', '\x2', '\x2', '\x89C', '\x891', '\x3', 
		'\x2', '\x2', '\x2', '\x89C', '\x89D', '\x3', '\x2', '\x2', '\x2', '\x89D', 
		'\x89E', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x89F', '\a', '\x7F', '\x2', 
		'\x2', '\x89F', '\x159', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A2', 
		'\x5', '\x160', '\xB1', '\x2', '\x8A1', '\x8A0', '\x3', '\x2', '\x2', 
		'\x2', '\x8A1', '\x8A2', '\x3', '\x2', '\x2', '\x2', '\x8A2', '\x8A3', 
		'\x3', '\x2', '\x2', '\x2', '\x8A3', '\x8A6', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x8A4', '\x8A5', '\a', '\x92', '\x2', '\x2', '\x8A5', '\x8A7', 
		'\x5', '\x1E', '\x10', '\x2', '\x8A6', '\x8A4', '\x3', '\x2', '\x2', '\x2', 
		'\x8A6', '\x8A7', '\x3', '\x2', '\x2', '\x2', '\x8A7', '\x15B', '\x3', 
		'\x2', '\x2', '\x2', '\x8A8', '\x8A9', '\a', '\x80', '\x2', '\x2', '\x8A9', 
		'\x8AA', '\x5', '\x15E', '\xB0', '\x2', '\x8AA', '\x8AB', '\a', '\x86', 
		'\x2', '\x2', '\x8AB', '\x8AD', '\x5', '\x166', '\xB4', '\x2', '\x8AC', 
		'\x8AE', '\a', '\x85', '\x2', '\x2', '\x8AD', '\x8AC', '\x3', '\x2', '\x2', 
		'\x2', '\x8AD', '\x8AE', '\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AF', 
		'\x3', '\x2', '\x2', '\x2', '\x8AF', '\x8B0', '\a', '\x81', '\x2', '\x2', 
		'\x8B0', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x8B1', '\x8B4', '\x5', 
		'\x18E', '\xC8', '\x2', '\x8B2', '\x8B4', '\x5', '\x1B4', '\xDB', '\x2', 
		'\x8B3', '\x8B1', '\x3', '\x2', '\x2', '\x2', '\x8B3', '\x8B2', '\x3', 
		'\x2', '\x2', '\x2', '\x8B4', '\x15F', '\x3', '\x2', '\x2', '\x2', '\x8B5', 
		'\x8B7', '\x5', '\x162', '\xB2', '\x2', '\x8B6', '\x8B5', '\x3', '\x2', 
		'\x2', '\x2', '\x8B7', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8B6', 
		'\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8B9', '\x3', '\x2', '\x2', '\x2', 
		'\x8B9', '\x161', '\x3', '\x2', '\x2', '\x2', '\x8BA', '\x8BE', '\a', 
		'\x80', '\x2', '\x2', '\x8BB', '\x8BC', '\x5', '\x164', '\xB3', '\x2', 
		'\x8BC', '\x8BD', '\a', '\x86', '\x2', '\x2', '\x8BD', '\x8BF', '\x3', 
		'\x2', '\x2', '\x2', '\x8BE', '\x8BB', '\x3', '\x2', '\x2', '\x2', '\x8BE', 
		'\x8BF', '\x3', '\x2', '\x2', '\x2', '\x8BF', '\x8C0', '\x3', '\x2', '\x2', 
		'\x2', '\x8C0', '\x8C2', '\x5', '\x166', '\xB4', '\x2', '\x8C1', '\x8C3', 
		'\a', '\x85', '\x2', '\x2', '\x8C2', '\x8C1', '\x3', '\x2', '\x2', '\x2', 
		'\x8C2', '\x8C3', '\x3', '\x2', '\x2', '\x2', '\x8C3', '\x8C4', '\x3', 
		'\x2', '\x2', '\x2', '\x8C4', '\x8C5', '\a', '\x81', '\x2', '\x2', '\x8C5', 
		'\x163', '\x3', '\x2', '\x2', '\x2', '\x8C6', '\x8C9', '\x5', '\x18E', 
		'\xC8', '\x2', '\x8C7', '\x8C9', '\x5', '\x1B4', '\xDB', '\x2', '\x8C8', 
		'\x8C6', '\x3', '\x2', '\x2', '\x2', '\x8C8', '\x8C7', '\x3', '\x2', '\x2', 
		'\x2', '\x8C9', '\x165', '\x3', '\x2', '\x2', '\x2', '\x8CA', '\x8CF', 
		'\x5', '\x168', '\xB5', '\x2', '\x8CB', '\x8CC', '\a', '\x85', '\x2', 
		'\x2', '\x8CC', '\x8CE', '\x5', '\x168', '\xB5', '\x2', '\x8CD', '\x8CB', 
		'\x3', '\x2', '\x2', '\x2', '\x8CE', '\x8D1', '\x3', '\x2', '\x2', '\x2', 
		'\x8CF', '\x8CD', '\x3', '\x2', '\x2', '\x2', '\x8CF', '\x8D0', '\x3', 
		'\x2', '\x2', '\x2', '\x8D0', '\x167', '\x3', '\x2', '\x2', '\x2', '\x8D1', 
		'\x8CF', '\x3', '\x2', '\x2', '\x2', '\x8D2', '\x8DF', '\x5', '\x4', '\x3', 
		'\x2', '\x8D3', '\x8DC', '\a', '\x82', '\x2', '\x2', '\x8D4', '\x8D9', 
		'\x5', '\x16A', '\xB6', '\x2', '\x8D5', '\x8D6', '\a', '\x85', '\x2', 
		'\x2', '\x8D6', '\x8D8', '\x5', '\x16A', '\xB6', '\x2', '\x8D7', '\x8D5', 
		'\x3', '\x2', '\x2', '\x2', '\x8D8', '\x8DB', '\x3', '\x2', '\x2', '\x2', 
		'\x8D9', '\x8D7', '\x3', '\x2', '\x2', '\x2', '\x8D9', '\x8DA', '\x3', 
		'\x2', '\x2', '\x2', '\x8DA', '\x8DD', '\x3', '\x2', '\x2', '\x2', '\x8DB', 
		'\x8D9', '\x3', '\x2', '\x2', '\x2', '\x8DC', '\x8D4', '\x3', '\x2', '\x2', 
		'\x2', '\x8DC', '\x8DD', '\x3', '\x2', '\x2', '\x2', '\x8DD', '\x8DE', 
		'\x3', '\x2', '\x2', '\x2', '\x8DE', '\x8E0', '\a', '\x83', '\x2', '\x2', 
		'\x8DF', '\x8D3', '\x3', '\x2', '\x2', '\x2', '\x8DF', '\x8E0', '\x3', 
		'\x2', '\x2', '\x2', '\x8E0', '\x169', '\x3', '\x2', '\x2', '\x2', '\x8E1', 
		'\x8E2', '\x5', '\x1B4', '\xDB', '\x2', '\x8E2', '\x8E3', '\a', '\x86', 
		'\x2', '\x2', '\x8E3', '\x8E5', '\x3', '\x2', '\x2', '\x2', '\x8E4', '\x8E1', 
		'\x3', '\x2', '\x2', '\x2', '\x8E4', '\x8E5', '\x3', '\x2', '\x2', '\x2', 
		'\x8E5', '\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8E6', '\x8E7', '\x5', 
		'\x1E', '\x10', '\x2', '\x8E7', '\x16B', '\x3', '\x2', '\x2', '\x2', '\x8E8', 
		'\x8EB', '\x5', '\xE', '\b', '\x2', '\x8E9', '\x8EB', '\x5', '\x16', '\f', 
		'\x2', '\x8EA', '\x8E8', '\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8E9', 
		'\x3', '\x2', '\x2', '\x2', '\x8EB', '\x8F0', '\x3', '\x2', '\x2', '\x2', 
		'\x8EC', '\x8EF', '\x5', '\x144', '\xA3', '\x2', '\x8ED', '\x8EF', '\a', 
		'\x95', '\x2', '\x2', '\x8EE', '\x8EC', '\x3', '\x2', '\x2', '\x2', '\x8EE', 
		'\x8ED', '\x3', '\x2', '\x2', '\x2', '\x8EF', '\x8F2', '\x3', '\x2', '\x2', 
		'\x2', '\x8F0', '\x8EE', '\x3', '\x2', '\x2', '\x2', '\x8F0', '\x8F1', 
		'\x3', '\x2', '\x2', '\x2', '\x8F1', '\x8F3', '\x3', '\x2', '\x2', '\x2', 
		'\x8F2', '\x8F0', '\x3', '\x2', '\x2', '\x2', '\x8F3', '\x8F4', '\a', 
		'\x8A', '\x2', '\x2', '\x8F4', '\x8F8', '\x3', '\x2', '\x2', '\x2', '\x8F5', 
		'\x8F6', '\a', 'm', '\x2', '\x2', '\x8F6', '\x8F8', '\a', '\x8A', '\x2', 
		'\x2', '\x8F7', '\x8EA', '\x3', '\x2', '\x2', '\x2', '\x8F7', '\x8F5', 
		'\x3', '\x2', '\x2', '\x2', '\x8F8', '\x16D', '\x3', '\x2', '\x2', '\x2', 
		'\x8F9', '\x8FE', '\x5', '\x170', '\xB9', '\x2', '\x8FA', '\x8FB', '\a', 
		'\x85', '\x2', '\x2', '\x8FB', '\x8FD', '\x5', '\x170', '\xB9', '\x2', 
		'\x8FC', '\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x900', '\x3', 
		'\x2', '\x2', '\x2', '\x8FE', '\x8FC', '\x3', '\x2', '\x2', '\x2', '\x8FE', 
		'\x8FF', '\x3', '\x2', '\x2', '\x2', '\x8FF', '\x16F', '\x3', '\x2', '\x2', 
		'\x2', '\x900', '\x8FE', '\x3', '\x2', '\x2', '\x2', '\x901', '\x902', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x902', '\x903', '\a', '\x92', '\x2', 
		'\x2', '\x903', '\x904', '\x5', '\x172', '\xBA', '\x2', '\x904', '\x171', 
		'\x3', '\x2', '\x2', '\x2', '\x905', '\x907', '\a', '\x8D', '\x2', '\x2', 
		'\x906', '\x905', '\x3', '\x2', '\x2', '\x2', '\x906', '\x907', '\x3', 
		'\x2', '\x2', '\x2', '\x907', '\x908', '\x3', '\x2', '\x2', '\x2', '\x908', 
		'\x90B', '\x5', '\x1E', '\x10', '\x2', '\x909', '\x90B', '\x5', '\x176', 
		'\xBC', '\x2', '\x90A', '\x906', '\x3', '\x2', '\x2', '\x2', '\x90A', 
		'\x909', '\x3', '\x2', '\x2', '\x2', '\x90B', '\x173', '\x3', '\x2', '\x2', 
		'\x2', '\x90C', '\x90D', '\x5', '\x1B4', '\xDB', '\x2', '\x90D', '\x90E', 
		'\a', '\x80', '\x2', '\x2', '\x90E', '\x90F', '\x5', '\x1E', '\x10', '\x2', 
		'\x90F', '\x910', '\a', '\x81', '\x2', '\x2', '\x910', '\x175', '\x3', 
		'\x2', '\x2', '\x2', '\x911', '\x912', '\a', 'Z', '\x2', '\x2', '\x912', 
		'\x913', '\x5', '\x6', '\x4', '\x2', '\x913', '\x914', '\a', '\x80', '\x2', 
		'\x2', '\x914', '\x915', '\x5', '\x1E', '\x10', '\x2', '\x915', '\x916', 
		'\a', '\x81', '\x2', '\x2', '\x916', '\x92F', '\x3', '\x2', '\x2', '\x2', 
		'\x917', '\x919', '\a', 'Z', '\x2', '\x2', '\x918', '\x91A', '\x5', '\x6', 
		'\x4', '\x2', '\x919', '\x918', '\x3', '\x2', '\x2', '\x2', '\x919', '\x91A', 
		'\x3', '\x2', '\x2', '\x2', '\x91A', '\x91B', '\x3', '\x2', '\x2', '\x2', 
		'\x91B', '\x91D', '\a', '\x80', '\x2', '\x2', '\x91C', '\x91E', '\x5', 
		'\x1E', '\x10', '\x2', '\x91D', '\x91C', '\x3', '\x2', '\x2', '\x2', '\x91D', 
		'\x91E', '\x3', '\x2', '\x2', '\x2', '\x91E', '\x91F', '\x3', '\x2', '\x2', 
		'\x2', '\x91F', '\x920', '\a', '\x81', '\x2', '\x2', '\x920', '\x921', 
		'\a', '~', '\x2', '\x2', '\x921', '\x926', '\x5', '\x1E', '\x10', '\x2', 
		'\x922', '\x923', '\a', '\x85', '\x2', '\x2', '\x923', '\x925', '\x5', 
		'\x1E', '\x10', '\x2', '\x924', '\x922', '\x3', '\x2', '\x2', '\x2', '\x925', 
		'\x928', '\x3', '\x2', '\x2', '\x2', '\x926', '\x924', '\x3', '\x2', '\x2', 
		'\x2', '\x926', '\x927', '\x3', '\x2', '\x2', '\x2', '\x927', '\x92A', 
		'\x3', '\x2', '\x2', '\x2', '\x928', '\x926', '\x3', '\x2', '\x2', '\x2', 
		'\x929', '\x92B', '\a', '\x85', '\x2', '\x2', '\x92A', '\x929', '\x3', 
		'\x2', '\x2', '\x2', '\x92A', '\x92B', '\x3', '\x2', '\x2', '\x2', '\x92B', 
		'\x92C', '\x3', '\x2', '\x2', '\x2', '\x92C', '\x92D', '\a', '\x7F', '\x2', 
		'\x2', '\x92D', '\x92F', '\x3', '\x2', '\x2', '\x2', '\x92E', '\x911', 
		'\x3', '\x2', '\x2', '\x2', '\x92E', '\x917', '\x3', '\x2', '\x2', '\x2', 
		'\x92F', '\x177', '\x3', '\x2', '\x2', '\x2', '\x930', '\x931', '\a', 
		'\x92', '\x2', '\x2', '\x931', '\x932', '\a', '\x94', '\x2', '\x2', '\x932', 
		'\x933', '\x6', '\xBD', '\x2', '\x3', '\x933', '\x179', '\x3', '\x2', 
		'\x2', '\x2', '\x934', '\x935', '\a', '\x94', '\x2', '\x2', '\x935', '\x936', 
		'\a', '\x94', '\x2', '\x2', '\x936', '\x937', '\x6', '\xBE', '\x3', '\x3', 
		'\x937', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x938', '\x939', '\a', 
		'\x94', '\x2', '\x2', '\x939', '\x93A', '\a', '\xA0', '\x2', '\x2', '\x93A', 
		'\x93B', '\x6', '\xBF', '\x4', '\x3', '\x93B', '\x17D', '\x3', '\x2', 
		'\x2', '\x2', '\x93C', '\x945', '\x5', '\x180', '\xC1', '\x2', '\x93D', 
		'\x945', '\x5', '\x182', '\xC2', '\x2', '\x93E', '\x945', '\a', 'u', '\x2', 
		'\x2', '\x93F', '\x945', '\a', 'v', '\x2', '\x2', '\x940', '\x945', '\a', 
		'w', '\x2', '\x2', '\x941', '\x945', '\a', 'x', '\x2', '\x2', '\x942', 
		'\x945', '\a', 'y', '\x2', '\x2', '\x943', '\x945', '\a', '\x44', '\x2', 
		'\x2', '\x944', '\x93C', '\x3', '\x2', '\x2', '\x2', '\x944', '\x93D', 
		'\x3', '\x2', '\x2', '\x2', '\x944', '\x93E', '\x3', '\x2', '\x2', '\x2', 
		'\x944', '\x93F', '\x3', '\x2', '\x2', '\x2', '\x944', '\x940', '\x3', 
		'\x2', '\x2', '\x2', '\x944', '\x941', '\x3', '\x2', '\x2', '\x2', '\x944', 
		'\x942', '\x3', '\x2', '\x2', '\x2', '\x944', '\x943', '\x3', '\x2', '\x2', 
		'\x2', '\x945', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x946', '\x947', 
		'\t', '\x11', '\x2', '\x2', '\x947', '\x181', '\x3', '\x2', '\x2', '\x2', 
		'\x948', '\x94D', '\x5', '\x184', '\xC3', '\x2', '\x949', '\x94D', '\x5', 
		'\x186', '\xC4', '\x2', '\x94A', '\x94D', '\a', 'z', '\x2', '\x2', '\x94B', 
		'\x94D', '\a', '{', '\x2', '\x2', '\x94C', '\x948', '\x3', '\x2', '\x2', 
		'\x2', '\x94C', '\x949', '\x3', '\x2', '\x2', '\x2', '\x94C', '\x94A', 
		'\x3', '\x2', '\x2', '\x2', '\x94C', '\x94B', '\x3', '\x2', '\x2', '\x2', 
		'\x94D', '\x183', '\x3', '\x2', '\x2', '\x2', '\x94E', '\x952', '\a', 
		'|', '\x2', '\x2', '\x94F', '\x951', '\x5', '\x188', '\xC5', '\x2', '\x950', 
		'\x94F', '\x3', '\x2', '\x2', '\x2', '\x951', '\x954', '\x3', '\x2', '\x2', 
		'\x2', '\x952', '\x950', '\x3', '\x2', '\x2', '\x2', '\x952', '\x953', 
		'\x3', '\x2', '\x2', '\x2', '\x953', '\x955', '\x3', '\x2', '\x2', '\x2', 
		'\x954', '\x952', '\x3', '\x2', '\x2', '\x2', '\x955', '\x956', '\a', 
		'\xB1', '\x2', '\x2', '\x956', '\x185', '\x3', '\x2', '\x2', '\x2', '\x957', 
		'\x95B', '\a', '}', '\x2', '\x2', '\x958', '\x95A', '\x5', '\x18A', '\xC6', 
		'\x2', '\x959', '\x958', '\x3', '\x2', '\x2', '\x2', '\x95A', '\x95D', 
		'\x3', '\x2', '\x2', '\x2', '\x95B', '\x959', '\x3', '\x2', '\x2', '\x2', 
		'\x95B', '\x95C', '\x3', '\x2', '\x2', '\x2', '\x95C', '\x95E', '\x3', 
		'\x2', '\x2', '\x2', '\x95D', '\x95B', '\x3', '\x2', '\x2', '\x2', '\x95E', 
		'\x95F', '\a', '\xB1', '\x2', '\x2', '\x95F', '\x187', '\x3', '\x2', '\x2', 
		'\x2', '\x960', '\x965', '\x5', '\x18C', '\xC7', '\x2', '\x961', '\x965', 
		'\a', '\xAD', '\x2', '\x2', '\x962', '\x965', '\a', '\xAF', '\x2', '\x2', 
		'\x963', '\x965', '\a', '\xB2', '\x2', '\x2', '\x964', '\x960', '\x3', 
		'\x2', '\x2', '\x2', '\x964', '\x961', '\x3', '\x2', '\x2', '\x2', '\x964', 
		'\x962', '\x3', '\x2', '\x2', '\x2', '\x964', '\x963', '\x3', '\x2', '\x2', 
		'\x2', '\x965', '\x189', '\x3', '\x2', '\x2', '\x2', '\x966', '\x96B', 
		'\x5', '\x18C', '\xC7', '\x2', '\x967', '\x96B', '\a', '\xAD', '\x2', 
		'\x2', '\x968', '\x96B', '\a', '\xB0', '\x2', '\x2', '\x969', '\x96B', 
		'\a', '\xB3', '\x2', '\x2', '\x96A', '\x966', '\x3', '\x2', '\x2', '\x2', 
		'\x96A', '\x967', '\x3', '\x2', '\x2', '\x2', '\x96A', '\x968', '\x3', 
		'\x2', '\x2', '\x2', '\x96A', '\x969', '\x3', '\x2', '\x2', '\x2', '\x96B', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x971', '\x5', '\x1E', 
		'\x10', '\x2', '\x96D', '\x96E', '\a', '\x85', '\x2', '\x2', '\x96E', 
		'\x970', '\x5', '\x1E', '\x10', '\x2', '\x96F', '\x96D', '\x3', '\x2', 
		'\x2', '\x2', '\x970', '\x973', '\x3', '\x2', '\x2', '\x2', '\x971', '\x96F', 
		'\x3', '\x2', '\x2', '\x2', '\x971', '\x972', '\x3', '\x2', '\x2', '\x2', 
		'\x972', '\x97A', '\x3', '\x2', '\x2', '\x2', '\x973', '\x971', '\x3', 
		'\x2', '\x2', '\x2', '\x974', '\x976', '\a', '\x86', '\x2', '\x2', '\x975', 
		'\x977', '\a', '\xB5', '\x2', '\x2', '\x976', '\x975', '\x3', '\x2', '\x2', 
		'\x2', '\x977', '\x978', '\x3', '\x2', '\x2', '\x2', '\x978', '\x976', 
		'\x3', '\x2', '\x2', '\x2', '\x978', '\x979', '\x3', '\x2', '\x2', '\x2', 
		'\x979', '\x97B', '\x3', '\x2', '\x2', '\x2', '\x97A', '\x974', '\x3', 
		'\x2', '\x2', '\x2', '\x97A', '\x97B', '\x3', '\x2', '\x2', '\x2', '\x97B', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x97C', '\x97D', '\t', '\x12', '\x2', 
		'\x2', '\x97D', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x97E', '\x97F', 
		'\a', '\x1B', '\x2', '\x2', '\x97F', '\x981', '\x5', '\x1B4', '\xDB', 
		'\x2', '\x980', '\x982', '\x5', '\xE8', 'u', '\x2', '\x981', '\x980', 
		'\x3', '\x2', '\x2', '\x2', '\x981', '\x982', '\x3', '\x2', '\x2', '\x2', 
		'\x982', '\x984', '\x3', '\x2', '\x2', '\x2', '\x983', '\x985', '\x5', 
		'\xEC', 'w', '\x2', '\x984', '\x983', '\x3', '\x2', '\x2', '\x2', '\x984', 
		'\x985', '\x3', '\x2', '\x2', '\x2', '\x985', '\x987', '\x3', '\x2', '\x2', 
		'\x2', '\x986', '\x988', '\x5', '\xF0', 'y', '\x2', '\x987', '\x986', 
		'\x3', '\x2', '\x2', '\x2', '\x987', '\x988', '\x3', '\x2', '\x2', '\x2', 
		'\x988', '\x989', '\x3', '\x2', '\x2', '\x2', '\x989', '\x98B', '\x5', 
		'\xFC', '\x7F', '\x2', '\x98A', '\x98C', '\a', '\x87', '\x2', '\x2', '\x98B', 
		'\x98A', '\x3', '\x2', '\x2', '\x2', '\x98B', '\x98C', '\x3', '\x2', '\x2', 
		'\x2', '\x98C', '\x191', '\x3', '\x2', '\x2', '\x2', '\x98D', '\x98F', 
		'\t', '\x13', '\x2', '\x2', '\x98E', '\x98D', '\x3', '\x2', '\x2', '\x2', 
		'\x98E', '\x98F', '\x3', '\x2', '\x2', '\x2', '\x98F', '\x990', '\x3', 
		'\x2', '\x2', '\x2', '\x990', '\x991', '\a', ']', '\x2', '\x2', '\x991', 
		'\x993', '\x5', '\x1B4', '\xDB', '\x2', '\x992', '\x994', '\x5', '\xE8', 
		'u', '\x2', '\x993', '\x992', '\x3', '\x2', '\x2', '\x2', '\x993', '\x994', 
		'\x3', '\x2', '\x2', '\x2', '\x994', '\x996', '\x3', '\x2', '\x2', '\x2', 
		'\x995', '\x997', '\x5', '\x13C', '\x9F', '\x2', '\x996', '\x995', '\x3', 
		'\x2', '\x2', '\x2', '\x996', '\x997', '\x3', '\x2', '\x2', '\x2', '\x997', 
		'\x999', '\x3', '\x2', '\x2', '\x2', '\x998', '\x99A', '\x5', '\xF0', 
		'y', '\x2', '\x999', '\x998', '\x3', '\x2', '\x2', '\x2', '\x999', '\x99A', 
		'\x3', '\x2', '\x2', '\x2', '\x99A', '\x99B', '\x3', '\x2', '\x2', '\x2', 
		'\x99B', '\x99D', '\x5', '\x13E', '\xA0', '\x2', '\x99C', '\x99E', '\a', 
		'\x87', '\x2', '\x2', '\x99D', '\x99C', '\x3', '\x2', '\x2', '\x2', '\x99D', 
		'\x99E', '\x3', '\x2', '\x2', '\x2', '\x99E', '\x193', '\x3', '\x2', '\x2', 
		'\x2', '\x99F', '\x9A0', '\a', '\x39', '\x2', '\x2', '\x9A0', '\x9A2', 
		'\x5', '\x1B4', '\xDB', '\x2', '\x9A1', '\x9A3', '\x5', '\x148', '\xA5', 
		'\x2', '\x9A2', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9A2', '\x9A3', 
		'\x3', '\x2', '\x2', '\x2', '\x9A3', '\x9A5', '\x3', '\x2', '\x2', '\x2', 
		'\x9A4', '\x9A6', '\x5', '\x14E', '\xA8', '\x2', '\x9A5', '\x9A4', '\x3', 
		'\x2', '\x2', '\x2', '\x9A5', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9A6', 
		'\x9A8', '\x3', '\x2', '\x2', '\x2', '\x9A7', '\x9A9', '\x5', '\xF0', 
		'y', '\x2', '\x9A8', '\x9A7', '\x3', '\x2', '\x2', '\x2', '\x9A8', '\x9A9', 
		'\x3', '\x2', '\x2', '\x2', '\x9A9', '\x9AA', '\x3', '\x2', '\x2', '\x2', 
		'\x9AA', '\x9AC', '\x5', '\xFC', '\x7F', '\x2', '\x9AB', '\x9AD', '\a', 
		'\x87', '\x2', '\x2', '\x9AC', '\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9AC', 
		'\x9AD', '\x3', '\x2', '\x2', '\x2', '\x9AD', '\x195', '\x3', '\x2', '\x2', 
		'\x2', '\x9AE', '\x9AF', '\a', '&', '\x2', '\x2', '\x9AF', '\x9B1', '\x5', 
		'\x1B4', '\xDB', '\x2', '\x9B0', '\x9B2', '\x5', '\x156', '\xAC', '\x2', 
		'\x9B1', '\x9B0', '\x3', '\x2', '\x2', '\x2', '\x9B1', '\x9B2', '\x3', 
		'\x2', '\x2', '\x2', '\x9B2', '\x9B3', '\x3', '\x2', '\x2', '\x2', '\x9B3', 
		'\x9B5', '\x5', '\x158', '\xAD', '\x2', '\x9B4', '\x9B6', '\a', '\x87', 
		'\x2', '\x2', '\x9B5', '\x9B4', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9B6', 
		'\x3', '\x2', '\x2', '\x2', '\x9B6', '\x197', '\x3', '\x2', '\x2', '\x2', 
		'\x9B7', '\x9B8', '\a', ' ', '\x2', '\x2', '\x9B8', '\x9B9', '\x5', '\x114', 
		'\x8B', '\x2', '\x9B9', '\x9BB', '\x5', '\x1B4', '\xDB', '\x2', '\x9BA', 
		'\x9BC', '\x5', '\x148', '\xA5', '\x2', '\x9BB', '\x9BA', '\x3', '\x2', 
		'\x2', '\x2', '\x9BB', '\x9BC', '\x3', '\x2', '\x2', '\x2', '\x9BC', '\x9BD', 
		'\x3', '\x2', '\x2', '\x2', '\x9BD', '\x9BF', '\a', '\x82', '\x2', '\x2', 
		'\x9BE', '\x9C0', '\x5', '\x11A', '\x8E', '\x2', '\x9BF', '\x9BE', '\x3', 
		'\x2', '\x2', '\x2', '\x9BF', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\x9C0', 
		'\x9C1', '\x3', '\x2', '\x2', '\x2', '\x9C1', '\x9C3', '\a', '\x83', '\x2', 
		'\x2', '\x9C2', '\x9C4', '\x5', '\xF0', 'y', '\x2', '\x9C3', '\x9C2', 
		'\x3', '\x2', '\x2', '\x2', '\x9C3', '\x9C4', '\x3', '\x2', '\x2', '\x2', 
		'\x9C4', '\x9C5', '\x3', '\x2', '\x2', '\x2', '\x9C5', '\x9C6', '\a', 
		'\x87', '\x2', '\x2', '\x9C6', '\x199', '\x3', '\x2', '\x2', '\x2', '\x9C7', 
		'\x9C8', '\a', '(', '\x2', '\x2', '\x9C8', '\x9D1', '\x5', '\x6', '\x4', 
		'\x2', '\x9C9', '\x9CA', '\x5', '\x10E', '\x88', '\x2', '\x9CA', '\x9CB', 
		'\a', '\x87', '\x2', '\x2', '\x9CB', '\x9D2', '\x3', '\x2', '\x2', '\x2', 
		'\x9CC', '\x9CD', '\x5', '\x116', '\x8C', '\x2', '\x9CD', '\x9CE', '\a', 
		'~', '\x2', '\x2', '\x9CE', '\x9CF', '\x5', '\x12E', '\x98', '\x2', '\x9CF', 
		'\x9D0', '\a', '\x7F', '\x2', '\x2', '\x9D0', '\x9D2', '\x3', '\x2', '\x2', 
		'\x2', '\x9D1', '\x9C9', '\x3', '\x2', '\x2', '\x2', '\x9D1', '\x9CC', 
		'\x3', '\x2', '\x2', '\x2', '\x9D2', '\x19B', '\x3', '\x2', '\x2', '\x2', 
		'\x9D3', '\x9D4', '\x5', '\x10E', '\x88', '\x2', '\x9D4', '\x9D5', '\a', 
		'\x87', '\x2', '\x2', '\x9D5', '\x19D', '\x3', '\x2', '\x2', '\x2', '\x9D6', 
		'\x9E4', '\x5', '\x116', '\x8C', '\x2', '\x9D7', '\x9D8', '\a', '~', '\x2', 
		'\x2', '\x9D8', '\x9D9', '\x5', '\x124', '\x93', '\x2', '\x9D9', '\x9DE', 
		'\a', '\x7F', '\x2', '\x2', '\x9DA', '\x9DB', '\a', '\x92', '\x2', '\x2', 
		'\x9DB', '\x9DC', '\x5', '\x112', '\x8A', '\x2', '\x9DC', '\x9DD', '\a', 
		'\x87', '\x2', '\x2', '\x9DD', '\x9DF', '\x3', '\x2', '\x2', '\x2', '\x9DE', 
		'\x9DA', '\x3', '\x2', '\x2', '\x2', '\x9DE', '\x9DF', '\x3', '\x2', '\x2', 
		'\x2', '\x9DF', '\x9E5', '\x3', '\x2', '\x2', '\x2', '\x9E0', '\x9E1', 
		'\x5', '\x178', '\xBD', '\x2', '\x9E1', '\x9E2', '\x5', 'L', '\'', '\x2', 
		'\x9E2', '\x9E3', '\a', '\x87', '\x2', '\x2', '\x9E3', '\x9E5', '\x3', 
		'\x2', '\x2', '\x2', '\x9E4', '\x9D7', '\x3', '\x2', '\x2', '\x2', '\x9E4', 
		'\x9E0', '\x3', '\x2', '\x2', '\x2', '\x9E5', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x9E6', '\x9E7', '\a', '\x1C', '\x2', '\x2', '\x9E7', '\x9E8', 
		'\x5', '\x6', '\x4', '\x2', '\x9E8', '\x9E9', '\x5', '\x10A', '\x86', 
		'\x2', '\x9E9', '\x9EA', '\a', '\x87', '\x2', '\x2', '\x9EA', '\x1A1', 
		'\x3', '\x2', '\x2', '\x2', '\x9EB', '\x9EC', '\a', '_', '\x2', '\x2', 
		'\x9EC', '\x9ED', '\a', '\x80', '\x2', '\x2', '\x9ED', '\x9EE', '\x5', 
		'\x11A', '\x8E', '\x2', '\x9EE', '\x9F7', '\a', '\x81', '\x2', '\x2', 
		'\x9EF', '\x9F0', '\a', '~', '\x2', '\x2', '\x9F0', '\x9F1', '\x5', '\x124', 
		'\x93', '\x2', '\x9F1', '\x9F2', '\a', '\x7F', '\x2', '\x2', '\x9F2', 
		'\x9F8', '\x3', '\x2', '\x2', '\x2', '\x9F3', '\x9F4', '\x5', '\x178', 
		'\xBD', '\x2', '\x9F4', '\x9F5', '\x5', 'L', '\'', '\x2', '\x9F5', '\x9F6', 
		'\a', '\x87', '\x2', '\x2', '\x9F6', '\x9F8', '\x3', '\x2', '\x2', '\x2', 
		'\x9F7', '\x9EF', '\x3', '\x2', '\x2', '\x2', '\x9F7', '\x9F3', '\x3', 
		'\x2', '\x2', '\x2', '\x9F8', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x9F9', 
		'\x9FA', '\a', '\x91', '\x2', '\x2', '\x9FA', '\x9FB', '\x5', '\x1B4', 
		'\xDB', '\x2', '\x9FB', '\x9FC', '\a', '\x82', '\x2', '\x2', '\x9FC', 
		'\x9FD', '\a', '\x83', '\x2', '\x2', '\x9FD', '\x9FE', '\x5', '\x13A', 
		'\x9E', '\x2', '\x9FE', '\x1A5', '\x3', '\x2', '\x2', '\x2', '\x9FF', 
		'\xA00', '\x5', '\x1B4', '\xDB', '\x2', '\xA00', '\xA02', '\a', '\x82', 
		'\x2', '\x2', '\xA01', '\xA03', '\x5', '\x11A', '\x8E', '\x2', '\xA02', 
		'\xA01', '\x3', '\x2', '\x2', '\x2', '\xA02', '\xA03', '\x3', '\x2', '\x2', 
		'\x2', '\xA03', '\xA04', '\x3', '\x2', '\x2', '\x2', '\xA04', '\xA06', 
		'\a', '\x83', '\x2', '\x2', '\xA05', '\xA07', '\x5', '\x138', '\x9D', 
		'\x2', '\xA06', '\xA05', '\x3', '\x2', '\x2', '\x2', '\xA06', '\xA07', 
		'\x3', '\x2', '\x2', '\x2', '\xA07', '\xA08', '\x3', '\x2', '\x2', '\x2', 
		'\xA08', '\xA09', '\x5', '\x13A', '\x9E', '\x2', '\xA09', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\xA0A', '\xA0C', '\x5', '\x1AA', '\xD6', '\x2', 
		'\xA0B', '\xA0D', '\x5', '\xE8', 'u', '\x2', '\xA0C', '\xA0B', '\x3', 
		'\x2', '\x2', '\x2', '\xA0C', '\xA0D', '\x3', '\x2', '\x2', '\x2', '\xA0D', 
		'\xA0E', '\x3', '\x2', '\x2', '\x2', '\xA0E', '\xA10', '\a', '\x82', '\x2', 
		'\x2', '\xA0F', '\xA11', '\x5', '\x11A', '\x8E', '\x2', '\xA10', '\xA0F', 
		'\x3', '\x2', '\x2', '\x2', '\xA10', '\xA11', '\x3', '\x2', '\x2', '\x2', 
		'\xA11', '\xA12', '\x3', '\x2', '\x2', '\x2', '\xA12', '\xA14', '\a', 
		'\x83', '\x2', '\x2', '\xA13', '\xA15', '\x5', '\xF0', 'y', '\x2', '\xA14', 
		'\xA13', '\x3', '\x2', '\x2', '\x2', '\xA14', '\xA15', '\x3', '\x2', '\x2', 
		'\x2', '\xA15', '\xA1B', '\x3', '\x2', '\x2', '\x2', '\xA16', '\xA1C', 
		'\x5', '\x118', '\x8D', '\x2', '\xA17', '\xA18', '\x5', '\x178', '\xBD', 
		'\x2', '\xA18', '\xA19', '\x5', 'L', '\'', '\x2', '\xA19', '\xA1A', '\a', 
		'\x87', '\x2', '\x2', '\xA1A', '\xA1C', '\x3', '\x2', '\x2', '\x2', '\xA1B', 
		'\xA16', '\x3', '\x2', '\x2', '\x2', '\xA1B', '\xA17', '\x3', '\x2', '\x2', 
		'\x2', '\xA1C', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\xA1D', '\xA23', 
		'\x5', '\x1B4', '\xDB', '\x2', '\xA1E', '\xA1F', '\x5', '\x1B4', '\xDB', 
		'\x2', '\xA1F', '\xA20', '\a', '\x96', '\x2', '\x2', '\xA20', '\xA21', 
		'\x5', '\x1B4', '\xDB', '\x2', '\xA21', '\xA23', '\x3', '\x2', '\x2', 
		'\x2', '\xA22', '\xA1D', '\x3', '\x2', '\x2', '\x2', '\xA22', '\xA1E', 
		'\x3', '\x2', '\x2', '\x2', '\xA23', '\xA2B', '\x3', '\x2', '\x2', '\x2', 
		'\xA24', '\xA26', '\x5', '\x18', '\r', '\x2', '\xA25', '\xA24', '\x3', 
		'\x2', '\x2', '\x2', '\xA25', '\xA26', '\x3', '\x2', '\x2', '\x2', '\xA26', 
		'\xA27', '\x3', '\x2', '\x2', '\x2', '\xA27', '\xA28', '\a', '\x84', '\x2', 
		'\x2', '\xA28', '\xA2A', '\x5', '\x1B4', '\xDB', '\x2', '\xA29', '\xA25', 
		'\x3', '\x2', '\x2', '\x2', '\xA2A', '\xA2D', '\x3', '\x2', '\x2', '\x2', 
		'\xA2B', '\xA29', '\x3', '\x2', '\x2', '\x2', '\xA2B', '\xA2C', '\x3', 
		'\x2', '\x2', '\x2', '\xA2C', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\xA2D', 
		'\xA2B', '\x3', '\x2', '\x2', '\x2', '\xA2E', '\xA2F', '\a', 'G', '\x2', 
		'\x2', '\xA2F', '\xA30', '\x5', '\x134', '\x9B', '\x2', '\xA30', '\xA32', 
		'\a', '\x82', '\x2', '\x2', '\xA31', '\xA33', '\a', '\x37', '\x2', '\x2', 
		'\xA32', '\xA31', '\x3', '\x2', '\x2', '\x2', '\xA32', '\xA33', '\x3', 
		'\x2', '\x2', '\x2', '\xA33', '\xA34', '\x3', '\x2', '\x2', '\x2', '\xA34', 
		'\xA3A', '\x5', '\x1AE', '\xD8', '\x2', '\xA35', '\xA37', '\a', '\x85', 
		'\x2', '\x2', '\xA36', '\xA38', '\a', '\x37', '\x2', '\x2', '\xA37', '\xA36', 
		'\x3', '\x2', '\x2', '\x2', '\xA37', '\xA38', '\x3', '\x2', '\x2', '\x2', 
		'\xA38', '\xA39', '\x3', '\x2', '\x2', '\x2', '\xA39', '\xA3B', '\x5', 
		'\x1AE', '\xD8', '\x2', '\xA3A', '\xA35', '\x3', '\x2', '\x2', '\x2', 
		'\xA3A', '\xA3B', '\x3', '\x2', '\x2', '\x2', '\xA3B', '\xA3C', '\x3', 
		'\x2', '\x2', '\x2', '\xA3C', '\xA42', '\a', '\x83', '\x2', '\x2', '\xA3D', 
		'\xA43', '\x5', '\x13A', '\x9E', '\x2', '\xA3E', '\xA3F', '\x5', '\x178', 
		'\xBD', '\x2', '\xA3F', '\xA40', '\x5', 'L', '\'', '\x2', '\xA40', '\xA41', 
		'\a', '\x87', '\x2', '\x2', '\xA41', '\xA43', '\x3', '\x2', '\x2', '\x2', 
		'\xA42', '\xA3D', '\x3', '\x2', '\x2', '\x2', '\xA42', '\xA3E', '\x3', 
		'\x2', '\x2', '\x2', '\xA43', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\xA44', 
		'\xA45', '\x5', '\x6', '\x4', '\x2', '\xA45', '\xA48', '\x5', '\x1B4', 
		'\xDB', '\x2', '\xA46', '\xA47', '\a', '\x92', '\x2', '\x2', '\xA47', 
		'\xA49', '\x5', '\x1E', '\x10', '\x2', '\xA48', '\xA46', '\x3', '\x2', 
		'\x2', '\x2', '\xA48', '\xA49', '\x3', '\x2', '\x2', '\x2', '\xA49', '\x1AF', 
		'\x3', '\x2', '\x2', '\x2', '\xA4A', '\xA4C', '\a', '\x82', '\x2', '\x2', 
		'\xA4B', '\xA4D', '\x5', '\x1A', '\xE', '\x2', '\xA4C', '\xA4B', '\x3', 
		'\x2', '\x2', '\x2', '\xA4C', '\xA4D', '\x3', '\x2', '\x2', '\x2', '\xA4D', 
		'\xA4E', '\x3', '\x2', '\x2', '\x2', '\xA4E', '\xA4F', '\a', '\x83', '\x2', 
		'\x2', '\xA4F', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\xA50', '\xA52', 
		'\a', '\x82', '\x2', '\x2', '\xA51', '\xA53', '\x5', '\x1A', '\xE', '\x2', 
		'\xA52', '\xA51', '\x3', '\x2', '\x2', '\x2', '\xA52', '\xA53', '\x3', 
		'\x2', '\x2', '\x2', '\xA53', '\xA54', '\x3', '\x2', '\x2', '\x2', '\xA54', 
		'\xA56', '\a', '\x83', '\x2', '\x2', '\xA55', '\xA57', '\x5', 'Z', '.', 
		'\x2', '\xA56', '\xA55', '\x3', '\x2', '\x2', '\x2', '\xA56', '\xA57', 
		'\x3', '\x2', '\x2', '\x2', '\xA57', '\x1B3', '\x3', '\x2', '\x2', '\x2', 
		'\xA58', '\xA59', '\t', '\x14', '\x2', '\x2', '\xA59', '\x1B5', '\x3', 
		'\x2', '\x2', '\x2', '\x15C', '\x1B7', '\x1BA', '\x1BD', '\x1C2', '\x1C6', 
		'\x1CC', '\x1CF', '\x1D4', '\x1D8', '\x1DF', '\x1E1', '\x1E9', '\x1F1', 
		'\x1F7', '\x1FB', '\x200', '\x20A', '\x212', '\x21C', '\x222', '\x225', 
		'\x229', '\x231', '\x236', '\x241', '\x245', '\x247', '\x254', '\x25C', 
		'\x262', '\x264', '\x26B', '\x273', '\x27B', '\x283', '\x28B', '\x293', 
		'\x29D', '\x29F', '\x2A5', '\x2AA', '\x2B2', '\x2BA', '\x2C2', '\x2C4', 
		'\x2C7', '\x2CE', '\x2D3', '\x2DA', '\x2DE', '\x2E0', '\x2FC', '\x300', 
		'\x305', '\x309', '\x311', '\x314', '\x319', '\x31D', '\x321', '\x327', 
		'\x335', '\x33B', '\x347', '\x34B', '\x350', '\x354', '\x35A', '\x362', 
		'\x36B', '\x37D', '\x380', '\x385', '\x388', '\x397', '\x39D', '\x3A1', 
		'\x3A7', '\x3AC', '\x3AF', '\x3B7', '\x3BF', '\x3CA', '\x3CF', '\x3D4', 
		'\x3D6', '\x3DF', '\x3E7', '\x3EE', '\x3F6', '\x3FA', '\x403', '\x408', 
		'\x40A', '\x413', '\x41B', '\x41F', '\x424', '\x426', '\x42B', '\x42F', 
		'\x436', '\x43E', '\x440', '\x444', '\x447', '\x44A', '\x452', '\x45C', 
		'\x46D', '\x474', '\x478', '\x482', '\x487', '\x48E', '\x497', '\x49C', 
		'\x4A3', '\x4AF', '\x4BA', '\x4C2', '\x4C7', '\x4D0', '\x4D9', '\x4E2', 
		'\x4E8', '\x4ED', '\x4F1', '\x4F5', '\x4F9', '\x4FD', '\x504', '\x50C', 
		'\x519', '\x523', '\x539', '\x53D', '\x541', '\x546', '\x55A', '\x55F', 
		'\x564', '\x56B', '\x56E', '\x584', '\x590', '\x594', '\x59C', '\x5A4', 
		'\x5AB', '\x5AF', '\x5B4', '\x5B7', '\x5BC', '\x5C4', '\x5C9', '\x5D0', 
		'\x5D6', '\x5DE', '\x5E6', '\x5E9', '\x5F0', '\x5F7', '\x5FB', '\x5FE', 
		'\x604', '\x608', '\x60E', '\x61C', '\x622', '\x629', '\x62E', '\x631', 
		'\x634', '\x63B', '\x645', '\x656', '\x65B', '\x65F', '\x662', '\x665', 
		'\x66C', '\x672', '\x67A', '\x680', '\x68A', '\x692', '\x698', '\x6A3', 
		'\x6A7', '\x6A9', '\x6AE', '\x6B2', '\x6B9', '\x6C2', '\x6C9', '\x6CC', 
		'\x6CF', '\x6D3', '\x6D8', '\x6E5', '\x6EF', '\x6F6', '\x702', '\x709', 
		'\x715', '\x71B', '\x71F', '\x723', '\x729', '\x72F', '\x731', '\x738', 
		'\x73C', '\x73F', '\x743', '\x74D', '\x750', '\x757', '\x75A', '\x75F', 
		'\x764', '\x766', '\x769', '\x76C', '\x772', '\x775', '\x781', '\x785', 
		'\x788', '\x792', '\x795', '\x79B', '\x7B6', '\x7C3', '\x7C9', '\x7D2', 
		'\x7D8', '\x7DB', '\x7E3', '\x7E7', '\x7ED', '\x7F3', '\x7F9', '\x804', 
		'\x808', '\x80A', '\x814', '\x81A', '\x81D', '\x82A', '\x830', '\x833', 
		'\x836', '\x83D', '\x842', '\x846', '\x84A', '\x85B', '\x85E', '\x863', 
		'\x867', '\x86B', '\x874', '\x877', '\x87C', '\x880', '\x885', '\x889', 
		'\x88B', '\x896', '\x89A', '\x89C', '\x8A1', '\x8A6', '\x8AD', '\x8B3', 
		'\x8B8', '\x8BE', '\x8C2', '\x8C8', '\x8CF', '\x8D9', '\x8DC', '\x8DF', 
		'\x8E4', '\x8EA', '\x8EE', '\x8F0', '\x8F7', '\x8FE', '\x906', '\x90A', 
		'\x919', '\x91D', '\x926', '\x92A', '\x92E', '\x944', '\x94C', '\x952', 
		'\x95B', '\x964', '\x96A', '\x971', '\x978', '\x97A', '\x981', '\x984', 
		'\x987', '\x98B', '\x98E', '\x993', '\x996', '\x999', '\x99D', '\x9A2', 
		'\x9A5', '\x9A8', '\x9AC', '\x9B1', '\x9B5', '\x9BB', '\x9BF', '\x9C3', 
		'\x9D1', '\x9DE', '\x9E4', '\x9F7', '\xA02', '\xA06', '\xA0C', '\xA10', 
		'\xA14', '\xA1B', '\xA22', '\xA25', '\xA2B', '\xA32', '\xA37', '\xA3A', 
		'\xA42', '\xA48', '\xA4C', '\xA52', '\xA56',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr4.Grammar.Csharp
