//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\namofun\plagiarism\src\Plag.Frontend.Cpp\CPP14.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Antlr4.Grammar.Cpp {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
//[System.CLSCompliant(false)]
public partial class CPP14Parser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, MultiLineMacro=7, Directive=8, 
		AlignAs=9, AlignOf=10, Asm=11, Auto=12, Bool=13, Break=14, Case=15, Catch=16, 
		Char=17, Char16=18, Char32=19, Class=20, Const=21, Constexpr=22, ConstCast=23, 
		Continue=24, DeclType=25, Default=26, Delete=27, Do=28, Double=29, DynamicCast=30, 
		Else=31, Enum=32, Explicit=33, Export=34, Extern=35, False=36, Final=37, 
		Float=38, For=39, Friend=40, Goto=41, If=42, Inline=43, Int=44, Long=45, 
		Mutable=46, Namespace=47, New=48, NoExcept=49, NullPtr=50, Null=51, Operator=52, 
		Override=53, Private=54, Protected=55, Public=56, Register=57, ReinterpretCast=58, 
		Return=59, Short=60, Signed=61, SizeOf=62, Static=63, StaticAssert=64, 
		StaticCast=65, Struct=66, Switch=67, Template=68, This=69, ThreadLocal=70, 
		Throw=71, True=72, Try=73, TypeDef=74, TypeId=75, TypeName=76, Union=77, 
		Unsigned=78, Using=79, Virtual=80, Void=81, Volatile=82, Wchar=83, While=84, 
		LeftParen=85, RightParen=86, LeftBracket=87, RightBracket=88, LeftBrace=89, 
		RightBrace=90, Plus=91, Minus=92, Star=93, Div=94, Mod=95, Caret=96, And=97, 
		Or=98, Tilde=99, Not=100, Assign=101, Less=102, Greater=103, PlusAssign=104, 
		MinusAssign=105, StarAssign=106, DivAssign=107, ModAssign=108, XorAssign=109, 
		AndAssign=110, OrAssign=111, LeftShift=112, LeftShiftAssign=113, Equal=114, 
		NotEqual=115, LessEqual=116, GreaterEqual=117, AndAnd=118, OrOr=119, PlusPlus=120, 
		MinusMinus=121, Comma=122, ArrowStar=123, Arrow=124, Question=125, Colon=126, 
		DoubleColon=127, Semi=128, Dot=129, DotStar=130, Ellipsis=131, Identifier=132, 
		IntegerLiteral=133, DecimalLiteral=134, OctalLiteral=135, HexadecimalLiteral=136, 
		BinaryLiteral=137, IntegerSuffix=138, CharacterLiteral=139, FloatingLiteral=140, 
		StringLiteral=141, UserDefinedIntegerLiteral=142, UserDefinedFloatingLiteral=143, 
		UserDefinedStringLiteral=144, UserDefinedCharacterLiteral=145, WhiteSpace=146, 
		NewLine=147, BlockComment=148, LineComment=149;
	public const int
		RULE_translationUnit = 0, RULE_primaryExpression = 1, RULE_idExpression = 2, 
		RULE_unqualifiedId = 3, RULE_qualifiedId = 4, RULE_nestedNameSpecifier = 5, 
		RULE_lambdaExpression = 6, RULE_lambdaIntroducer = 7, RULE_lambdaCapture = 8, 
		RULE_captureDefault = 9, RULE_captureList = 10, RULE_capture = 11, RULE_simpleCapture = 12, 
		RULE_initCapture = 13, RULE_lambdaDeclarator = 14, RULE_postfixExpression = 15, 
		RULE_typeIdOfExpr = 16, RULE_typeIdOfTheTypeId = 17, RULE_expressionList = 18, 
		RULE_pseudoDestructorName = 19, RULE_unaryExpression = 20, RULE_unaryOperator = 21, 
		RULE_newExpression = 22, RULE_newPlacement = 23, RULE_newTypeId = 24, 
		RULE_newDeclarator = 25, RULE_noPtrNewDeclarator = 26, RULE_newInitializer = 27, 
		RULE_deleteExpression = 28, RULE_noExceptExpression = 29, RULE_castExpression = 30, 
		RULE_pmExpression = 31, RULE_multiplicativeExpression = 32, RULE_additiveExpression = 33, 
		RULE_shiftExpression = 34, RULE_shiftOperator = 35, RULE_relationalExpression = 36, 
		RULE_equalityExpression = 37, RULE_andExpression = 38, RULE_exclusiveOrExpression = 39, 
		RULE_inclusiveOrExpression = 40, RULE_logicalAndExpression = 41, RULE_logicalOrExpression = 42, 
		RULE_conditionalExpression = 43, RULE_assignmentExpression = 44, RULE_assignmentOperator = 45, 
		RULE_expression = 46, RULE_constantExpression = 47, RULE_statement = 48, 
		RULE_labeledStatement = 49, RULE_expressionStatement = 50, RULE_compoundStatement = 51, 
		RULE_statementSeq = 52, RULE_selectionStatement = 53, RULE_condition = 54, 
		RULE_iterationStatement = 55, RULE_forInitStatement = 56, RULE_forRangeDeclaration = 57, 
		RULE_forRangeInitializer = 58, RULE_jumpStatement = 59, RULE_declarationStatement = 60, 
		RULE_declarationSeq = 61, RULE_declaration = 62, RULE_blockDeclaration = 63, 
		RULE_aliasDeclaration = 64, RULE_simpleDeclaration = 65, RULE_stringLiterals = 66, 
		RULE_staticAssertDeclaration = 67, RULE_emptyDeclaration = 68, RULE_attributeDeclaration = 69, 
		RULE_declSpecifier = 70, RULE_declSpecifierSeq = 71, RULE_storageClassSpecifier = 72, 
		RULE_functionSpecifier = 73, RULE_typedefName = 74, RULE_typeSpecifier = 75, 
		RULE_trailingTypeSpecifier = 76, RULE_typeSpecifierSeq = 77, RULE_trailingTypeSpecifierSeq = 78, 
		RULE_simpleTypeSpecifier = 79, RULE_theTypeName = 80, RULE_declTypeSpecifier = 81, 
		RULE_elaboratedTypeSpecifier = 82, RULE_enumName = 83, RULE_enumSpecifier = 84, 
		RULE_enumHead = 85, RULE_opaqueEnumDeclaration = 86, RULE_enumKey = 87, 
		RULE_enumBase = 88, RULE_enumeratorList = 89, RULE_enumeratorDefinition = 90, 
		RULE_enumerator = 91, RULE_namespaceName = 92, RULE_originalNamespaceName = 93, 
		RULE_namespaceDefinition = 94, RULE_namedNamespaceDefinition = 95, RULE_originalNamespaceDefinition = 96, 
		RULE_extensionNamespaceDefinition = 97, RULE_unnamedNamespaceDefinition = 98, 
		RULE_namespaceBody = 99, RULE_namespaceAlias = 100, RULE_namespaceAliasDefinition = 101, 
		RULE_qualifiedNamespaceSpecifier = 102, RULE_usingDeclaration = 103, RULE_usingDirective = 104, 
		RULE_asmDefinition = 105, RULE_linkageSpecification = 106, RULE_attributeSpecifierSeq = 107, 
		RULE_attributeSpecifier = 108, RULE_alignmentSpecifier = 109, RULE_attributeList = 110, 
		RULE_attribute = 111, RULE_attributeToken = 112, RULE_attributeScopedToken = 113, 
		RULE_attributeNamespace = 114, RULE_attributeArgumentClause = 115, RULE_balancedTokenSeq = 116, 
		RULE_balancedToken = 117, RULE_initDeclaratorList = 118, RULE_initDeclarator = 119, 
		RULE_declarator = 120, RULE_ptrDeclarator = 121, RULE_noPtrDeclarator = 122, 
		RULE_parametersAndQualifiers = 123, RULE_trailingReturnType = 124, RULE_ptrOperator = 125, 
		RULE_cvQualifierSeq = 126, RULE_cvQualifier = 127, RULE_refQualifier = 128, 
		RULE_declaratorId = 129, RULE_theTypeId = 130, RULE_abstractDeclarator = 131, 
		RULE_ptrAbstractDeclarator = 132, RULE_noPtrAbstractDeclarator = 133, 
		RULE_abstractPackDeclarator = 134, RULE_noPtrAbstractPackDeclarator = 135, 
		RULE_parameterDeclarationClause = 136, RULE_parameterDeclarationList = 137, 
		RULE_parameterDeclaration = 138, RULE_functionDefinition = 139, RULE_functionBody = 140, 
		RULE_initializer = 141, RULE_braceOrEqualInitializer = 142, RULE_initializerClause = 143, 
		RULE_initializerList = 144, RULE_bracedInitList = 145, RULE_className = 146, 
		RULE_classSpecifier = 147, RULE_classHead = 148, RULE_classHeadName = 149, 
		RULE_classVirtSpecifier = 150, RULE_classKey = 151, RULE_memberSpecification = 152, 
		RULE_memberDeclaration = 153, RULE_memberDeclaratorList = 154, RULE_memberDeclarator = 155, 
		RULE_virtSpecifierSeq = 156, RULE_virtSpecifier = 157, RULE_pureSpecifier = 158, 
		RULE_baseClause = 159, RULE_baseSpecifierList = 160, RULE_baseSpecifier = 161, 
		RULE_classOrDeclType = 162, RULE_baseTypeSpecifier = 163, RULE_accessSpecifier = 164, 
		RULE_conversionFunctionId = 165, RULE_conversionTypeId = 166, RULE_conversionDeclarator = 167, 
		RULE_ctorInitializer = 168, RULE_memInitializerList = 169, RULE_memInitializer = 170, 
		RULE_memInitializerId = 171, RULE_operatorFunctionId = 172, RULE_literalOperatorId = 173, 
		RULE_templateDeclaration = 174, RULE_templateParameterList = 175, RULE_templateParameter = 176, 
		RULE_typeParameter = 177, RULE_simpleTemplateId = 178, RULE_templateId = 179, 
		RULE_templateName = 180, RULE_templateArgumentList = 181, RULE_templateArgument = 182, 
		RULE_typeNameSpecifier = 183, RULE_explicitInstantiation = 184, RULE_explicitSpecialization = 185, 
		RULE_tryBlock = 186, RULE_functionTryBlock = 187, RULE_handlerSeq = 188, 
		RULE_handler = 189, RULE_exceptionDeclaration = 190, RULE_throwExpression = 191, 
		RULE_exceptionSpecification = 192, RULE_dynamicExceptionSpecification = 193, 
		RULE_typeIdList = 194, RULE_noExceptSpecification = 195, RULE_rightShift = 196, 
		RULE_rightShiftAssign = 197, RULE_theOperator = 198, RULE_literal = 199, 
		RULE_booleanLiteral = 200, RULE_pointerLiteral = 201, RULE_userDefinedLiteral = 202;
	public static readonly string[] ruleNames = {
		"translationUnit", "primaryExpression", "idExpression", "unqualifiedId", 
		"qualifiedId", "nestedNameSpecifier", "lambdaExpression", "lambdaIntroducer", 
		"lambdaCapture", "captureDefault", "captureList", "capture", "simpleCapture", 
		"initCapture", "lambdaDeclarator", "postfixExpression", "typeIdOfExpr", 
		"typeIdOfTheTypeId", "expressionList", "pseudoDestructorName", "unaryExpression", 
		"unaryOperator", "newExpression", "newPlacement", "newTypeId", "newDeclarator", 
		"noPtrNewDeclarator", "newInitializer", "deleteExpression", "noExceptExpression", 
		"castExpression", "pmExpression", "multiplicativeExpression", "additiveExpression", 
		"shiftExpression", "shiftOperator", "relationalExpression", "equalityExpression", 
		"andExpression", "exclusiveOrExpression", "inclusiveOrExpression", "logicalAndExpression", 
		"logicalOrExpression", "conditionalExpression", "assignmentExpression", 
		"assignmentOperator", "expression", "constantExpression", "statement", 
		"labeledStatement", "expressionStatement", "compoundStatement", "statementSeq", 
		"selectionStatement", "condition", "iterationStatement", "forInitStatement", 
		"forRangeDeclaration", "forRangeInitializer", "jumpStatement", "declarationStatement", 
		"declarationSeq", "declaration", "blockDeclaration", "aliasDeclaration", 
		"simpleDeclaration", "stringLiterals", "staticAssertDeclaration", "emptyDeclaration", 
		"attributeDeclaration", "declSpecifier", "declSpecifierSeq", "storageClassSpecifier", 
		"functionSpecifier", "typedefName", "typeSpecifier", "trailingTypeSpecifier", 
		"typeSpecifierSeq", "trailingTypeSpecifierSeq", "simpleTypeSpecifier", 
		"theTypeName", "declTypeSpecifier", "elaboratedTypeSpecifier", "enumName", 
		"enumSpecifier", "enumHead", "opaqueEnumDeclaration", "enumKey", "enumBase", 
		"enumeratorList", "enumeratorDefinition", "enumerator", "namespaceName", 
		"originalNamespaceName", "namespaceDefinition", "namedNamespaceDefinition", 
		"originalNamespaceDefinition", "extensionNamespaceDefinition", "unnamedNamespaceDefinition", 
		"namespaceBody", "namespaceAlias", "namespaceAliasDefinition", "qualifiedNamespaceSpecifier", 
		"usingDeclaration", "usingDirective", "asmDefinition", "linkageSpecification", 
		"attributeSpecifierSeq", "attributeSpecifier", "alignmentSpecifier", "attributeList", 
		"attribute", "attributeToken", "attributeScopedToken", "attributeNamespace", 
		"attributeArgumentClause", "balancedTokenSeq", "balancedToken", "initDeclaratorList", 
		"initDeclarator", "declarator", "ptrDeclarator", "noPtrDeclarator", "parametersAndQualifiers", 
		"trailingReturnType", "ptrOperator", "cvQualifierSeq", "cvQualifier", 
		"refQualifier", "declaratorId", "theTypeId", "abstractDeclarator", "ptrAbstractDeclarator", 
		"noPtrAbstractDeclarator", "abstractPackDeclarator", "noPtrAbstractPackDeclarator", 
		"parameterDeclarationClause", "parameterDeclarationList", "parameterDeclaration", 
		"functionDefinition", "functionBody", "initializer", "braceOrEqualInitializer", 
		"initializerClause", "initializerList", "bracedInitList", "className", 
		"classSpecifier", "classHead", "classHeadName", "classVirtSpecifier", 
		"classKey", "memberSpecification", "memberDeclaration", "memberDeclaratorList", 
		"memberDeclarator", "virtSpecifierSeq", "virtSpecifier", "pureSpecifier", 
		"baseClause", "baseSpecifierList", "baseSpecifier", "classOrDeclType", 
		"baseTypeSpecifier", "accessSpecifier", "conversionFunctionId", "conversionTypeId", 
		"conversionDeclarator", "ctorInitializer", "memInitializerList", "memInitializer", 
		"memInitializerId", "operatorFunctionId", "literalOperatorId", "templateDeclaration", 
		"templateParameterList", "templateParameter", "typeParameter", "simpleTemplateId", 
		"templateId", "templateName", "templateArgumentList", "templateArgument", 
		"typeNameSpecifier", "explicitInstantiation", "explicitSpecialization", 
		"tryBlock", "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration", 
		"throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
		"typeIdList", "noExceptSpecification", "rightShift", "rightShiftAssign", 
		"theOperator", "literal", "booleanLiteral", "pointerLiteral", "userDefinedLiteral"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'not'", "'&&'", "'and'", "'||'", "'or'", null, null, "'alignas'", 
		"'alignof'", "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
		"'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", "'constexpr'", 
		"'const_cast'", "'continue'", "'decltype'", "'default'", "'delete'", "'do'", 
		"'double'", "'dynamic_cast'", "'else'", "'enum'", "'explicit'", "'export'", 
		"'extern'", "'false'", "'final'", "'float'", "'for'", "'friend'", "'goto'", 
		"'if'", "'inline'", "'int'", "'long'", "'mutable'", "'namespace'", "'new'", 
		"'noexcept'", "'nullptr'", "'NULL'", "'operator'", "'override'", "'private'", 
		"'protected'", "'public'", "'register'", "'reinterpret_cast'", "'return'", 
		"'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", "'static_cast'", 
		"'struct'", "'switch'", "'template'", "'this'", "'thread_local'", "'throw'", 
		"'true'", "'try'", "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
		"'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", "'while'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "'+'", "'-'", "'*'", "'/'", 
		"'%'", "'^'", "'&'", "'|'", "'~'", null, "'='", "'<'", "'>'", "'+='", 
		"'-='", "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", "'<<='", 
		"'=='", "'!='", "'<='", "'>='", null, null, "'++'", "'--'", "','", "'->*'", 
		"'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, "MultiLineMacro", "Directive", 
		"AlignAs", "AlignOf", "Asm", "Auto", "Bool", "Break", "Case", "Catch", 
		"Char", "Char16", "Char32", "Class", "Const", "Constexpr", "ConstCast", 
		"Continue", "DeclType", "Default", "Delete", "Do", "Double", "DynamicCast", 
		"Else", "Enum", "Explicit", "Export", "Extern", "False", "Final", "Float", 
		"For", "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", "Namespace", 
		"New", "NoExcept", "NullPtr", "Null", "Operator", "Override", "Private", 
		"Protected", "Public", "Register", "ReinterpretCast", "Return", "Short", 
		"Signed", "SizeOf", "Static", "StaticAssert", "StaticCast", "Struct", 
		"Switch", "Template", "This", "ThreadLocal", "Throw", "True", "Try", "TypeDef", 
		"TypeId", "TypeName", "Union", "Unsigned", "Using", "Virtual", "Void", 
		"Volatile", "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
		"RightBracket", "LeftBrace", "RightBrace", "Plus", "Minus", "Star", "Div", 
		"Mod", "Caret", "And", "Or", "Tilde", "Not", "Assign", "Less", "Greater", 
		"PlusAssign", "MinusAssign", "StarAssign", "DivAssign", "ModAssign", "XorAssign", 
		"AndAssign", "OrAssign", "LeftShift", "LeftShiftAssign", "Equal", "NotEqual", 
		"LessEqual", "GreaterEqual", "AndAnd", "OrOr", "PlusPlus", "MinusMinus", 
		"Comma", "ArrowStar", "Arrow", "Question", "Colon", "DoubleColon", "Semi", 
		"Dot", "DotStar", "Ellipsis", "Identifier", "IntegerLiteral", "DecimalLiteral", 
		"OctalLiteral", "HexadecimalLiteral", "BinaryLiteral", "IntegerSuffix", 
		"CharacterLiteral", "FloatingLiteral", "StringLiteral", "UserDefinedIntegerLiteral", 
		"UserDefinedFloatingLiteral", "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", 
		"WhiteSpace", "NewLine", "BlockComment", "LineComment"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "CPP14.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CPP14Parser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CPP14Parser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CPP14Parser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class TranslationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(CPP14Parser.Eof, 0); }
		public DeclarationSeqContext declarationSeq() {
			return GetRuleContext<DeclarationSeqContext>(0);
		}
		public TranslationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_translationUnit; } }
		public string RuleName { get { return "TranslationUnit"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTranslationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTranslationUnit(this);
		}
	}

	[RuleVersion(0)]
	public TranslationUnitContext TranslationUnit() {
		TranslationUnitContext _localctx = new TranslationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_translationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << DeclType) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (ThreadLocal - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 406; DeclarationSeq(0);
				}
			}

			State = 409; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryExpressionContext : ParserRuleContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public PrimaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primaryExpression; } }
		public string RuleName { get { return "PrimaryExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPrimaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPrimaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryExpressionContext PrimaryExpression() {
		PrimaryExpressionContext _localctx = new PrimaryExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_primaryExpression);
		try {
			State = 419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case False:
			case NullPtr:
			case Null:
			case True:
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 411; Literal();
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 2);
				{
				State = 412; Match(This);
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 3);
				{
				State = 413; Match(LeftParen);
				State = 414; Expression(0);
				State = 415; Match(RightParen);
				}
				break;
			case DeclType:
			case Operator:
			case Tilde:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 417; IdExpression();
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 5);
				{
				State = 418; LambdaExpression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdExpressionContext : ParserRuleContext {
		public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		public QualifiedIdContext qualifiedId() {
			return GetRuleContext<QualifiedIdContext>(0);
		}
		public IdExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_idExpression; } }
		public string RuleName { get { return "IdExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIdExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIdExpression(this);
		}
	}

	[RuleVersion(0)]
	public IdExpressionContext IdExpression() {
		IdExpressionContext _localctx = new IdExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_idExpression);
		try {
			State = 423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 421; UnqualifiedId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 422; QualifiedId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnqualifiedIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OperatorFunctionIdContext operatorFunctionId() {
			return GetRuleContext<OperatorFunctionIdContext>(0);
		}
		public ConversionFunctionIdContext conversionFunctionId() {
			return GetRuleContext<ConversionFunctionIdContext>(0);
		}
		public LiteralOperatorIdContext literalOperatorId() {
			return GetRuleContext<LiteralOperatorIdContext>(0);
		}
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public DeclTypeSpecifierContext declTypeSpecifier() {
			return GetRuleContext<DeclTypeSpecifierContext>(0);
		}
		public TemplateIdContext templateId() {
			return GetRuleContext<TemplateIdContext>(0);
		}
		public UnqualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unqualifiedId; } }
		public string RuleName { get { return "UnqualifiedId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnqualifiedId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnqualifiedId(this);
		}
	}

	[RuleVersion(0)]
	public UnqualifiedIdContext UnqualifiedId() {
		UnqualifiedIdContext _localctx = new UnqualifiedIdContext(Context, State);
		EnterRule(_localctx, 6, RULE_unqualifiedId);
		try {
			State = 434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 425; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 426; OperatorFunctionId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 427; ConversionFunctionId();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 428; LiteralOperatorId();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 429; Match(Tilde);
				State = 430; ClassName();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 431; Match(Tilde);
				State = 432; DeclTypeSpecifier();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 433; TemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdContext : ParserRuleContext {
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public QualifiedIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedId; } }
		public string RuleName { get { return "QualifiedId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiedId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiedId(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdContext QualifiedId() {
		QualifiedIdContext _localctx = new QualifiedIdContext(Context, State);
		EnterRule(_localctx, 8, RULE_qualifiedId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 436; NestedNameSpecifier(0);
			State = 438;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Template) {
				{
				State = 437; Match(Template);
				}
			}

			State = 440; UnqualifiedId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NestedNameSpecifierContext : ParserRuleContext {
		public ITerminalNode DoubleColon() { return GetToken(CPP14Parser.DoubleColon, 0); }
		public TheTypeNameContext theTypeName() {
			return GetRuleContext<TheTypeNameContext>(0);
		}
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public DeclTypeSpecifierContext declTypeSpecifier() {
			return GetRuleContext<DeclTypeSpecifierContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public NestedNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nestedNameSpecifier; } }
		public string RuleName { get { return "NestedNameSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNestedNameSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNestedNameSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public NestedNameSpecifierContext NestedNameSpecifier() {
		return NestedNameSpecifier(0);
	}

	private NestedNameSpecifierContext NestedNameSpecifier(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NestedNameSpecifierContext _localctx = new NestedNameSpecifierContext(Context, _parentState);
		NestedNameSpecifierContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_nestedNameSpecifier, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 443; Match(DoubleColon);
				}
				break;
			case 2:
				{
				State = 444; TheTypeName();
				State = 445; Match(DoubleColon);
				}
				break;
			case 3:
				{
				State = 447; NamespaceName();
				State = 448; Match(DoubleColon);
				}
				break;
			case 4:
				{
				State = 450; DeclTypeSpecifier();
				State = 451; Match(DoubleColon);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 467;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 465;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
					case 1:
						{
						_localctx = new NestedNameSpecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestedNameSpecifier);
						State = 455;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 456; Match(Identifier);
						State = 457; Match(DoubleColon);
						}
						break;
					case 2:
						{
						_localctx = new NestedNameSpecifierContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_nestedNameSpecifier);
						State = 458;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 460;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 459; Match(Template);
							}
						}

						State = 462; SimpleTemplateId();
						State = 463; Match(DoubleColon);
						}
						break;
					}
					} 
				}
				State = 469;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaIntroducerContext lambdaIntroducer() {
			return GetRuleContext<LambdaIntroducerContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public LambdaDeclaratorContext lambdaDeclarator() {
			return GetRuleContext<LambdaDeclaratorContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public string RuleName { get { return "LambdaExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext LambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 12, RULE_lambdaExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 470; LambdaIntroducer();
			State = 472;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LeftParen) {
				{
				State = 471; LambdaDeclarator();
				}
			}

			State = 474; CompoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaIntroducerContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public LambdaCaptureContext lambdaCapture() {
			return GetRuleContext<LambdaCaptureContext>(0);
		}
		public LambdaIntroducerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaIntroducer; } }
		public string RuleName { get { return "LambdaIntroducer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaIntroducer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaIntroducer(this);
		}
	}

	[RuleVersion(0)]
	public LambdaIntroducerContext LambdaIntroducer() {
		LambdaIntroducerContext _localctx = new LambdaIntroducerContext(Context, State);
		EnterRule(_localctx, 14, RULE_lambdaIntroducer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 476; Match(LeftBracket);
			State = 478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 69)) & ~0x3f) == 0 && ((1L << (_la - 69)) & ((1L << (This - 69)) | (1L << (And - 69)) | (1L << (Assign - 69)) | (1L << (Identifier - 69)))) != 0)) {
				{
				State = 477; LambdaCapture();
				}
			}

			State = 480; Match(RightBracket);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaCaptureContext : ParserRuleContext {
		public CaptureDefaultContext captureDefault() {
			return GetRuleContext<CaptureDefaultContext>(0);
		}
		public CaptureListContext captureList() {
			return GetRuleContext<CaptureListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public LambdaCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaCapture; } }
		public string RuleName { get { return "LambdaCapture"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaCapture(this);
		}
	}

	[RuleVersion(0)]
	public LambdaCaptureContext LambdaCapture() {
		LambdaCaptureContext _localctx = new LambdaCaptureContext(Context, State);
		EnterRule(_localctx, 16, RULE_lambdaCapture);
		try {
			State = 488;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 482; CaptureDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 483; CaptureList(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 484; CaptureDefault();
				State = 485; Match(Comma);
				State = 486; CaptureList(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureDefaultContext : ParserRuleContext {
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public CaptureDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureDefault; } }
		public string RuleName { get { return "CaptureDefault"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCaptureDefault(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCaptureDefault(this);
		}
	}

	[RuleVersion(0)]
	public CaptureDefaultContext CaptureDefault() {
		CaptureDefaultContext _localctx = new CaptureDefaultContext(Context, State);
		EnterRule(_localctx, 18, RULE_captureDefault);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 490;
			_la = TokenStream.LA(1);
			if ( !(_la==And || _la==Assign) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaptureListContext : ParserRuleContext {
		public CaptureContext capture() {
			return GetRuleContext<CaptureContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public CaptureListContext captureList() {
			return GetRuleContext<CaptureListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public CaptureListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_captureList; } }
		public string RuleName { get { return "CaptureList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCaptureList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCaptureList(this);
		}
	}

	[RuleVersion(0)]
	public CaptureListContext CaptureList() {
		return CaptureList(0);
	}

	private CaptureListContext CaptureList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		CaptureListContext _localctx = new CaptureListContext(Context, _parentState);
		CaptureListContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_captureList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 493; Capture();
			State = 495;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,12,Context) ) {
			case 1:
				{
				State = 494; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 505;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CaptureListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_captureList);
					State = 497;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 498; Match(Comma);
					State = 499; Capture();
					State = 501;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,13,Context) ) {
					case 1:
						{
						State = 500; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 507;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CaptureContext : ParserRuleContext {
		public SimpleCaptureContext simpleCapture() {
			return GetRuleContext<SimpleCaptureContext>(0);
		}
		public InitCaptureContext initCapture() {
			return GetRuleContext<InitCaptureContext>(0);
		}
		public CaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_capture; } }
		public string RuleName { get { return "Capture"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCapture(this);
		}
	}

	[RuleVersion(0)]
	public CaptureContext Capture() {
		CaptureContext _localctx = new CaptureContext(Context, State);
		EnterRule(_localctx, 22, RULE_capture);
		try {
			State = 510;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,15,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 508; SimpleCapture();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 509; InitCapture();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleCaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode This() { return GetToken(CPP14Parser.This, 0); }
		public SimpleCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleCapture; } }
		public string RuleName { get { return "SimpleCapture"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpleCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpleCapture(this);
		}
	}

	[RuleVersion(0)]
	public SimpleCaptureContext SimpleCapture() {
		SimpleCaptureContext _localctx = new SimpleCaptureContext(Context, State);
		EnterRule(_localctx, 24, RULE_simpleCapture);
		try {
			State = 516;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 512; Match(Identifier);
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 513; Match(And);
				State = 514; Match(Identifier);
				}
				break;
			case This:
				EnterOuterAlt(_localctx, 3);
				{
				State = 515; Match(This);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitCaptureContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public InitCaptureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initCapture; } }
		public string RuleName { get { return "InitCapture"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitCapture(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitCapture(this);
		}
	}

	[RuleVersion(0)]
	public InitCaptureContext InitCapture() {
		InitCaptureContext _localctx = new InitCaptureContext(Context, State);
		EnterRule(_localctx, 26, RULE_initCapture);
		try {
			State = 523;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 518; Match(Identifier);
				State = 519; Initializer();
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 520; Match(And);
				State = 521; Match(Identifier);
				State = 522; Initializer();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaDeclaratorContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ParameterDeclarationClauseContext parameterDeclarationClause() {
			return GetRuleContext<ParameterDeclarationClauseContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public ExceptionSpecificationContext exceptionSpecification() {
			return GetRuleContext<ExceptionSpecificationContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public LambdaDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaDeclarator; } }
		public string RuleName { get { return "LambdaDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLambdaDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLambdaDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public LambdaDeclaratorContext LambdaDeclarator() {
		LambdaDeclaratorContext _localctx = new LambdaDeclaratorContext(Context, State);
		EnterRule(_localctx, 28, RULE_lambdaDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 525; Match(LeftParen);
			State = 526; ParameterDeclarationClause();
			State = 527; Match(RightParen);
			State = 529;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Mutable) {
				{
				State = 528; Match(Mutable);
				}
			}

			State = 532;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NoExcept || _la==Throw) {
				{
				State = 531; ExceptionSpecification();
				}
			}

			State = 535;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AlignAs || _la==LeftBracket) {
				{
				State = 534; AttributeSpecifierSeq(0);
				}
			}

			State = 538;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Arrow) {
				{
				State = 537; TrailingReturnType();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PostfixExpressionContext : ParserRuleContext {
		public PrimaryExpressionContext primaryExpression() {
			return GetRuleContext<PrimaryExpressionContext>(0);
		}
		public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public TypeNameSpecifierContext typeNameSpecifier() {
			return GetRuleContext<TypeNameSpecifierContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public ITerminalNode DynamicCast() { return GetToken(CPP14Parser.DynamicCast, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode StaticCast() { return GetToken(CPP14Parser.StaticCast, 0); }
		public ITerminalNode ReinterpretCast() { return GetToken(CPP14Parser.ReinterpretCast, 0); }
		public ITerminalNode ConstCast() { return GetToken(CPP14Parser.ConstCast, 0); }
		public TypeIdOfTheTypeIdContext typeIdOfTheTypeId() {
			return GetRuleContext<TypeIdOfTheTypeIdContext>(0);
		}
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ITerminalNode Dot() { return GetToken(CPP14Parser.Dot, 0); }
		public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		public PseudoDestructorNameContext pseudoDestructorName() {
			return GetRuleContext<PseudoDestructorNameContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public PostfixExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfixExpression; } }
		public string RuleName { get { return "PostfixExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPostfixExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPostfixExpression(this);
		}
	}

	[RuleVersion(0)]
	public PostfixExpressionContext PostfixExpression() {
		return PostfixExpression(0);
	}

	private PostfixExpressionContext PostfixExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PostfixExpressionContext _localctx = new PostfixExpressionContext(Context, _parentState);
		PostfixExpressionContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_postfixExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,24,Context) ) {
			case 1:
				{
				State = 541; PrimaryExpression();
				}
				break;
			case 2:
				{
				State = 542; SimpleTypeSpecifier();
				State = 543; Match(LeftParen);
				State = 545;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 544; ExpressionList();
					}
				}

				State = 547; Match(RightParen);
				}
				break;
			case 3:
				{
				State = 549; TypeNameSpecifier();
				State = 550; Match(LeftParen);
				State = 552;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 551; ExpressionList();
					}
				}

				State = 554; Match(RightParen);
				}
				break;
			case 4:
				{
				State = 556; SimpleTypeSpecifier();
				State = 557; BracedInitList();
				}
				break;
			case 5:
				{
				State = 559; TypeNameSpecifier();
				State = 560; BracedInitList();
				}
				break;
			case 6:
				{
				State = 562; Match(DynamicCast);
				State = 563; Match(Less);
				State = 564; TheTypeId();
				State = 565; Match(Greater);
				State = 566; Match(LeftParen);
				State = 567; Expression(0);
				State = 568; Match(RightParen);
				}
				break;
			case 7:
				{
				State = 570; Match(StaticCast);
				State = 571; Match(Less);
				State = 572; TheTypeId();
				State = 573; Match(Greater);
				State = 574; Match(LeftParen);
				State = 575; Expression(0);
				State = 576; Match(RightParen);
				}
				break;
			case 8:
				{
				State = 578; Match(ReinterpretCast);
				State = 579; Match(Less);
				State = 580; TheTypeId();
				State = 581; Match(Greater);
				State = 582; Match(LeftParen);
				State = 583; Expression(0);
				State = 584; Match(RightParen);
				}
				break;
			case 9:
				{
				State = 586; Match(ConstCast);
				State = 587; Match(Less);
				State = 588; TheTypeId();
				State = 589; Match(Greater);
				State = 590; Match(LeftParen);
				State = 591; Expression(0);
				State = 592; Match(RightParen);
				}
				break;
			case 10:
				{
				State = 594; TypeIdOfTheTypeId();
				State = 595; Match(LeftParen);
				State = 596; Expression(0);
				State = 597; Match(RightParen);
				}
				break;
			case 11:
				{
				State = 599; TypeIdOfTheTypeId();
				State = 600; Match(LeftParen);
				State = 601; TheTypeId();
				State = 602; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 646;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 644;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
					case 1:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 606;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 607; Match(LeftBracket);
						State = 608; Expression(0);
						State = 609; Match(RightBracket);
						}
						break;
					case 2:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 611;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 612; Match(LeftBracket);
						State = 613; BracedInitList();
						State = 614; Match(RightBracket);
						}
						break;
					case 3:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 616;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 617; Match(LeftParen);
						State = 619;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
							{
							State = 618; ExpressionList();
							}
						}

						State = 621; Match(RightParen);
						}
						break;
					case 4:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 622;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 623; Match(Dot);
						State = 625;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 624; Match(Template);
							}
						}

						State = 627; IdExpression();
						}
						break;
					case 5:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 628;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 629; Match(Arrow);
						State = 631;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==Template) {
							{
							State = 630; Match(Template);
							}
						}

						State = 633; IdExpression();
						}
						break;
					case 6:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 634;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 635; Match(Dot);
						State = 636; PseudoDestructorName();
						}
						break;
					case 7:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 637;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 638; Match(Arrow);
						State = 639; PseudoDestructorName();
						}
						break;
					case 8:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 640;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 641; Match(PlusPlus);
						}
						break;
					case 9:
						{
						_localctx = new PostfixExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_postfixExpression);
						State = 642;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 643; Match(MinusMinus);
						}
						break;
					}
					} 
				}
				State = 648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeIdOfExprContext : ParserRuleContext {
		public ITerminalNode TypeId() { return GetToken(CPP14Parser.TypeId, 0); }
		public TypeIdOfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdOfExpr; } }
		public string RuleName { get { return "TypeIdOfExpr"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeIdOfExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeIdOfExpr(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdOfExprContext TypeIdOfExpr() {
		TypeIdOfExprContext _localctx = new TypeIdOfExprContext(Context, State);
		EnterRule(_localctx, 32, RULE_typeIdOfExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 649; Match(TypeId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdOfTheTypeIdContext : ParserRuleContext {
		public ITerminalNode TypeId() { return GetToken(CPP14Parser.TypeId, 0); }
		public TypeIdOfTheTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdOfTheTypeId; } }
		public string RuleName { get { return "TypeIdOfTheTypeId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeIdOfTheTypeId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeIdOfTheTypeId(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdOfTheTypeIdContext TypeIdOfTheTypeId() {
		TypeIdOfTheTypeIdContext _localctx = new TypeIdOfTheTypeIdContext(Context, State);
		EnterRule(_localctx, 34, RULE_typeIdOfTheTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 651; Match(TypeId);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public string RuleName { get { return "ExpressionList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext ExpressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 36, RULE_expressionList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 653; InitializerList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PseudoDestructorNameContext : ParserRuleContext {
		public TheTypeNameContext[] theTypeName() {
			return GetRuleContexts<TheTypeNameContext>();
		}
		public TheTypeNameContext theTypeName(int i) {
			return GetRuleContext<TheTypeNameContext>(i);
		}
		public ITerminalNode DoubleColon() { return GetToken(CPP14Parser.DoubleColon, 0); }
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public DeclTypeSpecifierContext declTypeSpecifier() {
			return GetRuleContext<DeclTypeSpecifierContext>(0);
		}
		public PseudoDestructorNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pseudoDestructorName; } }
		public string RuleName { get { return "PseudoDestructorName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPseudoDestructorName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPseudoDestructorName(this);
		}
	}

	[RuleVersion(0)]
	public PseudoDestructorNameContext PseudoDestructorName() {
		PseudoDestructorNameContext _localctx = new PseudoDestructorNameContext(Context, State);
		EnterRule(_localctx, 38, RULE_pseudoDestructorName);
		int _la;
		try {
			State = 677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 656;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
				case 1:
					{
					State = 655; NestedNameSpecifier(0);
					}
					break;
				}
				State = 658; TheTypeName();
				State = 659; Match(DoubleColon);
				State = 660; Match(Tilde);
				State = 661; TheTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 663; NestedNameSpecifier(0);
				State = 664; Match(Template);
				State = 665; SimpleTemplateId();
				State = 666; Match(DoubleColon);
				State = 667; Match(Tilde);
				State = 668; TheTypeName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 671;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DeclType || _la==DoubleColon || _la==Identifier) {
					{
					State = 670; NestedNameSpecifier(0);
					}
				}

				State = 673; Match(Tilde);
				State = 674; TheTypeName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 675; Match(Tilde);
				State = 676; DeclTypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryExpressionContext : ParserRuleContext {
		public PostfixExpressionContext postfixExpression() {
			return GetRuleContext<PostfixExpressionContext>(0);
		}
		public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public UnaryOperatorContext unaryOperator() {
			return GetRuleContext<UnaryOperatorContext>(0);
		}
		public ITerminalNode SizeOf() { return GetToken(CPP14Parser.SizeOf, 0); }
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode AlignOf() { return GetToken(CPP14Parser.AlignOf, 0); }
		public NoExceptExpressionContext noExceptExpression() {
			return GetRuleContext<NoExceptExpressionContext>(0);
		}
		public NewExpressionContext newExpression() {
			return GetRuleContext<NewExpressionContext>(0);
		}
		public DeleteExpressionContext deleteExpression() {
			return GetRuleContext<DeleteExpressionContext>(0);
		}
		public UnaryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryExpression; } }
		public string RuleName { get { return "UnaryExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryExpression(this);
		}
	}

	[RuleVersion(0)]
	public UnaryExpressionContext UnaryExpression() {
		UnaryExpressionContext _localctx = new UnaryExpressionContext(Context, State);
		EnterRule(_localctx, 40, RULE_unaryExpression);
		try {
			State = 707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 679; PostfixExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 680; Match(PlusPlus);
				State = 681; CastExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 682; Match(MinusMinus);
				State = 683; CastExpression();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 684; UnaryOperator();
				State = 685; CastExpression();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 687; Match(SizeOf);
				State = 688; UnaryExpression();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 689; Match(SizeOf);
				State = 690; Match(LeftParen);
				State = 691; TheTypeId();
				State = 692; Match(RightParen);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 694; Match(SizeOf);
				State = 695; Match(Ellipsis);
				State = 696; Match(LeftParen);
				State = 697; Match(Identifier);
				State = 698; Match(RightParen);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 699; Match(AlignOf);
				State = 700; Match(LeftParen);
				State = 701; TheTypeId();
				State = 702; Match(RightParen);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 704; NoExceptExpression();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 705; NewExpression();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 706; DeleteExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnaryOperatorContext : ParserRuleContext {
		public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public UnaryOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unaryOperator; } }
		public string RuleName { get { return "UnaryOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnaryOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnaryOperator(this);
		}
	}

	[RuleVersion(0)]
	public UnaryOperatorContext UnaryOperator() {
		UnaryOperatorContext _localctx = new UnaryOperatorContext(Context, State);
		EnterRule(_localctx, 42, RULE_unaryOperator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 709;
			_la = TokenStream.LA(1);
			if ( !(_la==T__0 || _la==T__1 || ((((_la - 91)) & ~0x3f) == 0 && ((1L << (_la - 91)) & ((1L << (Plus - 91)) | (1L << (Minus - 91)) | (1L << (Star - 91)) | (1L << (And - 91)) | (1L << (Or - 91)) | (1L << (Tilde - 91)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewExpressionContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public NewTypeIdContext newTypeId() {
			return GetRuleContext<NewTypeIdContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(CPP14Parser.DoubleColon, 0); }
		public NewPlacementContext newPlacement() {
			return GetRuleContext<NewPlacementContext>(0);
		}
		public NewInitializerContext newInitializer() {
			return GetRuleContext<NewInitializerContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newExpression; } }
		public string RuleName { get { return "NewExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewExpression(this);
		}
	}

	[RuleVersion(0)]
	public NewExpressionContext NewExpression() {
		NewExpressionContext _localctx = new NewExpressionContext(Context, State);
		EnterRule(_localctx, 44, RULE_newExpression);
		int _la;
		try {
			State = 735;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,40,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 712;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleColon) {
					{
					State = 711; Match(DoubleColon);
					}
				}

				State = 714; Match(New);
				State = 716;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LeftParen) {
					{
					State = 715; NewPlacement();
					}
				}

				State = 718; NewTypeId();
				State = 720;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 719; NewInitializer();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 723;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleColon) {
					{
					State = 722; Match(DoubleColon);
					}
				}

				State = 725; Match(New);
				State = 727;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 726; NewPlacement();
					}
					break;
				}
				State = 729; Match(LeftParen);
				State = 730; TheTypeId();
				State = 731; Match(RightParen);
				State = 733;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
				case 1:
					{
					State = 732; NewInitializer();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewPlacementContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NewPlacementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newPlacement; } }
		public string RuleName { get { return "NewPlacement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewPlacement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewPlacement(this);
		}
	}

	[RuleVersion(0)]
	public NewPlacementContext NewPlacement() {
		NewPlacementContext _localctx = new NewPlacementContext(Context, State);
		EnterRule(_localctx, 46, RULE_newPlacement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 737; Match(LeftParen);
			State = 738; ExpressionList();
			State = 739; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewTypeIdContext : ParserRuleContext {
		public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public NewDeclaratorContext newDeclarator() {
			return GetRuleContext<NewDeclaratorContext>(0);
		}
		public NewTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newTypeId; } }
		public string RuleName { get { return "NewTypeId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewTypeId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewTypeId(this);
		}
	}

	[RuleVersion(0)]
	public NewTypeIdContext NewTypeId() {
		NewTypeIdContext _localctx = new NewTypeIdContext(Context, State);
		EnterRule(_localctx, 48, RULE_newTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 741; TypeSpecifierSeq();
			State = 743;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
			case 1:
				{
				State = 742; NewDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NewDeclaratorContext : ParserRuleContext {
		public PtrOperatorContext ptrOperator() {
			return GetRuleContext<PtrOperatorContext>(0);
		}
		public NewDeclaratorContext newDeclarator() {
			return GetRuleContext<NewDeclaratorContext>(0);
		}
		public NoPtrNewDeclaratorContext noPtrNewDeclarator() {
			return GetRuleContext<NoPtrNewDeclaratorContext>(0);
		}
		public NewDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newDeclarator; } }
		public string RuleName { get { return "NewDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NewDeclaratorContext NewDeclarator() {
		NewDeclaratorContext _localctx = new NewDeclaratorContext(Context, State);
		EnterRule(_localctx, 50, RULE_newDeclarator);
		try {
			State = 750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case DeclType:
			case Star:
			case And:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745; PtrOperator();
				State = 747;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 746; NewDeclarator();
					}
					break;
				}
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 749; NoPtrNewDeclarator(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPtrNewDeclaratorContext : ParserRuleContext {
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public NoPtrNewDeclaratorContext noPtrNewDeclarator() {
			return GetRuleContext<NoPtrNewDeclaratorContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public NoPtrNewDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPtrNewDeclarator; } }
		public string RuleName { get { return "NoPtrNewDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoPtrNewDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoPtrNewDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoPtrNewDeclaratorContext NoPtrNewDeclarator() {
		return NoPtrNewDeclarator(0);
	}

	private NoPtrNewDeclaratorContext NoPtrNewDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPtrNewDeclaratorContext _localctx = new NoPtrNewDeclaratorContext(Context, _parentState);
		NoPtrNewDeclaratorContext _prevctx = _localctx;
		int _startState = 52;
		EnterRecursionRule(_localctx, 52, RULE_noPtrNewDeclarator, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 753; Match(LeftBracket);
			State = 754; Expression(0);
			State = 755; Match(RightBracket);
			State = 757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,44,Context) ) {
			case 1:
				{
				State = 756; AttributeSpecifierSeq(0);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 768;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new NoPtrNewDeclaratorContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_noPtrNewDeclarator);
					State = 759;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 760; Match(LeftBracket);
					State = 761; ConstantExpression();
					State = 762; Match(RightBracket);
					State = 764;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
					case 1:
						{
						State = 763; AttributeSpecifierSeq(0);
						}
						break;
					}
					}
					} 
				}
				State = 770;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NewInitializerContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public NewInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_newInitializer; } }
		public string RuleName { get { return "NewInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNewInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNewInitializer(this);
		}
	}

	[RuleVersion(0)]
	public NewInitializerContext NewInitializer() {
		NewInitializerContext _localctx = new NewInitializerContext(Context, State);
		EnterRule(_localctx, 54, RULE_newInitializer);
		int _la;
		try {
			State = 777;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 771; Match(LeftParen);
				State = 773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 772; ExpressionList();
					}
				}

				State = 775; Match(RightParen);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 776; BracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteExpressionContext : ParserRuleContext {
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(CPP14Parser.DoubleColon, 0); }
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public DeleteExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteExpression; } }
		public string RuleName { get { return "DeleteExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeleteExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeleteExpression(this);
		}
	}

	[RuleVersion(0)]
	public DeleteExpressionContext DeleteExpression() {
		DeleteExpressionContext _localctx = new DeleteExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_deleteExpression);
		int _la;
		try {
			State = 791;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,51,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleColon) {
					{
					State = 779; Match(DoubleColon);
					}
				}

				State = 782; Match(Delete);
				State = 783; CastExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DoubleColon) {
					{
					State = 784; Match(DoubleColon);
					}
				}

				State = 787; Match(Delete);
				State = 788; Match(LeftBracket);
				State = 789; Match(RightBracket);
				State = 790; CastExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoExceptExpressionContext : ParserRuleContext {
		public ITerminalNode NoExcept() { return GetToken(CPP14Parser.NoExcept, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoExceptExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noExceptExpression; } }
		public string RuleName { get { return "NoExceptExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoExceptExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoExceptExpression(this);
		}
	}

	[RuleVersion(0)]
	public NoExceptExpressionContext NoExceptExpression() {
		NoExceptExpressionContext _localctx = new NoExceptExpressionContext(Context, State);
		EnterRule(_localctx, 58, RULE_noExceptExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 793; Match(NoExcept);
			State = 794; Match(LeftParen);
			State = 795; Expression(0);
			State = 796; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastExpressionContext : ParserRuleContext {
		public UnaryExpressionContext unaryExpression() {
			return GetRuleContext<UnaryExpressionContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public CastExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castExpression; } }
		public string RuleName { get { return "CastExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCastExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCastExpression(this);
		}
	}

	[RuleVersion(0)]
	public CastExpressionContext CastExpression() {
		CastExpressionContext _localctx = new CastExpressionContext(Context, State);
		EnterRule(_localctx, 60, RULE_castExpression);
		try {
			State = 804;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798; UnaryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 799; Match(LeftParen);
				State = 800; TheTypeId();
				State = 801; Match(RightParen);
				State = 802; CastExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PmExpressionContext : ParserRuleContext {
		public CastExpressionContext castExpression() {
			return GetRuleContext<CastExpressionContext>(0);
		}
		public PmExpressionContext pmExpression() {
			return GetRuleContext<PmExpressionContext>(0);
		}
		public ITerminalNode DotStar() { return GetToken(CPP14Parser.DotStar, 0); }
		public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		public PmExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pmExpression; } }
		public string RuleName { get { return "PmExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPmExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPmExpression(this);
		}
	}

	[RuleVersion(0)]
	public PmExpressionContext PmExpression() {
		return PmExpression(0);
	}

	private PmExpressionContext PmExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		PmExpressionContext _localctx = new PmExpressionContext(Context, _parentState);
		PmExpressionContext _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_pmExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 807; CastExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 817;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 815;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
					case 1:
						{
						_localctx = new PmExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmExpression);
						State = 809;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 810; Match(DotStar);
						State = 811; CastExpression();
						}
						break;
					case 2:
						{
						_localctx = new PmExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_pmExpression);
						State = 812;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 813; Match(ArrowStar);
						State = 814; CastExpression();
						}
						break;
					}
					} 
				}
				State = 819;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,54,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplicativeExpressionContext : ParserRuleContext {
		public PmExpressionContext pmExpression() {
			return GetRuleContext<PmExpressionContext>(0);
		}
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		public MultiplicativeExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplicativeExpression; } }
		public string RuleName { get { return "MultiplicativeExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMultiplicativeExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMultiplicativeExpression(this);
		}
	}

	[RuleVersion(0)]
	public MultiplicativeExpressionContext MultiplicativeExpression() {
		return MultiplicativeExpression(0);
	}

	private MultiplicativeExpressionContext MultiplicativeExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplicativeExpressionContext _localctx = new MultiplicativeExpressionContext(Context, _parentState);
		MultiplicativeExpressionContext _prevctx = _localctx;
		int _startState = 64;
		EnterRecursionRule(_localctx, 64, RULE_multiplicativeExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 821; PmExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 834;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 832;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
					case 1:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 823;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 824; Match(Star);
						State = 825; PmExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 826;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 827; Match(Div);
						State = 828; PmExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new MultiplicativeExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_multiplicativeExpression);
						State = 829;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 830; Match(Mod);
						State = 831; PmExpression(0);
						}
						break;
					}
					} 
				}
				State = 836;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AdditiveExpressionContext : ParserRuleContext {
		public MultiplicativeExpressionContext multiplicativeExpression() {
			return GetRuleContext<MultiplicativeExpressionContext>(0);
		}
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public AdditiveExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_additiveExpression; } }
		public string RuleName { get { return "AdditiveExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAdditiveExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAdditiveExpression(this);
		}
	}

	[RuleVersion(0)]
	public AdditiveExpressionContext AdditiveExpression() {
		return AdditiveExpression(0);
	}

	private AdditiveExpressionContext AdditiveExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AdditiveExpressionContext _localctx = new AdditiveExpressionContext(Context, _parentState);
		AdditiveExpressionContext _prevctx = _localctx;
		int _startState = 66;
		EnterRecursionRule(_localctx, 66, RULE_additiveExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 838; MultiplicativeExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 848;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 846;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 840;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 841; Match(Plus);
						State = 842; MultiplicativeExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_additiveExpression);
						State = 843;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 844; Match(Minus);
						State = 845; MultiplicativeExpression(0);
						}
						break;
					}
					} 
				}
				State = 850;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,58,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftExpressionContext : ParserRuleContext {
		public AdditiveExpressionContext additiveExpression() {
			return GetRuleContext<AdditiveExpressionContext>(0);
		}
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public ShiftOperatorContext shiftOperator() {
			return GetRuleContext<ShiftOperatorContext>(0);
		}
		public ShiftExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftExpression; } }
		public string RuleName { get { return "ShiftExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterShiftExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitShiftExpression(this);
		}
	}

	[RuleVersion(0)]
	public ShiftExpressionContext ShiftExpression() {
		return ShiftExpression(0);
	}

	private ShiftExpressionContext ShiftExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ShiftExpressionContext _localctx = new ShiftExpressionContext(Context, _parentState);
		ShiftExpressionContext _prevctx = _localctx;
		int _startState = 68;
		EnterRecursionRule(_localctx, 68, RULE_shiftExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 852; AdditiveExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 860;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ShiftExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_shiftExpression);
					State = 854;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 855; ShiftOperator();
					State = 856; AdditiveExpression(0);
					}
					} 
				}
				State = 862;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,59,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ShiftOperatorContext : ParserRuleContext {
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public ITerminalNode LeftShift() { return GetToken(CPP14Parser.LeftShift, 0); }
		public ShiftOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shiftOperator; } }
		public string RuleName { get { return "ShiftOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterShiftOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitShiftOperator(this);
		}
	}

	[RuleVersion(0)]
	public ShiftOperatorContext ShiftOperator() {
		ShiftOperatorContext _localctx = new ShiftOperatorContext(Context, State);
		EnterRule(_localctx, 70, RULE_shiftOperator);
		try {
			State = 865;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Greater:
				EnterOuterAlt(_localctx, 1);
				{
				State = 863; RightShift();
				}
				break;
			case LeftShift:
				EnterOuterAlt(_localctx, 2);
				{
				State = 864; Match(LeftShift);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RelationalExpressionContext : ParserRuleContext {
		public ShiftExpressionContext shiftExpression() {
			return GetRuleContext<ShiftExpressionContext>(0);
		}
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		public RelationalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relationalExpression; } }
		public string RuleName { get { return "RelationalExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRelationalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRelationalExpression(this);
		}
	}

	[RuleVersion(0)]
	public RelationalExpressionContext RelationalExpression() {
		return RelationalExpression(0);
	}

	private RelationalExpressionContext RelationalExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		RelationalExpressionContext _localctx = new RelationalExpressionContext(Context, _parentState);
		RelationalExpressionContext _prevctx = _localctx;
		int _startState = 72;
		EnterRecursionRule(_localctx, 72, RULE_relationalExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 868; ShiftExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 884;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 882;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 870;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 871; Match(Less);
						State = 872; ShiftExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 873;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 874; Match(Greater);
						State = 875; ShiftExpression(0);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 876;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 877; Match(LessEqual);
						State = 878; ShiftExpression(0);
						}
						break;
					case 4:
						{
						_localctx = new RelationalExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relationalExpression);
						State = 879;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 880; Match(GreaterEqual);
						State = 881; ShiftExpression(0);
						}
						break;
					}
					} 
				}
				State = 886;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,62,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EqualityExpressionContext : ParserRuleContext {
		public RelationalExpressionContext relationalExpression() {
			return GetRuleContext<RelationalExpressionContext>(0);
		}
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		public EqualityExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equalityExpression; } }
		public string RuleName { get { return "EqualityExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEqualityExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEqualityExpression(this);
		}
	}

	[RuleVersion(0)]
	public EqualityExpressionContext EqualityExpression() {
		return EqualityExpression(0);
	}

	private EqualityExpressionContext EqualityExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EqualityExpressionContext _localctx = new EqualityExpressionContext(Context, _parentState);
		EqualityExpressionContext _prevctx = _localctx;
		int _startState = 74;
		EnterRecursionRule(_localctx, 74, RULE_equalityExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 888; RelationalExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 898;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 896;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
					case 1:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 890;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 891; Match(Equal);
						State = 892; RelationalExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new EqualityExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equalityExpression);
						State = 893;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 894; Match(NotEqual);
						State = 895; RelationalExpression(0);
						}
						break;
					}
					} 
				}
				State = 900;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,64,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AndExpressionContext : ParserRuleContext {
		public EqualityExpressionContext equalityExpression() {
			return GetRuleContext<EqualityExpressionContext>(0);
		}
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public AndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_andExpression; } }
		public string RuleName { get { return "AndExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public AndExpressionContext AndExpression() {
		return AndExpression(0);
	}

	private AndExpressionContext AndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AndExpressionContext _localctx = new AndExpressionContext(Context, _parentState);
		AndExpressionContext _prevctx = _localctx;
		int _startState = 76;
		EnterRecursionRule(_localctx, 76, RULE_andExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 902; EqualityExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 909;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AndExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_andExpression);
					State = 904;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 905; Match(And);
					State = 906; EqualityExpression(0);
					}
					} 
				}
				State = 911;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,65,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ExclusiveOrExpressionContext : ParserRuleContext {
		public AndExpressionContext andExpression() {
			return GetRuleContext<AndExpressionContext>(0);
		}
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		public ExclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exclusiveOrExpression; } }
		public string RuleName { get { return "ExclusiveOrExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExclusiveOrExpressionContext ExclusiveOrExpression() {
		return ExclusiveOrExpression(0);
	}

	private ExclusiveOrExpressionContext ExclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExclusiveOrExpressionContext _localctx = new ExclusiveOrExpressionContext(Context, _parentState);
		ExclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 78;
		EnterRecursionRule(_localctx, 78, RULE_exclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 913; AndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 920;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_exclusiveOrExpression);
					State = 915;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 916; Match(Caret);
					State = 917; AndExpression(0);
					}
					} 
				}
				State = 922;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InclusiveOrExpressionContext : ParserRuleContext {
		public ExclusiveOrExpressionContext exclusiveOrExpression() {
			return GetRuleContext<ExclusiveOrExpressionContext>(0);
		}
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public InclusiveOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inclusiveOrExpression; } }
		public string RuleName { get { return "InclusiveOrExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInclusiveOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInclusiveOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public InclusiveOrExpressionContext InclusiveOrExpression() {
		return InclusiveOrExpression(0);
	}

	private InclusiveOrExpressionContext InclusiveOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InclusiveOrExpressionContext _localctx = new InclusiveOrExpressionContext(Context, _parentState);
		InclusiveOrExpressionContext _prevctx = _localctx;
		int _startState = 80;
		EnterRecursionRule(_localctx, 80, RULE_inclusiveOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 924; ExclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 931;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InclusiveOrExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_inclusiveOrExpression);
					State = 926;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 927; Match(Or);
					State = 928; ExclusiveOrExpression(0);
					}
					} 
				}
				State = 933;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,67,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalAndExpressionContext : ParserRuleContext {
		public InclusiveOrExpressionContext inclusiveOrExpression() {
			return GetRuleContext<InclusiveOrExpressionContext>(0);
		}
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalAndExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalAndExpression; } }
		public string RuleName { get { return "LogicalAndExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalAndExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalAndExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalAndExpressionContext LogicalAndExpression() {
		return LogicalAndExpression(0);
	}

	private LogicalAndExpressionContext LogicalAndExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalAndExpressionContext _localctx = new LogicalAndExpressionContext(Context, _parentState);
		LogicalAndExpressionContext _prevctx = _localctx;
		int _startState = 82;
		EnterRecursionRule(_localctx, 82, RULE_logicalAndExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 935; InclusiveOrExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 945;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 943;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
					case 1:
						{
						_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
						State = 937;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 938; Match(T__2);
						State = 939; InclusiveOrExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new LogicalAndExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalAndExpression);
						State = 940;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 941; Match(T__3);
						State = 942; InclusiveOrExpression(0);
						}
						break;
					}
					} 
				}
				State = 947;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LogicalOrExpressionContext : ParserRuleContext {
		public LogicalAndExpressionContext logicalAndExpression() {
			return GetRuleContext<LogicalAndExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public LogicalOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logicalOrExpression; } }
		public string RuleName { get { return "LogicalOrExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLogicalOrExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLogicalOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public LogicalOrExpressionContext LogicalOrExpression() {
		return LogicalOrExpression(0);
	}

	private LogicalOrExpressionContext LogicalOrExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		LogicalOrExpressionContext _localctx = new LogicalOrExpressionContext(Context, _parentState);
		LogicalOrExpressionContext _prevctx = _localctx;
		int _startState = 84;
		EnterRecursionRule(_localctx, 84, RULE_logicalOrExpression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 949; LogicalAndExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 959;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 957;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,70,Context) ) {
					case 1:
						{
						_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
						State = 951;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 952; Match(T__4);
						State = 953; LogicalAndExpression(0);
						}
						break;
					case 2:
						{
						_localctx = new LogicalOrExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_logicalOrExpression);
						State = 954;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 955; Match(T__5);
						State = 956; LogicalAndExpression(0);
						}
						break;
					}
					} 
				}
				State = 961;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConditionalExpressionContext : ParserRuleContext {
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public ITerminalNode Question() { return GetToken(CPP14Parser.Question, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ConditionalExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionalExpression; } }
		public string RuleName { get { return "ConditionalExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConditionalExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConditionalExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConditionalExpressionContext ConditionalExpression() {
		ConditionalExpressionContext _localctx = new ConditionalExpressionContext(Context, State);
		EnterRule(_localctx, 86, RULE_conditionalExpression);
		try {
			State = 969;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 962; LogicalOrExpression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 963; LogicalOrExpression(0);
				State = 964; Match(Question);
				State = 965; Expression(0);
				State = 966; Match(Colon);
				State = 967; AssignmentExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public LogicalOrExpressionContext logicalOrExpression() {
			return GetRuleContext<LogicalOrExpressionContext>(0);
		}
		public AssignmentOperatorContext assignmentOperator() {
			return GetRuleContext<AssignmentOperatorContext>(0);
		}
		public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		public ThrowExpressionContext throwExpression() {
			return GetRuleContext<ThrowExpressionContext>(0);
		}
		public AssignmentExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentExpression; } }
		public string RuleName { get { return "AssignmentExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentExpression(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentExpressionContext AssignmentExpression() {
		AssignmentExpressionContext _localctx = new AssignmentExpressionContext(Context, State);
		EnterRule(_localctx, 88, RULE_assignmentExpression);
		try {
			State = 977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 971; ConditionalExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 972; LogicalOrExpression(0);
				State = 973; AssignmentOperator();
				State = 974; InitializerClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 976; ThrowExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentOperatorContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public AssignmentOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignmentOperator; } }
		public string RuleName { get { return "AssignmentOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAssignmentOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAssignmentOperator(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentOperatorContext AssignmentOperator() {
		AssignmentOperatorContext _localctx = new AssignmentOperatorContext(Context, State);
		EnterRule(_localctx, 90, RULE_assignmentOperator);
		try {
			State = 990;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 979; Match(Assign);
				}
				break;
			case StarAssign:
				EnterOuterAlt(_localctx, 2);
				{
				State = 980; Match(StarAssign);
				}
				break;
			case DivAssign:
				EnterOuterAlt(_localctx, 3);
				{
				State = 981; Match(DivAssign);
				}
				break;
			case ModAssign:
				EnterOuterAlt(_localctx, 4);
				{
				State = 982; Match(ModAssign);
				}
				break;
			case PlusAssign:
				EnterOuterAlt(_localctx, 5);
				{
				State = 983; Match(PlusAssign);
				}
				break;
			case MinusAssign:
				EnterOuterAlt(_localctx, 6);
				{
				State = 984; Match(MinusAssign);
				}
				break;
			case Greater:
				EnterOuterAlt(_localctx, 7);
				{
				State = 985; RightShiftAssign();
				}
				break;
			case LeftShiftAssign:
				EnterOuterAlt(_localctx, 8);
				{
				State = 986; Match(LeftShiftAssign);
				}
				break;
			case AndAssign:
				EnterOuterAlt(_localctx, 9);
				{
				State = 987; Match(AndAssign);
				}
				break;
			case XorAssign:
				EnterOuterAlt(_localctx, 10);
				{
				State = 988; Match(XorAssign);
				}
				break;
			case OrAssign:
				EnterOuterAlt(_localctx, 11);
				{
				State = 989; Match(OrAssign);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public string RuleName { get { return "Expression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext Expression() {
		return Expression(0);
	}

	private ExpressionContext Expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 92;
		EnterRecursionRule(_localctx, 92, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 993; AssignmentExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1000;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ExpressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 995;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 996; Match(Comma);
					State = 997; AssignmentExpression();
					}
					} 
				}
				State = 1002;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,75,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ConstantExpressionContext : ParserRuleContext {
		public ConditionalExpressionContext conditionalExpression() {
			return GetRuleContext<ConditionalExpressionContext>(0);
		}
		public ConstantExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantExpression; } }
		public string RuleName { get { return "ConstantExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConstantExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConstantExpression(this);
		}
	}

	[RuleVersion(0)]
	public ConstantExpressionContext ConstantExpression() {
		ConstantExpressionContext _localctx = new ConstantExpressionContext(Context, State);
		EnterRule(_localctx, 94, RULE_constantExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1003; ConditionalExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public LabeledStatementContext labeledStatement() {
			return GetRuleContext<LabeledStatementContext>(0);
		}
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public SelectionStatementContext selectionStatement() {
			return GetRuleContext<SelectionStatementContext>(0);
		}
		public IterationStatementContext iterationStatement() {
			return GetRuleContext<IterationStatementContext>(0);
		}
		public JumpStatementContext jumpStatement() {
			return GetRuleContext<JumpStatementContext>(0);
		}
		public DeclarationStatementContext declarationStatement() {
			return GetRuleContext<DeclarationStatementContext>(0);
		}
		public TryBlockContext tryBlock() {
			return GetRuleContext<TryBlockContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public string RuleName { get { return "Statement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext Statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 96, RULE_statement);
		int _la;
		try {
			State = 1031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,82,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1005; LabeledStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
				case 1:
					{
					State = 1006; AttributeSpecifierSeq(0);
					}
					break;
				}
				State = 1009; ExpressionStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1011;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1010; AttributeSpecifierSeq(0);
					}
				}

				State = 1013; CompoundStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1014; AttributeSpecifierSeq(0);
					}
				}

				State = 1017; SelectionStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1018; AttributeSpecifierSeq(0);
					}
				}

				State = 1021; IterationStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1023;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1022; AttributeSpecifierSeq(0);
					}
				}

				State = 1025; JumpStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1026; DeclarationStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1028;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1027; AttributeSpecifierSeq(0);
					}
				}

				State = 1030; TryBlock();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledStatementContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode Case() { return GetToken(CPP14Parser.Case, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public LabeledStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledStatement; } }
		public string RuleName { get { return "LabeledStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLabeledStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLabeledStatement(this);
		}
	}

	[RuleVersion(0)]
	public LabeledStatementContext LabeledStatement() {
		LabeledStatementContext _localctx = new LabeledStatementContext(Context, State);
		EnterRule(_localctx, 98, RULE_labeledStatement);
		int _la;
		try {
			State = 1053;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1034;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1033; AttributeSpecifierSeq(0);
					}
				}

				State = 1036; Match(Identifier);
				State = 1037; Match(Colon);
				State = 1038; Statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1040;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1039; AttributeSpecifierSeq(0);
					}
				}

				State = 1042; Match(Case);
				State = 1043; ConstantExpression();
				State = 1044; Match(Colon);
				State = 1045; Statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1048;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1047; AttributeSpecifierSeq(0);
					}
				}

				State = 1050; Match(Default);
				State = 1051; Match(Colon);
				State = 1052; Statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionStatementContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionStatement; } }
		public string RuleName { get { return "ExpressionStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExpressionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExpressionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionStatementContext ExpressionStatement() {
		ExpressionStatementContext _localctx = new ExpressionStatementContext(Context, State);
		EnterRule(_localctx, 100, RULE_expressionStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1056;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
				{
				State = 1055; Expression(0);
				}
			}

			State = 1058; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		public string RuleName { get { return "CompoundStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext CompoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 102, RULE_compoundStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1060; Match(LeftBrace);
			State = 1062;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << AlignAs) | (1L << AlignOf) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Break) | (1L << Case) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << ConstCast) | (1L << Continue) | (1L << DeclType) | (1L << Default) | (1L << Delete) | (1L << Do) | (1L << Double) | (1L << DynamicCast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << False) | (1L << Float) | (1L << For) | (1L << Friend) | (1L << Goto) | (1L << If) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << Register) | (1L << ReinterpretCast) | (1L << Return) | (1L << Short) | (1L << Signed) | (1L << SizeOf) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (StaticCast - 64)) | (1L << (Struct - 64)) | (1L << (Switch - 64)) | (1L << (This - 64)) | (1L << (ThreadLocal - 64)) | (1L << (Throw - 64)) | (1L << (True - 64)) | (1L << (Try - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeId - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (While - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (LeftBrace - 64)) | (1L << (Plus - 64)) | (1L << (Minus - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Or - 64)) | (1L << (Tilde - 64)) | (1L << (PlusPlus - 64)) | (1L << (MinusMinus - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)) | (1L << (IntegerLiteral - 128)) | (1L << (CharacterLiteral - 128)) | (1L << (FloatingLiteral - 128)) | (1L << (StringLiteral - 128)) | (1L << (UserDefinedIntegerLiteral - 128)) | (1L << (UserDefinedFloatingLiteral - 128)) | (1L << (UserDefinedStringLiteral - 128)) | (1L << (UserDefinedCharacterLiteral - 128)))) != 0)) {
				{
				State = 1061; StatementSeq(0);
				}
			}

			State = 1064; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementSeqContext : ParserRuleContext {
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public StatementSeqContext statementSeq() {
			return GetRuleContext<StatementSeqContext>(0);
		}
		public StatementSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementSeq; } }
		public string RuleName { get { return "StatementSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStatementSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStatementSeq(this);
		}
	}

	[RuleVersion(0)]
	public StatementSeqContext StatementSeq() {
		return StatementSeq(0);
	}

	private StatementSeqContext StatementSeq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		StatementSeqContext _localctx = new StatementSeqContext(Context, _parentState);
		StatementSeqContext _prevctx = _localctx;
		int _startState = 104;
		EnterRecursionRule(_localctx, 104, RULE_statementSeq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1067; Statement();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1073;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new StatementSeqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_statementSeq);
					State = 1069;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1070; Statement();
					}
					} 
				}
				State = 1075;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,89,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SelectionStatementContext : ParserRuleContext {
		public ITerminalNode If() { return GetToken(CPP14Parser.If, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode Else() { return GetToken(CPP14Parser.Else, 0); }
		public ITerminalNode Switch() { return GetToken(CPP14Parser.Switch, 0); }
		public SelectionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectionStatement; } }
		public string RuleName { get { return "SelectionStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSelectionStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSelectionStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectionStatementContext SelectionStatement() {
		SelectionStatementContext _localctx = new SelectionStatementContext(Context, State);
		EnterRule(_localctx, 106, RULE_selectionStatement);
		try {
			State = 1096;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,90,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1076; Match(If);
				State = 1077; Match(LeftParen);
				State = 1078; Condition();
				State = 1079; Match(RightParen);
				State = 1080; Statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1082; Match(If);
				State = 1083; Match(LeftParen);
				State = 1084; Condition();
				State = 1085; Match(RightParen);
				State = 1086; Statement();
				State = 1087; Match(Else);
				State = 1088; Statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1090; Match(Switch);
				State = 1091; Match(LeftParen);
				State = 1092; Condition();
				State = 1093; Match(RightParen);
				State = 1094; Statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		public string RuleName { get { return "Condition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext Condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 108, RULE_condition);
		int _la;
		try {
			State = 1114;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,93,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1098; Expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1099; AttributeSpecifierSeq(0);
					}
				}

				State = 1102; DeclSpecifierSeq();
				State = 1103; Declarator();
				State = 1104; Match(Assign);
				State = 1105; InitializerClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1107; AttributeSpecifierSeq(0);
					}
				}

				State = 1110; DeclSpecifierSeq();
				State = 1111; Declarator();
				State = 1112; BracedInitList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterationStatementContext : ParserRuleContext {
		public ITerminalNode While() { return GetToken(CPP14Parser.While, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ITerminalNode Do() { return GetToken(CPP14Parser.Do, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode For() { return GetToken(CPP14Parser.For, 0); }
		public ForInitStatementContext forInitStatement() {
			return GetRuleContext<ForInitStatementContext>(0);
		}
		public ForRangeDeclarationContext forRangeDeclaration() {
			return GetRuleContext<ForRangeDeclarationContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public ForRangeInitializerContext forRangeInitializer() {
			return GetRuleContext<ForRangeInitializerContext>(0);
		}
		public IterationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterationStatement; } }
		public string RuleName { get { return "IterationStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterIterationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitIterationStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterationStatementContext IterationStatement() {
		IterationStatementContext _localctx = new IterationStatementContext(Context, State);
		EnterRule(_localctx, 110, RULE_iterationStatement);
		int _la;
		try {
			State = 1151;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,96,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1116; Match(While);
				State = 1117; Match(LeftParen);
				State = 1118; Condition();
				State = 1119; Match(RightParen);
				State = 1120; Statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1122; Match(Do);
				State = 1123; Statement();
				State = 1124; Match(While);
				State = 1125; Match(LeftParen);
				State = 1126; Expression(0);
				State = 1127; Match(RightParen);
				State = 1128; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1130; Match(For);
				State = 1131; Match(LeftParen);
				State = 1132; ForInitStatement();
				State = 1134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignAs) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << False) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << Register) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf) | (1L << Static))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (ThreadLocal - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeDef - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Virtual - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 1133; Condition();
					}
				}

				State = 1136; Match(Semi);
				State = 1138;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 1137; Expression(0);
					}
				}

				State = 1140; Match(RightParen);
				State = 1141; Statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1143; Match(For);
				State = 1144; Match(LeftParen);
				State = 1145; ForRangeDeclaration();
				State = 1146; Match(Colon);
				State = 1147; ForRangeInitializer();
				State = 1148; Match(RightParen);
				State = 1149; Statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitStatementContext : ParserRuleContext {
		public ExpressionStatementContext expressionStatement() {
			return GetRuleContext<ExpressionStatementContext>(0);
		}
		public SimpleDeclarationContext simpleDeclaration() {
			return GetRuleContext<SimpleDeclarationContext>(0);
		}
		public ForInitStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInitStatement; } }
		public string RuleName { get { return "ForInitStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForInitStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForInitStatement(this);
		}
	}

	[RuleVersion(0)]
	public ForInitStatementContext ForInitStatement() {
		ForInitStatementContext _localctx = new ForInitStatementContext(Context, State);
		EnterRule(_localctx, 112, RULE_forInitStatement);
		try {
			State = 1155;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1153; ExpressionStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1154; SimpleDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeDeclarationContext : ParserRuleContext {
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ForRangeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeDeclaration; } }
		public string RuleName { get { return "ForRangeDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForRangeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForRangeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeDeclarationContext ForRangeDeclaration() {
		ForRangeDeclarationContext _localctx = new ForRangeDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_forRangeDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AlignAs || _la==LeftBracket) {
				{
				State = 1157; AttributeSpecifierSeq(0);
				}
			}

			State = 1160; DeclSpecifierSeq();
			State = 1161; Declarator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForRangeInitializerContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public ForRangeInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forRangeInitializer; } }
		public string RuleName { get { return "ForRangeInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterForRangeInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitForRangeInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ForRangeInitializerContext ForRangeInitializer() {
		ForRangeInitializerContext _localctx = new ForRangeInitializerContext(Context, State);
		EnterRule(_localctx, 116, RULE_forRangeInitializer);
		try {
			State = 1165;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case AlignOf:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case ConstCast:
			case DeclType:
			case Delete:
			case Double:
			case DynamicCast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case NoExcept:
			case NullPtr:
			case Null:
			case Operator:
			case ReinterpretCast:
			case Short:
			case Signed:
			case SizeOf:
			case StaticCast:
			case This:
			case Throw:
			case True:
			case TypeId:
			case TypeName:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case PlusPlus:
			case MinusMinus:
			case DoubleColon:
			case Identifier:
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1163; Expression(0);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1164; BracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JumpStatementContext : ParserRuleContext {
		public ITerminalNode Break() { return GetToken(CPP14Parser.Break, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode Continue() { return GetToken(CPP14Parser.Continue, 0); }
		public ITerminalNode Return() { return GetToken(CPP14Parser.Return, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public ITerminalNode Goto() { return GetToken(CPP14Parser.Goto, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public JumpStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jumpStatement; } }
		public string RuleName { get { return "JumpStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterJumpStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitJumpStatement(this);
		}
	}

	[RuleVersion(0)]
	public JumpStatementContext JumpStatement() {
		JumpStatementContext _localctx = new JumpStatementContext(Context, State);
		EnterRule(_localctx, 118, RULE_jumpStatement);
		int _la;
		try {
			State = 1183;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1167; Match(Break);
				State = 1168; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1169; Match(Continue);
				State = 1170; Match(Semi);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1171; Match(Return);
				State = 1173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 1172; Expression(0);
					}
				}

				State = 1175; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1176; Match(Return);
				State = 1177; BracedInitList();
				State = 1178; Match(Semi);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1180; Match(Goto);
				State = 1181; Match(Identifier);
				State = 1182; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationStatementContext : ParserRuleContext {
		public BlockDeclarationContext blockDeclaration() {
			return GetRuleContext<BlockDeclarationContext>(0);
		}
		public DeclarationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationStatement; } }
		public string RuleName { get { return "DeclarationStatement"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationStatementContext DeclarationStatement() {
		DeclarationStatementContext _localctx = new DeclarationStatementContext(Context, State);
		EnterRule(_localctx, 120, RULE_declarationStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1185; BlockDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationSeqContext : ParserRuleContext {
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public DeclarationSeqContext declarationSeq() {
			return GetRuleContext<DeclarationSeqContext>(0);
		}
		public DeclarationSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarationSeq; } }
		public string RuleName { get { return "DeclarationSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarationSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarationSeq(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationSeqContext DeclarationSeq() {
		return DeclarationSeq(0);
	}

	private DeclarationSeqContext DeclarationSeq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		DeclarationSeqContext _localctx = new DeclarationSeqContext(Context, _parentState);
		DeclarationSeqContext _prevctx = _localctx;
		int _startState = 122;
		EnterRecursionRule(_localctx, 122, RULE_declarationSeq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1188; Declaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1194;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new DeclarationSeqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_declarationSeq);
					State = 1190;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1191; Declaration();
					}
					} 
				}
				State = 1196;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		public BlockDeclarationContext blockDeclaration() {
			return GetRuleContext<BlockDeclarationContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public ExplicitInstantiationContext explicitInstantiation() {
			return GetRuleContext<ExplicitInstantiationContext>(0);
		}
		public ExplicitSpecializationContext explicitSpecialization() {
			return GetRuleContext<ExplicitSpecializationContext>(0);
		}
		public LinkageSpecificationContext linkageSpecification() {
			return GetRuleContext<LinkageSpecificationContext>(0);
		}
		public NamespaceDefinitionContext namespaceDefinition() {
			return GetRuleContext<NamespaceDefinitionContext>(0);
		}
		public EmptyDeclarationContext emptyDeclaration() {
			return GetRuleContext<EmptyDeclarationContext>(0);
		}
		public AttributeDeclarationContext attributeDeclaration() {
			return GetRuleContext<AttributeDeclarationContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		public string RuleName { get { return "Declaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext Declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 124, RULE_declaration);
		try {
			State = 1206;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1197; BlockDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1198; FunctionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1199; TemplateDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1200; ExplicitInstantiation();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1201; ExplicitSpecialization();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1202; LinkageSpecification();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1203; NamespaceDefinition();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1204; EmptyDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1205; AttributeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockDeclarationContext : ParserRuleContext {
		public SimpleDeclarationContext simpleDeclaration() {
			return GetRuleContext<SimpleDeclarationContext>(0);
		}
		public AsmDefinitionContext asmDefinition() {
			return GetRuleContext<AsmDefinitionContext>(0);
		}
		public NamespaceAliasDefinitionContext namespaceAliasDefinition() {
			return GetRuleContext<NamespaceAliasDefinitionContext>(0);
		}
		public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		public UsingDirectiveContext usingDirective() {
			return GetRuleContext<UsingDirectiveContext>(0);
		}
		public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public AliasDeclarationContext aliasDeclaration() {
			return GetRuleContext<AliasDeclarationContext>(0);
		}
		public OpaqueEnumDeclarationContext opaqueEnumDeclaration() {
			return GetRuleContext<OpaqueEnumDeclarationContext>(0);
		}
		public BlockDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockDeclaration; } }
		public string RuleName { get { return "BlockDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBlockDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBlockDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public BlockDeclarationContext BlockDeclaration() {
		BlockDeclarationContext _localctx = new BlockDeclarationContext(Context, State);
		EnterRule(_localctx, 126, RULE_blockDeclaration);
		try {
			State = 1216;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,104,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1208; SimpleDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1209; AsmDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1210; NamespaceAliasDefinition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1211; UsingDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1212; UsingDirective();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1213; StaticAssertDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1214; AliasDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1215; OpaqueEnumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AliasDeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public AliasDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aliasDeclaration; } }
		public string RuleName { get { return "AliasDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAliasDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAliasDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AliasDeclarationContext AliasDeclaration() {
		AliasDeclarationContext _localctx = new AliasDeclarationContext(Context, State);
		EnterRule(_localctx, 128, RULE_aliasDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1218; Match(Using);
			State = 1219; Match(Identifier);
			State = 1221;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AlignAs || _la==LeftBracket) {
				{
				State = 1220; AttributeSpecifierSeq(0);
				}
			}

			State = 1223; Match(Assign);
			State = 1224; TheTypeId();
			State = 1225; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleDeclarationContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public SimpleDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleDeclaration; } }
		public string RuleName { get { return "SimpleDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpleDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpleDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SimpleDeclarationContext SimpleDeclaration() {
		SimpleDeclarationContext _localctx = new SimpleDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_simpleDeclaration);
		int _la;
		try {
			State = 1241;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case DeclType:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case Struct:
			case ThreadLocal:
			case TypeDef:
			case TypeName:
			case Union:
			case Unsigned:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case Star:
			case And:
			case Tilde:
			case DoubleColon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1228;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 1227; DeclSpecifierSeq();
					}
					break;
				}
				State = 1231;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << DeclType) | (1L << Operator))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (DoubleColon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1230; InitDeclaratorList(0);
					}
				}

				State = 1233; Match(Semi);
				}
				break;
			case AlignAs:
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1234; AttributeSpecifierSeq(0);
				State = 1236;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
				case 1:
					{
					State = 1235; DeclSpecifierSeq();
					}
					break;
				}
				State = 1238; InitDeclaratorList(0);
				State = 1239; Match(Semi);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringLiteralsContext : ParserRuleContext {
		public ITerminalNode[] StringLiteral() { return GetTokens(CPP14Parser.StringLiteral); }
		public ITerminalNode StringLiteral(int i) {
			return GetToken(CPP14Parser.StringLiteral, i);
		}
		public StringLiteralsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringLiterals; } }
		public string RuleName { get { return "StringLiterals"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStringLiterals(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStringLiterals(this);
		}
	}

	[RuleVersion(0)]
	public StringLiteralsContext StringLiterals() {
		StringLiteralsContext _localctx = new StringLiteralsContext(Context, State);
		EnterRule(_localctx, 132, RULE_stringLiterals);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1244;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1243; Match(StringLiteral);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1246;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,110,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StaticAssertDeclarationContext : ParserRuleContext {
		public ITerminalNode StaticAssert() { return GetToken(CPP14Parser.StaticAssert, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public StringLiteralsContext stringLiterals() {
			return GetRuleContext<StringLiteralsContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public StaticAssertDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_staticAssertDeclaration; } }
		public string RuleName { get { return "StaticAssertDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStaticAssertDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStaticAssertDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public StaticAssertDeclarationContext StaticAssertDeclaration() {
		StaticAssertDeclarationContext _localctx = new StaticAssertDeclarationContext(Context, State);
		EnterRule(_localctx, 134, RULE_staticAssertDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1248; Match(StaticAssert);
			State = 1249; Match(LeftParen);
			State = 1250; ConstantExpression();
			State = 1251; Match(Comma);
			State = 1252; StringLiterals();
			State = 1253; Match(RightParen);
			State = 1254; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmptyDeclarationContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public EmptyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emptyDeclaration; } }
		public string RuleName { get { return "EmptyDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEmptyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEmptyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public EmptyDeclarationContext EmptyDeclaration() {
		EmptyDeclarationContext _localctx = new EmptyDeclarationContext(Context, State);
		EnterRule(_localctx, 136, RULE_emptyDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1256; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeDeclarationContext : ParserRuleContext {
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeDeclaration; } }
		public string RuleName { get { return "AttributeDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public AttributeDeclarationContext AttributeDeclaration() {
		AttributeDeclarationContext _localctx = new AttributeDeclarationContext(Context, State);
		EnterRule(_localctx, 138, RULE_attributeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1258; AttributeSpecifierSeq(0);
			State = 1259; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclSpecifierContext : ParserRuleContext {
		public StorageClassSpecifierContext storageClassSpecifier() {
			return GetRuleContext<StorageClassSpecifierContext>(0);
		}
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public FunctionSpecifierContext functionSpecifier() {
			return GetRuleContext<FunctionSpecifierContext>(0);
		}
		public ITerminalNode Friend() { return GetToken(CPP14Parser.Friend, 0); }
		public ITerminalNode TypeDef() { return GetToken(CPP14Parser.TypeDef, 0); }
		public ITerminalNode Constexpr() { return GetToken(CPP14Parser.Constexpr, 0); }
		public DeclSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declSpecifier; } }
		public string RuleName { get { return "DeclSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public DeclSpecifierContext DeclSpecifier() {
		DeclSpecifierContext _localctx = new DeclSpecifierContext(Context, State);
		EnterRule(_localctx, 140, RULE_declSpecifier);
		try {
			State = 1267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Extern:
			case Mutable:
			case Register:
			case Static:
			case ThreadLocal:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1261; StorageClassSpecifier();
				}
				break;
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case DeclType:
			case Double:
			case Enum:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Struct:
			case TypeName:
			case Union:
			case Unsigned:
			case Void:
			case Volatile:
			case Wchar:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1262; TypeSpecifier();
				}
				break;
			case Explicit:
			case Inline:
			case Virtual:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1263; FunctionSpecifier();
				}
				break;
			case Friend:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1264; Match(Friend);
				}
				break;
			case TypeDef:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1265; Match(TypeDef);
				}
				break;
			case Constexpr:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1266; Match(Constexpr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclSpecifierSeqContext : ParserRuleContext {
		public DeclSpecifierContext declSpecifier() {
			return GetRuleContext<DeclSpecifierContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public DeclSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declSpecifierSeq; } }
		public string RuleName { get { return "DeclSpecifierSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclSpecifierSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclSpecifierSeq(this);
		}
	}

	[RuleVersion(0)]
	public DeclSpecifierSeqContext DeclSpecifierSeq() {
		DeclSpecifierSeqContext _localctx = new DeclSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 142, RULE_declSpecifierSeq);
		try {
			State = 1276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1269; DeclSpecifier();
				State = 1271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
				case 1:
					{
					State = 1270; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1273; DeclSpecifier();
				State = 1274; DeclSpecifierSeq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageClassSpecifierContext : ParserRuleContext {
		public ITerminalNode Register() { return GetToken(CPP14Parser.Register, 0); }
		public ITerminalNode Static() { return GetToken(CPP14Parser.Static, 0); }
		public ITerminalNode ThreadLocal() { return GetToken(CPP14Parser.ThreadLocal, 0); }
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode Mutable() { return GetToken(CPP14Parser.Mutable, 0); }
		public StorageClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageClassSpecifier; } }
		public string RuleName { get { return "StorageClassSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterStorageClassSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitStorageClassSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public StorageClassSpecifierContext StorageClassSpecifier() {
		StorageClassSpecifierContext _localctx = new StorageClassSpecifierContext(Context, State);
		EnterRule(_localctx, 144, RULE_storageClassSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1278;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 35)) & ~0x3f) == 0 && ((1L << (_la - 35)) & ((1L << (Extern - 35)) | (1L << (Mutable - 35)) | (1L << (Register - 35)) | (1L << (Static - 35)) | (1L << (ThreadLocal - 35)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionSpecifierContext : ParserRuleContext {
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public ITerminalNode Explicit() { return GetToken(CPP14Parser.Explicit, 0); }
		public FunctionSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionSpecifier; } }
		public string RuleName { get { return "FunctionSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public FunctionSpecifierContext FunctionSpecifier() {
		FunctionSpecifierContext _localctx = new FunctionSpecifierContext(Context, State);
		EnterRule(_localctx, 146, RULE_functionSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1280;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 33)) & ~0x3f) == 0 && ((1L << (_la - 33)) & ((1L << (Explicit - 33)) | (1L << (Inline - 33)) | (1L << (Virtual - 33)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypedefNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TypedefNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typedefName; } }
		public string RuleName { get { return "TypedefName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypedefName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypedefName(this);
		}
	}

	[RuleVersion(0)]
	public TypedefNameContext TypedefName() {
		TypedefNameContext _localctx = new TypedefNameContext(Context, State);
		EnterRule(_localctx, 148, RULE_typedefName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1282; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierContext : ParserRuleContext {
		public TrailingTypeSpecifierContext trailingTypeSpecifier() {
			return GetRuleContext<TrailingTypeSpecifierContext>(0);
		}
		public ClassSpecifierContext classSpecifier() {
			return GetRuleContext<ClassSpecifierContext>(0);
		}
		public EnumSpecifierContext enumSpecifier() {
			return GetRuleContext<EnumSpecifierContext>(0);
		}
		public TypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifier; } }
		public string RuleName { get { return "TypeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierContext TypeSpecifier() {
		TypeSpecifierContext _localctx = new TypeSpecifierContext(Context, State);
		EnterRule(_localctx, 150, RULE_typeSpecifier);
		try {
			State = 1287;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1284; TrailingTypeSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1285; ClassSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1286; EnumSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingTypeSpecifierContext : ParserRuleContext {
		public SimpleTypeSpecifierContext simpleTypeSpecifier() {
			return GetRuleContext<SimpleTypeSpecifierContext>(0);
		}
		public ElaboratedTypeSpecifierContext elaboratedTypeSpecifier() {
			return GetRuleContext<ElaboratedTypeSpecifierContext>(0);
		}
		public TypeNameSpecifierContext typeNameSpecifier() {
			return GetRuleContext<TypeNameSpecifierContext>(0);
		}
		public CvQualifierContext cvQualifier() {
			return GetRuleContext<CvQualifierContext>(0);
		}
		public TrailingTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingTypeSpecifier; } }
		public string RuleName { get { return "TrailingTypeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TrailingTypeSpecifierContext TrailingTypeSpecifier() {
		TrailingTypeSpecifierContext _localctx = new TrailingTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 152, RULE_trailingTypeSpecifier);
		try {
			State = 1293;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case DeclType:
			case Double:
			case Float:
			case Int:
			case Long:
			case Short:
			case Signed:
			case Unsigned:
			case Void:
			case Wchar:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1289; SimpleTypeSpecifier();
				}
				break;
			case Class:
			case Enum:
			case Struct:
			case Union:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1290; ElaboratedTypeSpecifier();
				}
				break;
			case TypeName:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1291; TypeNameSpecifier();
				}
				break;
			case Const:
			case Volatile:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1292; CvQualifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeSpecifierSeqContext : ParserRuleContext {
		public TypeSpecifierContext typeSpecifier() {
			return GetRuleContext<TypeSpecifierContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public TypeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeSpecifierSeq; } }
		public string RuleName { get { return "TypeSpecifierSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeSpecifierSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeSpecifierSeq(this);
		}
	}

	[RuleVersion(0)]
	public TypeSpecifierSeqContext TypeSpecifierSeq() {
		TypeSpecifierSeqContext _localctx = new TypeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 154, RULE_typeSpecifierSeq);
		try {
			State = 1302;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,117,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1295; TypeSpecifier();
				State = 1297;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
				case 1:
					{
					State = 1296; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1299; TypeSpecifier();
				State = 1300; TypeSpecifierSeq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingTypeSpecifierSeqContext : ParserRuleContext {
		public TrailingTypeSpecifierContext trailingTypeSpecifier() {
			return GetRuleContext<TrailingTypeSpecifierContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public TrailingTypeSpecifierSeqContext trailingTypeSpecifierSeq() {
			return GetRuleContext<TrailingTypeSpecifierSeqContext>(0);
		}
		public TrailingTypeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingTypeSpecifierSeq; } }
		public string RuleName { get { return "TrailingTypeSpecifierSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingTypeSpecifierSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingTypeSpecifierSeq(this);
		}
	}

	[RuleVersion(0)]
	public TrailingTypeSpecifierSeqContext TrailingTypeSpecifierSeq() {
		TrailingTypeSpecifierSeqContext _localctx = new TrailingTypeSpecifierSeqContext(Context, State);
		EnterRule(_localctx, 156, RULE_trailingTypeSpecifierSeq);
		try {
			State = 1311;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1304; TrailingTypeSpecifier();
				State = 1306;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,118,Context) ) {
				case 1:
					{
					State = 1305; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1308; TrailingTypeSpecifier();
				State = 1309; TrailingTypeSpecifierSeq();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTypeSpecifierContext : ParserRuleContext {
		public TheTypeNameContext theTypeName() {
			return GetRuleContext<TheTypeNameContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ITerminalNode Char() { return GetToken(CPP14Parser.Char, 0); }
		public ITerminalNode Char16() { return GetToken(CPP14Parser.Char16, 0); }
		public ITerminalNode Char32() { return GetToken(CPP14Parser.Char32, 0); }
		public ITerminalNode Wchar() { return GetToken(CPP14Parser.Wchar, 0); }
		public ITerminalNode Bool() { return GetToken(CPP14Parser.Bool, 0); }
		public ITerminalNode Short() { return GetToken(CPP14Parser.Short, 0); }
		public ITerminalNode Int() { return GetToken(CPP14Parser.Int, 0); }
		public ITerminalNode Long() { return GetToken(CPP14Parser.Long, 0); }
		public ITerminalNode Signed() { return GetToken(CPP14Parser.Signed, 0); }
		public ITerminalNode Unsigned() { return GetToken(CPP14Parser.Unsigned, 0); }
		public ITerminalNode Float() { return GetToken(CPP14Parser.Float, 0); }
		public ITerminalNode Double() { return GetToken(CPP14Parser.Double, 0); }
		public ITerminalNode Void() { return GetToken(CPP14Parser.Void, 0); }
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DeclTypeSpecifierContext declTypeSpecifier() {
			return GetRuleContext<DeclTypeSpecifierContext>(0);
		}
		public SimpleTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTypeSpecifier; } }
		public string RuleName { get { return "SimpleTypeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpleTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpleTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTypeSpecifierContext SimpleTypeSpecifier() {
		SimpleTypeSpecifierContext _localctx = new SimpleTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 158, RULE_simpleTypeSpecifier);
		try {
			State = 1336;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1314;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,120,Context) ) {
				case 1:
					{
					State = 1313; NestedNameSpecifier(0);
					}
					break;
				}
				State = 1316; TheTypeName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1317; NestedNameSpecifier(0);
				State = 1318; Match(Template);
				State = 1319; SimpleTemplateId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1321; Match(Char);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1322; Match(Char16);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1323; Match(Char32);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1324; Match(Wchar);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1325; Match(Bool);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1326; Match(Short);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1327; Match(Int);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1328; Match(Long);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1329; Match(Signed);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1330; Match(Unsigned);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1331; Match(Float);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1332; Match(Double);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1333; Match(Void);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1334; Match(Auto);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1335; DeclTypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheTypeNameContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public EnumNameContext enumName() {
			return GetRuleContext<EnumNameContext>(0);
		}
		public TypedefNameContext typedefName() {
			return GetRuleContext<TypedefNameContext>(0);
		}
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public TheTypeNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theTypeName; } }
		public string RuleName { get { return "TheTypeName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTheTypeName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTheTypeName(this);
		}
	}

	[RuleVersion(0)]
	public TheTypeNameContext TheTypeName() {
		TheTypeNameContext _localctx = new TheTypeNameContext(Context, State);
		EnterRule(_localctx, 160, RULE_theTypeName);
		try {
			State = 1342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1338; ClassName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1339; EnumName();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1340; TypedefName();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1341; SimpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclTypeSpecifierContext : ParserRuleContext {
		public ITerminalNode DeclType() { return GetToken(CPP14Parser.DeclType, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Auto() { return GetToken(CPP14Parser.Auto, 0); }
		public DeclTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declTypeSpecifier; } }
		public string RuleName { get { return "DeclTypeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public DeclTypeSpecifierContext DeclTypeSpecifier() {
		DeclTypeSpecifierContext _localctx = new DeclTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 162, RULE_declTypeSpecifier);
		try {
			State = 1353;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1344; Match(DeclType);
				State = 1345; Match(LeftParen);
				State = 1346; Expression(0);
				State = 1347; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1349; Match(DeclType);
				State = 1350; Match(LeftParen);
				State = 1351; Match(Auto);
				State = 1352; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElaboratedTypeSpecifierContext : ParserRuleContext {
		public ClassKeyContext classKey() {
			return GetRuleContext<ClassKeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ElaboratedTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elaboratedTypeSpecifier; } }
		public string RuleName { get { return "ElaboratedTypeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterElaboratedTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitElaboratedTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public ElaboratedTypeSpecifierContext ElaboratedTypeSpecifier() {
		ElaboratedTypeSpecifierContext _localctx = new ElaboratedTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 164, RULE_elaboratedTypeSpecifier);
		int _la;
		try {
			State = 1379;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1355; ClassKey();
				State = 1357;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1356; AttributeSpecifierSeq(0);
					}
				}

				State = 1360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,125,Context) ) {
				case 1:
					{
					State = 1359; NestedNameSpecifier(0);
					}
					break;
				}
				State = 1362; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1364; ClassKey();
				State = 1365; SimpleTemplateId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1367; ClassKey();
				State = 1368; NestedNameSpecifier(0);
				State = 1370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 1369; Match(Template);
					}
				}

				State = 1372; SimpleTemplateId();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1374; Match(Enum);
				State = 1376;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,127,Context) ) {
				case 1:
					{
					State = 1375; NestedNameSpecifier(0);
					}
					break;
				}
				State = 1378; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumName; } }
		public string RuleName { get { return "EnumName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumName(this);
		}
	}

	[RuleVersion(0)]
	public EnumNameContext EnumName() {
		EnumNameContext _localctx = new EnumNameContext(Context, State);
		EnterRule(_localctx, 166, RULE_enumName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1381; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumSpecifierContext : ParserRuleContext {
		public EnumHeadContext enumHead() {
			return GetRuleContext<EnumHeadContext>(0);
		}
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumSpecifier; } }
		public string RuleName { get { return "EnumSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public EnumSpecifierContext EnumSpecifier() {
		EnumSpecifierContext _localctx = new EnumSpecifierContext(Context, State);
		EnterRule(_localctx, 168, RULE_enumSpecifier);
		int _la;
		try {
			State = 1396;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,130,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1383; EnumHead();
				State = 1384; Match(LeftBrace);
				State = 1386;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1385; EnumeratorList(0);
					}
				}

				State = 1388; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1390; EnumHead();
				State = 1391; Match(LeftBrace);
				State = 1392; EnumeratorList(0);
				State = 1393; Match(Comma);
				State = 1394; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumHeadContext : ParserRuleContext {
		public EnumKeyContext enumKey() {
			return GetRuleContext<EnumKeyContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumBaseContext enumBase() {
			return GetRuleContext<EnumBaseContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public EnumHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumHead; } }
		public string RuleName { get { return "EnumHead"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumHead(this);
		}
	}

	[RuleVersion(0)]
	public EnumHeadContext EnumHead() {
		EnumHeadContext _localctx = new EnumHeadContext(Context, State);
		EnterRule(_localctx, 170, RULE_enumHead);
		int _la;
		try {
			State = 1417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1398; EnumKey();
				State = 1400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1399; AttributeSpecifierSeq(0);
					}
				}

				State = 1403;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 1402; Match(Identifier);
					}
				}

				State = 1406;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1405; EnumBase();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1408; EnumKey();
				State = 1410;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1409; AttributeSpecifierSeq(0);
					}
				}

				State = 1412; NestedNameSpecifier(0);
				State = 1413; Match(Identifier);
				State = 1415;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1414; EnumBase();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OpaqueEnumDeclarationContext : ParserRuleContext {
		public EnumKeyContext enumKey() {
			return GetRuleContext<EnumKeyContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public EnumBaseContext enumBase() {
			return GetRuleContext<EnumBaseContext>(0);
		}
		public OpaqueEnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_opaqueEnumDeclaration; } }
		public string RuleName { get { return "OpaqueEnumDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOpaqueEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOpaqueEnumDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public OpaqueEnumDeclarationContext OpaqueEnumDeclaration() {
		OpaqueEnumDeclarationContext _localctx = new OpaqueEnumDeclarationContext(Context, State);
		EnterRule(_localctx, 172, RULE_opaqueEnumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1419; EnumKey();
			State = 1421;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AlignAs || _la==LeftBracket) {
				{
				State = 1420; AttributeSpecifierSeq(0);
				}
			}

			State = 1423; Match(Identifier);
			State = 1425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 1424; EnumBase();
				}
			}

			State = 1427; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumKeyContext : ParserRuleContext {
		public ITerminalNode Enum() { return GetToken(CPP14Parser.Enum, 0); }
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public EnumKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumKey; } }
		public string RuleName { get { return "EnumKey"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumKey(this);
		}
	}

	[RuleVersion(0)]
	public EnumKeyContext EnumKey() {
		EnumKeyContext _localctx = new EnumKeyContext(Context, State);
		EnterRule(_localctx, 174, RULE_enumKey);
		try {
			State = 1434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,139,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1429; Match(Enum);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1430; Match(Enum);
				State = 1431; Match(Class);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1432; Match(Enum);
				State = 1433; Match(Struct);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBaseContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public EnumBaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBase; } }
		public string RuleName { get { return "EnumBase"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumBase(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumBase(this);
		}
	}

	[RuleVersion(0)]
	public EnumBaseContext EnumBase() {
		EnumBaseContext _localctx = new EnumBaseContext(Context, State);
		EnterRule(_localctx, 176, RULE_enumBase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1436; Match(Colon);
			State = 1437; TypeSpecifierSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorListContext : ParserRuleContext {
		public EnumeratorDefinitionContext enumeratorDefinition() {
			return GetRuleContext<EnumeratorDefinitionContext>(0);
		}
		public EnumeratorListContext enumeratorList() {
			return GetRuleContext<EnumeratorListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public EnumeratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorList; } }
		public string RuleName { get { return "EnumeratorList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratorList(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorListContext EnumeratorList() {
		return EnumeratorList(0);
	}

	private EnumeratorListContext EnumeratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		EnumeratorListContext _localctx = new EnumeratorListContext(Context, _parentState);
		EnumeratorListContext _prevctx = _localctx;
		int _startState = 178;
		EnterRecursionRule(_localctx, 178, RULE_enumeratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1440; EnumeratorDefinition();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1447;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new EnumeratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_enumeratorList);
					State = 1442;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1443; Match(Comma);
					State = 1444; EnumeratorDefinition();
					}
					} 
				}
				State = 1449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class EnumeratorDefinitionContext : ParserRuleContext {
		public EnumeratorContext enumerator() {
			return GetRuleContext<EnumeratorContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public EnumeratorDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumeratorDefinition; } }
		public string RuleName { get { return "EnumeratorDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumeratorDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumeratorDefinition(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorDefinitionContext EnumeratorDefinition() {
		EnumeratorDefinitionContext _localctx = new EnumeratorDefinitionContext(Context, State);
		EnterRule(_localctx, 180, RULE_enumeratorDefinition);
		try {
			State = 1455;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1450; Enumerator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1451; Enumerator();
				State = 1452; Match(Assign);
				State = 1453; ConstantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumeratorContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public EnumeratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumerator; } }
		public string RuleName { get { return "Enumerator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterEnumerator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitEnumerator(this);
		}
	}

	[RuleVersion(0)]
	public EnumeratorContext Enumerator() {
		EnumeratorContext _localctx = new EnumeratorContext(Context, State);
		EnterRule(_localctx, 182, RULE_enumerator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1457; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceNameContext : ParserRuleContext {
		public OriginalNamespaceNameContext originalNamespaceName() {
			return GetRuleContext<OriginalNamespaceNameContext>(0);
		}
		public NamespaceAliasContext namespaceAlias() {
			return GetRuleContext<NamespaceAliasContext>(0);
		}
		public NamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceName; } }
		public string RuleName { get { return "NamespaceName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespaceName(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceNameContext NamespaceName() {
		NamespaceNameContext _localctx = new NamespaceNameContext(Context, State);
		EnterRule(_localctx, 184, RULE_namespaceName);
		try {
			State = 1461;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1459; OriginalNamespaceName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1460; NamespaceAlias();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalNamespaceNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public OriginalNamespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalNamespaceName; } }
		public string RuleName { get { return "OriginalNamespaceName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalNamespaceName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalNamespaceName(this);
		}
	}

	[RuleVersion(0)]
	public OriginalNamespaceNameContext OriginalNamespaceName() {
		OriginalNamespaceNameContext _localctx = new OriginalNamespaceNameContext(Context, State);
		EnterRule(_localctx, 186, RULE_originalNamespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1463; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceDefinitionContext : ParserRuleContext {
		public NamedNamespaceDefinitionContext namedNamespaceDefinition() {
			return GetRuleContext<NamedNamespaceDefinitionContext>(0);
		}
		public UnnamedNamespaceDefinitionContext unnamedNamespaceDefinition() {
			return GetRuleContext<UnnamedNamespaceDefinitionContext>(0);
		}
		public NamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceDefinition; } }
		public string RuleName { get { return "NamespaceDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespaceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceDefinitionContext NamespaceDefinition() {
		NamespaceDefinitionContext _localctx = new NamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 188, RULE_namespaceDefinition);
		try {
			State = 1467;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1465; NamedNamespaceDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1466; UnnamedNamespaceDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamedNamespaceDefinitionContext : ParserRuleContext {
		public OriginalNamespaceDefinitionContext originalNamespaceDefinition() {
			return GetRuleContext<OriginalNamespaceDefinitionContext>(0);
		}
		public ExtensionNamespaceDefinitionContext extensionNamespaceDefinition() {
			return GetRuleContext<ExtensionNamespaceDefinitionContext>(0);
		}
		public NamedNamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namedNamespaceDefinition; } }
		public string RuleName { get { return "NamedNamespaceDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamedNamespaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamedNamespaceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamedNamespaceDefinitionContext NamedNamespaceDefinition() {
		NamedNamespaceDefinitionContext _localctx = new NamedNamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 190, RULE_namedNamespaceDefinition);
		try {
			State = 1471;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1469; OriginalNamespaceDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1470; ExtensionNamespaceDefinition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OriginalNamespaceDefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public OriginalNamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_originalNamespaceDefinition; } }
		public string RuleName { get { return "OriginalNamespaceDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOriginalNamespaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOriginalNamespaceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public OriginalNamespaceDefinitionContext OriginalNamespaceDefinition() {
		OriginalNamespaceDefinitionContext _localctx = new OriginalNamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 192, RULE_originalNamespaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1474;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1473; Match(Inline);
				}
			}

			State = 1476; Match(Namespace);
			State = 1477; Match(Identifier);
			State = 1478; Match(LeftBrace);
			State = 1479; NamespaceBody();
			State = 1480; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExtensionNamespaceDefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public OriginalNamespaceNameContext originalNamespaceName() {
			return GetRuleContext<OriginalNamespaceNameContext>(0);
		}
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public ExtensionNamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_extensionNamespaceDefinition; } }
		public string RuleName { get { return "ExtensionNamespaceDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExtensionNamespaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExtensionNamespaceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ExtensionNamespaceDefinitionContext ExtensionNamespaceDefinition() {
		ExtensionNamespaceDefinitionContext _localctx = new ExtensionNamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 194, RULE_extensionNamespaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1483;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1482; Match(Inline);
				}
			}

			State = 1485; Match(Namespace);
			State = 1486; OriginalNamespaceName();
			State = 1487; Match(LeftBrace);
			State = 1488; NamespaceBody();
			State = 1489; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnnamedNamespaceDefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public NamespaceBodyContext namespaceBody() {
			return GetRuleContext<NamespaceBodyContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Inline() { return GetToken(CPP14Parser.Inline, 0); }
		public UnnamedNamespaceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unnamedNamespaceDefinition; } }
		public string RuleName { get { return "UnnamedNamespaceDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUnnamedNamespaceDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUnnamedNamespaceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public UnnamedNamespaceDefinitionContext UnnamedNamespaceDefinition() {
		UnnamedNamespaceDefinitionContext _localctx = new UnnamedNamespaceDefinitionContext(Context, State);
		EnterRule(_localctx, 196, RULE_unnamedNamespaceDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1492;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Inline) {
				{
				State = 1491; Match(Inline);
				}
			}

			State = 1494; Match(Namespace);
			State = 1495; Match(LeftBrace);
			State = 1496; NamespaceBody();
			State = 1497; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceBodyContext : ParserRuleContext {
		public DeclarationSeqContext declarationSeq() {
			return GetRuleContext<DeclarationSeqContext>(0);
		}
		public NamespaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceBody; } }
		public string RuleName { get { return "NamespaceBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespaceBody(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceBodyContext NamespaceBody() {
		NamespaceBodyContext _localctx = new NamespaceBodyContext(Context, State);
		EnterRule(_localctx, 198, RULE_namespaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << DeclType) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (ThreadLocal - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 1499; DeclarationSeq(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAliasContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public NamespaceAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAlias; } }
		public string RuleName { get { return "NamespaceAlias"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespaceAlias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespaceAlias(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAliasContext NamespaceAlias() {
		NamespaceAliasContext _localctx = new NamespaceAliasContext(Context, State);
		EnterRule(_localctx, 200, RULE_namespaceAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1502; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NamespaceAliasDefinitionContext : ParserRuleContext {
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public QualifiedNamespaceSpecifierContext qualifiedNamespaceSpecifier() {
			return GetRuleContext<QualifiedNamespaceSpecifierContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public NamespaceAliasDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespaceAliasDefinition; } }
		public string RuleName { get { return "NamespaceAliasDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNamespaceAliasDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNamespaceAliasDefinition(this);
		}
	}

	[RuleVersion(0)]
	public NamespaceAliasDefinitionContext NamespaceAliasDefinition() {
		NamespaceAliasDefinitionContext _localctx = new NamespaceAliasDefinitionContext(Context, State);
		EnterRule(_localctx, 202, RULE_namespaceAliasDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1504; Match(Namespace);
			State = 1505; Match(Identifier);
			State = 1506; Match(Assign);
			State = 1507; QualifiedNamespaceSpecifier();
			State = 1508; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNamespaceSpecifierContext : ParserRuleContext {
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public QualifiedNamespaceSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNamespaceSpecifier; } }
		public string RuleName { get { return "QualifiedNamespaceSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterQualifiedNamespaceSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitQualifiedNamespaceSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNamespaceSpecifierContext QualifiedNamespaceSpecifier() {
		QualifiedNamespaceSpecifierContext _localctx = new QualifiedNamespaceSpecifierContext(Context, State);
		EnterRule(_localctx, 204, RULE_qualifiedNamespaceSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1511;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,149,Context) ) {
			case 1:
				{
				State = 1510; NestedNameSpecifier(0);
				}
				break;
			}
			State = 1513; NamespaceName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDeclarationContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public UnqualifiedIdContext unqualifiedId() {
			return GetRuleContext<UnqualifiedIdContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode TypeName() { return GetToken(CPP14Parser.TypeName, 0); }
		public ITerminalNode DoubleColon() { return GetToken(CPP14Parser.DoubleColon, 0); }
		public UsingDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDeclaration; } }
		public string RuleName { get { return "UsingDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public UsingDeclarationContext UsingDeclaration() {
		UsingDeclarationContext _localctx = new UsingDeclarationContext(Context, State);
		EnterRule(_localctx, 206, RULE_usingDeclaration);
		int _la;
		try {
			State = 1528;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,151,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1515; Match(Using);
				State = 1517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TypeName) {
					{
					State = 1516; Match(TypeName);
					}
				}

				State = 1519; NestedNameSpecifier(0);
				State = 1520; UnqualifiedId();
				State = 1521; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1523; Match(Using);
				State = 1524; Match(DoubleColon);
				State = 1525; UnqualifiedId();
				State = 1526; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingDirectiveContext : ParserRuleContext {
		public ITerminalNode Using() { return GetToken(CPP14Parser.Using, 0); }
		public ITerminalNode Namespace() { return GetToken(CPP14Parser.Namespace, 0); }
		public NamespaceNameContext namespaceName() {
			return GetRuleContext<NamespaceNameContext>(0);
		}
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public UsingDirectiveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usingDirective; } }
		public string RuleName { get { return "UsingDirective"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUsingDirective(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUsingDirective(this);
		}
	}

	[RuleVersion(0)]
	public UsingDirectiveContext UsingDirective() {
		UsingDirectiveContext _localctx = new UsingDirectiveContext(Context, State);
		EnterRule(_localctx, 208, RULE_usingDirective);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1531;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AlignAs || _la==LeftBracket) {
				{
				State = 1530; AttributeSpecifierSeq(0);
				}
			}

			State = 1533; Match(Using);
			State = 1534; Match(Namespace);
			State = 1536;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 1535; NestedNameSpecifier(0);
				}
				break;
			}
			State = 1538; NamespaceName();
			State = 1539; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsmDefinitionContext : ParserRuleContext {
		public ITerminalNode Asm() { return GetToken(CPP14Parser.Asm, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public StringLiteralsContext stringLiterals() {
			return GetRuleContext<StringLiteralsContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AsmDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asmDefinition; } }
		public string RuleName { get { return "AsmDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAsmDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAsmDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AsmDefinitionContext AsmDefinition() {
		AsmDefinitionContext _localctx = new AsmDefinitionContext(Context, State);
		EnterRule(_localctx, 210, RULE_asmDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1541; Match(Asm);
			State = 1542; Match(LeftParen);
			State = 1543; StringLiterals();
			State = 1544; Match(RightParen);
			State = 1545; Match(Semi);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinkageSpecificationContext : ParserRuleContext {
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public DeclarationSeqContext declarationSeq() {
			return GetRuleContext<DeclarationSeqContext>(0);
		}
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public LinkageSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linkageSpecification; } }
		public string RuleName { get { return "LinkageSpecification"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLinkageSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLinkageSpecification(this);
		}
	}

	[RuleVersion(0)]
	public LinkageSpecificationContext LinkageSpecification() {
		LinkageSpecificationContext _localctx = new LinkageSpecificationContext(Context, State);
		EnterRule(_localctx, 212, RULE_linkageSpecification);
		int _la;
		try {
			State = 1557;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,155,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1547; Match(Extern);
				State = 1548; Match(StringLiteral);
				State = 1549; Match(LeftBrace);
				State = 1551;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << Asm) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << DeclType) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Namespace) | (1L << Operator) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (ThreadLocal - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
					{
					State = 1550; DeclarationSeq(0);
					}
				}

				State = 1553; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1554; Match(Extern);
				State = 1555; Match(StringLiteral);
				State = 1556; Declaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeSpecifierSeqContext : ParserRuleContext {
		public AttributeSpecifierContext attributeSpecifier() {
			return GetRuleContext<AttributeSpecifierContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public AttributeSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifierSeq; } }
		public string RuleName { get { return "AttributeSpecifierSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeSpecifierSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeSpecifierSeq(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierSeqContext AttributeSpecifierSeq() {
		return AttributeSpecifierSeq(0);
	}

	private AttributeSpecifierSeqContext AttributeSpecifierSeq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributeSpecifierSeqContext _localctx = new AttributeSpecifierSeqContext(Context, _parentState);
		AttributeSpecifierSeqContext _prevctx = _localctx;
		int _startState = 214;
		EnterRecursionRule(_localctx, 214, RULE_attributeSpecifierSeq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1560; AttributeSpecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1566;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AttributeSpecifierSeqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_attributeSpecifierSeq);
					State = 1562;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1563; AttributeSpecifier();
					}
					} 
				}
				State = 1568;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeSpecifierContext : ParserRuleContext {
		public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		public AlignmentSpecifierContext alignmentSpecifier() {
			return GetRuleContext<AlignmentSpecifierContext>(0);
		}
		public AttributeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeSpecifier; } }
		public string RuleName { get { return "AttributeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public AttributeSpecifierContext AttributeSpecifier() {
		AttributeSpecifierContext _localctx = new AttributeSpecifierContext(Context, State);
		EnterRule(_localctx, 216, RULE_attributeSpecifier);
		try {
			State = 1576;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1569; Match(LeftBracket);
				State = 1570; Match(LeftBracket);
				State = 1571; AttributeList(0);
				State = 1572; Match(RightBracket);
				State = 1573; Match(RightBracket);
				}
				break;
			case AlignAs:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1575; AlignmentSpecifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlignmentSpecifierContext : ParserRuleContext {
		public ITerminalNode AlignAs() { return GetToken(CPP14Parser.AlignAs, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public AlignmentSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alignmentSpecifier; } }
		public string RuleName { get { return "AlignmentSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAlignmentSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAlignmentSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public AlignmentSpecifierContext AlignmentSpecifier() {
		AlignmentSpecifierContext _localctx = new AlignmentSpecifierContext(Context, State);
		EnterRule(_localctx, 218, RULE_alignmentSpecifier);
		int _la;
		try {
			State = 1594;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1578; Match(AlignAs);
				State = 1579; Match(LeftParen);
				State = 1580; TheTypeId();
				State = 1582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1581; Match(Ellipsis);
					}
				}

				State = 1584; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1586; Match(AlignAs);
				State = 1587; Match(LeftParen);
				State = 1588; ConstantExpression();
				State = 1590;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1589; Match(Ellipsis);
					}
				}

				State = 1592; Match(RightParen);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeListContext : ParserRuleContext {
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public AttributeListContext attributeList() {
			return GetRuleContext<AttributeListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public AttributeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeList; } }
		public string RuleName { get { return "AttributeList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeList(this);
		}
	}

	[RuleVersion(0)]
	public AttributeListContext AttributeList() {
		return AttributeList(0);
	}

	private AttributeListContext AttributeList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		AttributeListContext _localctx = new AttributeListContext(Context, _parentState);
		AttributeListContext _prevctx = _localctx;
		int _startState = 220;
		EnterRecursionRule(_localctx, 220, RULE_attributeList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 1598;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
				case 1:
					{
					State = 1597; Attribute();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 1600; Attribute();
				State = 1601; Match(Ellipsis);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1617;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1615;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
					case 1:
						{
						_localctx = new AttributeListContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributeList);
						State = 1605;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1606; Match(Comma);
						State = 1608;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
						case 1:
							{
							State = 1607; Attribute();
							}
							break;
						}
						}
						break;
					case 2:
						{
						_localctx = new AttributeListContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_attributeList);
						State = 1610;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 1611; Match(Comma);
						State = 1612; Attribute();
						State = 1613; Match(Ellipsis);
						}
						break;
					}
					} 
				}
				State = 1619;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public AttributeTokenContext attributeToken() {
			return GetRuleContext<AttributeTokenContext>(0);
		}
		public AttributeArgumentClauseContext attributeArgumentClause() {
			return GetRuleContext<AttributeArgumentClauseContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public string RuleName { get { return "Attribute"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttribute(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttribute(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext Attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 222, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1620; AttributeToken();
			State = 1622;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,166,Context) ) {
			case 1:
				{
				State = 1621; AttributeArgumentClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeTokenContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeScopedTokenContext attributeScopedToken() {
			return GetRuleContext<AttributeScopedTokenContext>(0);
		}
		public AttributeTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeToken; } }
		public string RuleName { get { return "AttributeToken"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeToken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeToken(this);
		}
	}

	[RuleVersion(0)]
	public AttributeTokenContext AttributeToken() {
		AttributeTokenContext _localctx = new AttributeTokenContext(Context, State);
		EnterRule(_localctx, 224, RULE_attributeToken);
		try {
			State = 1626;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1624; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1625; AttributeScopedToken();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeScopedTokenContext : ParserRuleContext {
		public AttributeNamespaceContext attributeNamespace() {
			return GetRuleContext<AttributeNamespaceContext>(0);
		}
		public ITerminalNode DoubleColon() { return GetToken(CPP14Parser.DoubleColon, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeScopedTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeScopedToken; } }
		public string RuleName { get { return "AttributeScopedToken"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeScopedToken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeScopedToken(this);
		}
	}

	[RuleVersion(0)]
	public AttributeScopedTokenContext AttributeScopedToken() {
		AttributeScopedTokenContext _localctx = new AttributeScopedTokenContext(Context, State);
		EnterRule(_localctx, 226, RULE_attributeScopedToken);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1628; AttributeNamespace();
			State = 1629; Match(DoubleColon);
			State = 1630; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeNamespaceContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeNamespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeNamespace; } }
		public string RuleName { get { return "AttributeNamespace"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeNamespace(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeNamespace(this);
		}
	}

	[RuleVersion(0)]
	public AttributeNamespaceContext AttributeNamespace() {
		AttributeNamespaceContext _localctx = new AttributeNamespaceContext(Context, State);
		EnterRule(_localctx, 228, RULE_attributeNamespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1632; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeArgumentClauseContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public AttributeArgumentClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attributeArgumentClause; } }
		public string RuleName { get { return "AttributeArgumentClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAttributeArgumentClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAttributeArgumentClause(this);
		}
	}

	[RuleVersion(0)]
	public AttributeArgumentClauseContext AttributeArgumentClause() {
		AttributeArgumentClauseContext _localctx = new AttributeArgumentClauseContext(Context, State);
		EnterRule(_localctx, 230, RULE_attributeArgumentClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1634; Match(LeftParen);
			State = 1635; BalancedTokenSeq(0);
			State = 1636; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BalancedTokenSeqContext : ParserRuleContext {
		public BalancedTokenContext balancedToken() {
			return GetRuleContext<BalancedTokenContext>(0);
		}
		public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		public BalancedTokenSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedTokenSeq; } }
		public string RuleName { get { return "BalancedTokenSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedTokenSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedTokenSeq(this);
		}
	}

	[RuleVersion(0)]
	public BalancedTokenSeqContext BalancedTokenSeq() {
		return BalancedTokenSeq(0);
	}

	private BalancedTokenSeqContext BalancedTokenSeq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BalancedTokenSeqContext _localctx = new BalancedTokenSeqContext(Context, _parentState);
		BalancedTokenSeqContext _prevctx = _localctx;
		int _startState = 232;
		EnterRecursionRule(_localctx, 232, RULE_balancedTokenSeq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1640;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 1639; BalancedToken();
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1646;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BalancedTokenSeqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_balancedTokenSeq);
					State = 1642;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1643; BalancedToken();
					}
					} 
				}
				State = 1648;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,169,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BalancedTokenContext : ParserRuleContext {
		public ITerminalNode[] LeftParen() { return GetTokens(CPP14Parser.LeftParen); }
		public ITerminalNode LeftParen(int i) {
			return GetToken(CPP14Parser.LeftParen, i);
		}
		public BalancedTokenSeqContext balancedTokenSeq() {
			return GetRuleContext<BalancedTokenSeqContext>(0);
		}
		public ITerminalNode[] RightParen() { return GetTokens(CPP14Parser.RightParen); }
		public ITerminalNode RightParen(int i) {
			return GetToken(CPP14Parser.RightParen, i);
		}
		public ITerminalNode[] LeftBracket() { return GetTokens(CPP14Parser.LeftBracket); }
		public ITerminalNode LeftBracket(int i) {
			return GetToken(CPP14Parser.LeftBracket, i);
		}
		public ITerminalNode[] RightBracket() { return GetTokens(CPP14Parser.RightBracket); }
		public ITerminalNode RightBracket(int i) {
			return GetToken(CPP14Parser.RightBracket, i);
		}
		public ITerminalNode[] LeftBrace() { return GetTokens(CPP14Parser.LeftBrace); }
		public ITerminalNode LeftBrace(int i) {
			return GetToken(CPP14Parser.LeftBrace, i);
		}
		public ITerminalNode[] RightBrace() { return GetTokens(CPP14Parser.RightBrace); }
		public ITerminalNode RightBrace(int i) {
			return GetToken(CPP14Parser.RightBrace, i);
		}
		public BalancedTokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_balancedToken; } }
		public string RuleName { get { return "BalancedToken"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBalancedToken(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBalancedToken(this);
		}
	}

	[RuleVersion(0)]
	public BalancedTokenContext BalancedToken() {
		BalancedTokenContext _localctx = new BalancedTokenContext(Context, State);
		EnterRule(_localctx, 234, RULE_balancedToken);
		int _la;
		try {
			int _alt;
			State = 1666;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1649; Match(LeftParen);
				State = 1650; BalancedTokenSeq(0);
				State = 1651; Match(RightParen);
				}
				break;
			case LeftBracket:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1653; Match(LeftBracket);
				State = 1654; BalancedTokenSeq(0);
				State = 1655; Match(RightBracket);
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1657; Match(LeftBrace);
				State = 1658; BalancedTokenSeq(0);
				State = 1659; Match(RightBrace);
				}
				break;
			case T__0:
			case T__1:
			case T__2:
			case T__3:
			case T__4:
			case T__5:
			case MultiLineMacro:
			case Directive:
			case AlignAs:
			case AlignOf:
			case Asm:
			case Auto:
			case Bool:
			case Break:
			case Case:
			case Catch:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case ConstCast:
			case Continue:
			case DeclType:
			case Default:
			case Delete:
			case Do:
			case Double:
			case DynamicCast:
			case Else:
			case Enum:
			case Explicit:
			case Export:
			case Extern:
			case False:
			case Final:
			case Float:
			case For:
			case Friend:
			case Goto:
			case If:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Namespace:
			case New:
			case NoExcept:
			case NullPtr:
			case Null:
			case Operator:
			case Override:
			case Private:
			case Protected:
			case Public:
			case Register:
			case ReinterpretCast:
			case Return:
			case Short:
			case Signed:
			case SizeOf:
			case Static:
			case StaticAssert:
			case StaticCast:
			case Struct:
			case Switch:
			case Template:
			case This:
			case ThreadLocal:
			case Throw:
			case True:
			case Try:
			case TypeDef:
			case TypeId:
			case TypeName:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case While:
			case Plus:
			case Minus:
			case Star:
			case Div:
			case Mod:
			case Caret:
			case And:
			case Or:
			case Tilde:
			case Not:
			case Assign:
			case Less:
			case Greater:
			case PlusAssign:
			case MinusAssign:
			case StarAssign:
			case DivAssign:
			case ModAssign:
			case XorAssign:
			case AndAssign:
			case OrAssign:
			case LeftShift:
			case LeftShiftAssign:
			case Equal:
			case NotEqual:
			case LessEqual:
			case GreaterEqual:
			case AndAnd:
			case OrOr:
			case PlusPlus:
			case MinusMinus:
			case Comma:
			case ArrowStar:
			case Arrow:
			case Question:
			case Colon:
			case DoubleColon:
			case Semi:
			case Dot:
			case DotStar:
			case Ellipsis:
			case Identifier:
			case IntegerLiteral:
			case DecimalLiteral:
			case OctalLiteral:
			case HexadecimalLiteral:
			case BinaryLiteral:
			case IntegerSuffix:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
			case WhiteSpace:
			case NewLine:
			case BlockComment:
			case LineComment:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1662;
				ErrorHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 1661;
						_la = TokenStream.LA(1);
						if ( _la <= 0 || (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (RightParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (RightBracket - 85)) | (1L << (LeftBrace - 85)) | (1L << (RightBrace - 85)))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 1664;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,170,Context);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitDeclaratorListContext : ParserRuleContext {
		public InitDeclaratorContext initDeclarator() {
			return GetRuleContext<InitDeclaratorContext>(0);
		}
		public InitDeclaratorListContext initDeclaratorList() {
			return GetRuleContext<InitDeclaratorListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public InitDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclaratorList; } }
		public string RuleName { get { return "InitDeclaratorList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorListContext InitDeclaratorList() {
		return InitDeclaratorList(0);
	}

	private InitDeclaratorListContext InitDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitDeclaratorListContext _localctx = new InitDeclaratorListContext(Context, _parentState);
		InitDeclaratorListContext _prevctx = _localctx;
		int _startState = 236;
		EnterRecursionRule(_localctx, 236, RULE_initDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1669; InitDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1676;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initDeclaratorList);
					State = 1671;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1672; Match(Comma);
					State = 1673; InitDeclarator();
					}
					} 
				}
				State = 1678;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,172,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class InitDeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public InitializerContext initializer() {
			return GetRuleContext<InitializerContext>(0);
		}
		public InitDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initDeclarator; } }
		public string RuleName { get { return "InitDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public InitDeclaratorContext InitDeclarator() {
		InitDeclaratorContext _localctx = new InitDeclaratorContext(Context, State);
		EnterRule(_localctx, 238, RULE_initDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1679; Declarator();
			State = 1681;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,173,Context) ) {
			case 1:
				{
				State = 1680; Initializer();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorContext : ParserRuleContext {
		public PtrDeclaratorContext ptrDeclarator() {
			return GetRuleContext<PtrDeclaratorContext>(0);
		}
		public NoPtrDeclaratorContext noPtrDeclarator() {
			return GetRuleContext<NoPtrDeclaratorContext>(0);
		}
		public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public DeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declarator; } }
		public string RuleName { get { return "Declarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorContext Declarator() {
		DeclaratorContext _localctx = new DeclaratorContext(Context, State);
		EnterRule(_localctx, 240, RULE_declarator);
		try {
			State = 1688;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1683; PtrDeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1684; NoPtrDeclarator(0);
				State = 1685; ParametersAndQualifiers();
				State = 1686; TrailingReturnType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrDeclaratorContext : ParserRuleContext {
		public NoPtrDeclaratorContext noPtrDeclarator() {
			return GetRuleContext<NoPtrDeclaratorContext>(0);
		}
		public PtrOperatorContext ptrOperator() {
			return GetRuleContext<PtrOperatorContext>(0);
		}
		public PtrDeclaratorContext ptrDeclarator() {
			return GetRuleContext<PtrDeclaratorContext>(0);
		}
		public PtrDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrDeclarator; } }
		public string RuleName { get { return "PtrDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public PtrDeclaratorContext PtrDeclarator() {
		PtrDeclaratorContext _localctx = new PtrDeclaratorContext(Context, State);
		EnterRule(_localctx, 242, RULE_ptrDeclarator);
		try {
			State = 1694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,175,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1690; NoPtrDeclarator(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1691; PtrOperator();
				State = 1692; PtrDeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPtrDeclaratorContext : ParserRuleContext {
		public DeclaratorIdContext declaratorId() {
			return GetRuleContext<DeclaratorIdContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public PtrDeclaratorContext ptrDeclarator() {
			return GetRuleContext<PtrDeclaratorContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoPtrDeclaratorContext noPtrDeclarator() {
			return GetRuleContext<NoPtrDeclaratorContext>(0);
		}
		public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public NoPtrDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPtrDeclarator; } }
		public string RuleName { get { return "NoPtrDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoPtrDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoPtrDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoPtrDeclaratorContext NoPtrDeclarator() {
		return NoPtrDeclarator(0);
	}

	private NoPtrDeclaratorContext NoPtrDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPtrDeclaratorContext _localctx = new NoPtrDeclaratorContext(Context, _parentState);
		NoPtrDeclaratorContext _prevctx = _localctx;
		int _startState = 244;
		EnterRecursionRule(_localctx, 244, RULE_noPtrDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1705;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DeclType:
			case Operator:
			case Tilde:
			case DoubleColon:
			case Ellipsis:
			case Identifier:
				{
				State = 1697; DeclaratorId();
				State = 1699;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,176,Context) ) {
				case 1:
					{
					State = 1698; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case LeftParen:
				{
				State = 1701; Match(LeftParen);
				State = 1702; PtrDeclarator();
				State = 1703; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1720;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1718;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
					case 1:
						{
						_localctx = new NoPtrDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noPtrDeclarator);
						State = 1707;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1708; ParametersAndQualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoPtrDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noPtrDeclarator);
						State = 1709;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1710; Match(LeftBracket);
						State = 1712;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
							{
							State = 1711; ConstantExpression();
							}
						}

						State = 1714; Match(RightBracket);
						State = 1716;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
						case 1:
							{
							State = 1715; AttributeSpecifierSeq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1722;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,181,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParametersAndQualifiersContext : ParserRuleContext {
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ParameterDeclarationClauseContext parameterDeclarationClause() {
			return GetRuleContext<ParameterDeclarationClauseContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public CvQualifierSeqContext cvQualifierSeq() {
			return GetRuleContext<CvQualifierSeqContext>(0);
		}
		public RefQualifierContext refQualifier() {
			return GetRuleContext<RefQualifierContext>(0);
		}
		public ExceptionSpecificationContext exceptionSpecification() {
			return GetRuleContext<ExceptionSpecificationContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ParametersAndQualifiersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parametersAndQualifiers; } }
		public string RuleName { get { return "ParametersAndQualifiers"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParametersAndQualifiers(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParametersAndQualifiers(this);
		}
	}

	[RuleVersion(0)]
	public ParametersAndQualifiersContext ParametersAndQualifiers() {
		ParametersAndQualifiersContext _localctx = new ParametersAndQualifiersContext(Context, State);
		EnterRule(_localctx, 246, RULE_parametersAndQualifiers);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1723; Match(LeftParen);
			State = 1724; ParameterDeclarationClause();
			State = 1725; Match(RightParen);
			State = 1727;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 1726; CvQualifierSeq();
				}
				break;
			}
			State = 1730;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,183,Context) ) {
			case 1:
				{
				State = 1729; RefQualifier();
				}
				break;
			}
			State = 1733;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,184,Context) ) {
			case 1:
				{
				State = 1732; ExceptionSpecification();
				}
				break;
			}
			State = 1736;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,185,Context) ) {
			case 1:
				{
				State = 1735; AttributeSpecifierSeq(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrailingReturnTypeContext : ParserRuleContext {
		public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		public TrailingTypeSpecifierSeqContext trailingTypeSpecifierSeq() {
			return GetRuleContext<TrailingTypeSpecifierSeqContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TrailingReturnTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trailingReturnType; } }
		public string RuleName { get { return "TrailingReturnType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTrailingReturnType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTrailingReturnType(this);
		}
	}

	[RuleVersion(0)]
	public TrailingReturnTypeContext TrailingReturnType() {
		TrailingReturnTypeContext _localctx = new TrailingReturnTypeContext(Context, State);
		EnterRule(_localctx, 248, RULE_trailingReturnType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1738; Match(Arrow);
			State = 1739; TrailingTypeSpecifierSeq();
			State = 1741;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,186,Context) ) {
			case 1:
				{
				State = 1740; AbstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrOperatorContext : ParserRuleContext {
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public CvQualifierSeqContext cvQualifierSeq() {
			return GetRuleContext<CvQualifierSeqContext>(0);
		}
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public PtrOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrOperator; } }
		public string RuleName { get { return "PtrOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrOperator(this);
		}
	}

	[RuleVersion(0)]
	public PtrOperatorContext PtrOperator() {
		PtrOperatorContext _localctx = new PtrOperatorContext(Context, State);
		EnterRule(_localctx, 250, RULE_ptrOperator);
		try {
			State = 1766;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Star:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1743; Match(Star);
				State = 1745;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,187,Context) ) {
				case 1:
					{
					State = 1744; AttributeSpecifierSeq(0);
					}
					break;
				}
				State = 1748;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
				case 1:
					{
					State = 1747; CvQualifierSeq();
					}
					break;
				}
				}
				break;
			case And:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1750; Match(And);
				State = 1752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,189,Context) ) {
				case 1:
					{
					State = 1751; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1754; Match(T__2);
				State = 1756;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 1755; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case DeclType:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1758; NestedNameSpecifier(0);
				State = 1759; Match(Star);
				State = 1761;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,191,Context) ) {
				case 1:
					{
					State = 1760; AttributeSpecifierSeq(0);
					}
					break;
				}
				State = 1764;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,192,Context) ) {
				case 1:
					{
					State = 1763; CvQualifierSeq();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvQualifierSeqContext : ParserRuleContext {
		public CvQualifierContext cvQualifier() {
			return GetRuleContext<CvQualifierContext>(0);
		}
		public CvQualifierSeqContext cvQualifierSeq() {
			return GetRuleContext<CvQualifierSeqContext>(0);
		}
		public CvQualifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvQualifierSeq; } }
		public string RuleName { get { return "CvQualifierSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvQualifierSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvQualifierSeq(this);
		}
	}

	[RuleVersion(0)]
	public CvQualifierSeqContext CvQualifierSeq() {
		CvQualifierSeqContext _localctx = new CvQualifierSeqContext(Context, State);
		EnterRule(_localctx, 252, RULE_cvQualifierSeq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1768; CvQualifier();
			State = 1770;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 1769; CvQualifierSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CvQualifierContext : ParserRuleContext {
		public ITerminalNode Const() { return GetToken(CPP14Parser.Const, 0); }
		public ITerminalNode Volatile() { return GetToken(CPP14Parser.Volatile, 0); }
		public CvQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cvQualifier; } }
		public string RuleName { get { return "CvQualifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCvQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCvQualifier(this);
		}
	}

	[RuleVersion(0)]
	public CvQualifierContext CvQualifier() {
		CvQualifierContext _localctx = new CvQualifierContext(Context, State);
		EnterRule(_localctx, 254, RULE_cvQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1772;
			_la = TokenStream.LA(1);
			if ( !(_la==Const || _la==Volatile) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RefQualifierContext : ParserRuleContext {
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public RefQualifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_refQualifier; } }
		public string RuleName { get { return "RefQualifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRefQualifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRefQualifier(this);
		}
	}

	[RuleVersion(0)]
	public RefQualifierContext RefQualifier() {
		RefQualifierContext _localctx = new RefQualifierContext(Context, State);
		EnterRule(_localctx, 256, RULE_refQualifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1774;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==And) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclaratorIdContext : ParserRuleContext {
		public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public DeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaratorId; } }
		public string RuleName { get { return "DeclaratorId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public DeclaratorIdContext DeclaratorId() {
		DeclaratorIdContext _localctx = new DeclaratorIdContext(Context, State);
		EnterRule(_localctx, 258, RULE_declaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1777;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Ellipsis) {
				{
				State = 1776; Match(Ellipsis);
				}
			}

			State = 1779; IdExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheTypeIdContext : ParserRuleContext {
		public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public TheTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theTypeId; } }
		public string RuleName { get { return "TheTypeId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTheTypeId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTheTypeId(this);
		}
	}

	[RuleVersion(0)]
	public TheTypeIdContext TheTypeId() {
		TheTypeIdContext _localctx = new TheTypeIdContext(Context, State);
		EnterRule(_localctx, 260, RULE_theTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1781; TypeSpecifierSeq();
			State = 1783;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 1782; AbstractDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbstractDeclaratorContext : ParserRuleContext {
		public PtrAbstractDeclaratorContext ptrAbstractDeclarator() {
			return GetRuleContext<PtrAbstractDeclaratorContext>(0);
		}
		public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		public TrailingReturnTypeContext trailingReturnType() {
			return GetRuleContext<TrailingReturnTypeContext>(0);
		}
		public NoPtrAbstractDeclaratorContext noPtrAbstractDeclarator() {
			return GetRuleContext<NoPtrAbstractDeclaratorContext>(0);
		}
		public AbstractPackDeclaratorContext abstractPackDeclarator() {
			return GetRuleContext<AbstractPackDeclaratorContext>(0);
		}
		public AbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractDeclarator; } }
		public string RuleName { get { return "AbstractDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractDeclaratorContext AbstractDeclarator() {
		AbstractDeclaratorContext _localctx = new AbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 262, RULE_abstractDeclarator);
		try {
			State = 1793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1785; PtrAbstractDeclarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1787;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
				case 1:
					{
					State = 1786; NoPtrAbstractDeclarator(0);
					}
					break;
				}
				State = 1789; ParametersAndQualifiers();
				State = 1790; TrailingReturnType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1792; AbstractPackDeclarator();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PtrAbstractDeclaratorContext : ParserRuleContext {
		public NoPtrAbstractDeclaratorContext noPtrAbstractDeclarator() {
			return GetRuleContext<NoPtrAbstractDeclaratorContext>(0);
		}
		public PtrOperatorContext ptrOperator() {
			return GetRuleContext<PtrOperatorContext>(0);
		}
		public PtrAbstractDeclaratorContext ptrAbstractDeclarator() {
			return GetRuleContext<PtrAbstractDeclaratorContext>(0);
		}
		public PtrAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ptrAbstractDeclarator; } }
		public string RuleName { get { return "PtrAbstractDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPtrAbstractDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPtrAbstractDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public PtrAbstractDeclaratorContext PtrAbstractDeclarator() {
		PtrAbstractDeclaratorContext _localctx = new PtrAbstractDeclaratorContext(Context, State);
		EnterRule(_localctx, 264, RULE_ptrAbstractDeclarator);
		try {
			State = 1800;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftParen:
			case LeftBracket:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1795; NoPtrAbstractDeclarator(0);
				}
				break;
			case T__2:
			case DeclType:
			case Star:
			case And:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1796; PtrOperator();
				State = 1798;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,199,Context) ) {
				case 1:
					{
					State = 1797; PtrAbstractDeclarator();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPtrAbstractDeclaratorContext : ParserRuleContext {
		public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public PtrAbstractDeclaratorContext ptrAbstractDeclarator() {
			return GetRuleContext<PtrAbstractDeclaratorContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoPtrAbstractDeclaratorContext noPtrAbstractDeclarator() {
			return GetRuleContext<NoPtrAbstractDeclaratorContext>(0);
		}
		public NoPtrAbstractDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPtrAbstractDeclarator; } }
		public string RuleName { get { return "NoPtrAbstractDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoPtrAbstractDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoPtrAbstractDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoPtrAbstractDeclaratorContext NoPtrAbstractDeclarator() {
		return NoPtrAbstractDeclarator(0);
	}

	private NoPtrAbstractDeclaratorContext NoPtrAbstractDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPtrAbstractDeclaratorContext _localctx = new NoPtrAbstractDeclaratorContext(Context, _parentState);
		NoPtrAbstractDeclaratorContext _prevctx = _localctx;
		int _startState = 266;
		EnterRecursionRule(_localctx, 266, RULE_noPtrAbstractDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1816;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,203,Context) ) {
			case 1:
				{
				State = 1803; ParametersAndQualifiers();
				}
				break;
			case 2:
				{
				State = 1804; Match(LeftBracket);
				State = 1806;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 1805; ConstantExpression();
					}
				}

				State = 1808; Match(RightBracket);
				State = 1810;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,202,Context) ) {
				case 1:
					{
					State = 1809; AttributeSpecifierSeq(0);
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 1812; Match(LeftParen);
				State = 1813; PtrAbstractDeclarator();
				State = 1814; Match(RightParen);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1831;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1829;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,206,Context) ) {
					case 1:
						{
						_localctx = new NoPtrAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noPtrAbstractDeclarator);
						State = 1818;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1819; ParametersAndQualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoPtrAbstractDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noPtrAbstractDeclarator);
						State = 1820;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1821; Match(LeftBracket);
						State = 1823;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
							{
							State = 1822; ConstantExpression();
							}
						}

						State = 1825; Match(RightBracket);
						State = 1827;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
						case 1:
							{
							State = 1826; AttributeSpecifierSeq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1833;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,207,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AbstractPackDeclaratorContext : ParserRuleContext {
		public NoPtrAbstractPackDeclaratorContext noPtrAbstractPackDeclarator() {
			return GetRuleContext<NoPtrAbstractPackDeclaratorContext>(0);
		}
		public PtrOperatorContext ptrOperator() {
			return GetRuleContext<PtrOperatorContext>(0);
		}
		public AbstractPackDeclaratorContext abstractPackDeclarator() {
			return GetRuleContext<AbstractPackDeclaratorContext>(0);
		}
		public AbstractPackDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abstractPackDeclarator; } }
		public string RuleName { get { return "AbstractPackDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAbstractPackDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAbstractPackDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public AbstractPackDeclaratorContext AbstractPackDeclarator() {
		AbstractPackDeclaratorContext _localctx = new AbstractPackDeclaratorContext(Context, State);
		EnterRule(_localctx, 268, RULE_abstractPackDeclarator);
		try {
			State = 1838;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Ellipsis:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1834; NoPtrAbstractPackDeclarator(0);
				}
				break;
			case T__2:
			case DeclType:
			case Star:
			case And:
			case DoubleColon:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1835; PtrOperator();
				State = 1836; AbstractPackDeclarator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoPtrAbstractPackDeclaratorContext : ParserRuleContext {
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public NoPtrAbstractPackDeclaratorContext noPtrAbstractPackDeclarator() {
			return GetRuleContext<NoPtrAbstractPackDeclaratorContext>(0);
		}
		public ParametersAndQualifiersContext parametersAndQualifiers() {
			return GetRuleContext<ParametersAndQualifiersContext>(0);
		}
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public NoPtrAbstractPackDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noPtrAbstractPackDeclarator; } }
		public string RuleName { get { return "NoPtrAbstractPackDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoPtrAbstractPackDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoPtrAbstractPackDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public NoPtrAbstractPackDeclaratorContext NoPtrAbstractPackDeclarator() {
		return NoPtrAbstractPackDeclarator(0);
	}

	private NoPtrAbstractPackDeclaratorContext NoPtrAbstractPackDeclarator(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		NoPtrAbstractPackDeclaratorContext _localctx = new NoPtrAbstractPackDeclaratorContext(Context, _parentState);
		NoPtrAbstractPackDeclaratorContext _prevctx = _localctx;
		int _startState = 270;
		EnterRecursionRule(_localctx, 270, RULE_noPtrAbstractPackDeclarator, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1841; Match(Ellipsis);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1856;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1854;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,211,Context) ) {
					case 1:
						{
						_localctx = new NoPtrAbstractPackDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noPtrAbstractPackDeclarator);
						State = 1843;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1844; ParametersAndQualifiers();
						}
						break;
					case 2:
						{
						_localctx = new NoPtrAbstractPackDeclaratorContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_noPtrAbstractPackDeclarator);
						State = 1845;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 1846; Match(LeftBracket);
						State = 1848;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
							{
							State = 1847; ConstantExpression();
							}
						}

						State = 1850; Match(RightBracket);
						State = 1852;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,210,Context) ) {
						case 1:
							{
							State = 1851; AttributeSpecifierSeq(0);
							}
							break;
						}
						}
						break;
					}
					} 
				}
				State = 1858;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,212,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationClauseContext : ParserRuleContext {
		public ParameterDeclarationListContext parameterDeclarationList() {
			return GetRuleContext<ParameterDeclarationListContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterDeclarationClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationClause; } }
		public string RuleName { get { return "ParameterDeclarationClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterDeclarationClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterDeclarationClause(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationClauseContext ParameterDeclarationClause() {
		ParameterDeclarationClauseContext _localctx = new ParameterDeclarationClauseContext(Context, State);
		EnterRule(_localctx, 272, RULE_parameterDeclarationClause);
		int _la;
		try {
			State = 1869;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1860;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 9)) & ~0x3f) == 0 && ((1L << (_la - 9)) & ((1L << (AlignAs - 9)) | (1L << (Auto - 9)) | (1L << (Bool - 9)) | (1L << (Char - 9)) | (1L << (Char16 - 9)) | (1L << (Char32 - 9)) | (1L << (Class - 9)) | (1L << (Const - 9)) | (1L << (Constexpr - 9)) | (1L << (DeclType - 9)) | (1L << (Double - 9)) | (1L << (Enum - 9)) | (1L << (Explicit - 9)) | (1L << (Extern - 9)) | (1L << (Float - 9)) | (1L << (Friend - 9)) | (1L << (Inline - 9)) | (1L << (Int - 9)) | (1L << (Long - 9)) | (1L << (Mutable - 9)) | (1L << (Register - 9)) | (1L << (Short - 9)) | (1L << (Signed - 9)) | (1L << (Static - 9)) | (1L << (Struct - 9)) | (1L << (ThreadLocal - 9)))) != 0) || ((((_la - 74)) & ~0x3f) == 0 && ((1L << (_la - 74)) & ((1L << (TypeDef - 74)) | (1L << (TypeName - 74)) | (1L << (Union - 74)) | (1L << (Unsigned - 74)) | (1L << (Virtual - 74)) | (1L << (Void - 74)) | (1L << (Volatile - 74)) | (1L << (Wchar - 74)) | (1L << (LeftBracket - 74)) | (1L << (DoubleColon - 74)) | (1L << (Identifier - 74)))) != 0)) {
					{
					State = 1859; ParameterDeclarationList(0);
					}
				}

				State = 1863;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 1862; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1865; ParameterDeclarationList(0);
				State = 1866; Match(Comma);
				State = 1867; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterDeclarationListContext : ParserRuleContext {
		public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public ParameterDeclarationListContext parameterDeclarationList() {
			return GetRuleContext<ParameterDeclarationListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ParameterDeclarationListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclarationList; } }
		public string RuleName { get { return "ParameterDeclarationList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterDeclarationList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterDeclarationList(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationListContext ParameterDeclarationList() {
		return ParameterDeclarationList(0);
	}

	private ParameterDeclarationListContext ParameterDeclarationList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ParameterDeclarationListContext _localctx = new ParameterDeclarationListContext(Context, _parentState);
		ParameterDeclarationListContext _prevctx = _localctx;
		int _startState = 274;
		EnterRecursionRule(_localctx, 274, RULE_parameterDeclarationList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1872; ParameterDeclaration();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1879;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new ParameterDeclarationListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_parameterDeclarationList);
					State = 1874;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1875; Match(Comma);
					State = 1876; ParameterDeclaration();
					}
					} 
				}
				State = 1881;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,216,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ParameterDeclarationContext : ParserRuleContext {
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ParameterDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterDeclaration; } }
		public string RuleName { get { return "ParameterDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterParameterDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitParameterDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ParameterDeclarationContext ParameterDeclaration() {
		ParameterDeclarationContext _localctx = new ParameterDeclarationContext(Context, State);
		EnterRule(_localctx, 276, RULE_parameterDeclaration);
		int _la;
		try {
			State = 1913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,223,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1883;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1882; AttributeSpecifierSeq(0);
					}
				}

				State = 1885; DeclSpecifierSeq();
				State = 1886; Declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1889;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1888; AttributeSpecifierSeq(0);
					}
				}

				State = 1891; DeclSpecifierSeq();
				State = 1892; Declarator();
				State = 1893; Match(Assign);
				State = 1894; InitializerClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1897;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1896; AttributeSpecifierSeq(0);
					}
				}

				State = 1899; DeclSpecifierSeq();
				State = 1901;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 1900; AbstractDeclarator();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1904;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1903; AttributeSpecifierSeq(0);
					}
				}

				State = 1906; DeclSpecifierSeq();
				State = 1908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || _la==DeclType || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (DoubleColon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 1907; AbstractDeclarator();
					}
				}

				State = 1910; Match(Assign);
				State = 1911; InitializerClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDefinitionContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public FunctionBodyContext functionBody() {
			return GetRuleContext<FunctionBodyContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public VirtSpecifierSeqContext virtSpecifierSeq() {
			return GetRuleContext<VirtSpecifierSeqContext>(0);
		}
		public FunctionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDefinition; } }
		public string RuleName { get { return "FunctionDefinition"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionDefinition(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDefinitionContext FunctionDefinition() {
		FunctionDefinitionContext _localctx = new FunctionDefinitionContext(Context, State);
		EnterRule(_localctx, 278, RULE_functionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1916;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AlignAs || _la==LeftBracket) {
				{
				State = 1915; AttributeSpecifierSeq(0);
				}
			}

			State = 1919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
			case 1:
				{
				State = 1918; DeclSpecifierSeq();
				}
				break;
			}
			State = 1921; Declarator();
			State = 1923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Final || _la==Override) {
				{
				State = 1922; VirtSpecifierSeq(0);
				}
			}

			State = 1925; FunctionBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionBodyContext : ParserRuleContext {
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public CtorInitializerContext ctorInitializer() {
			return GetRuleContext<CtorInitializerContext>(0);
		}
		public FunctionTryBlockContext functionTryBlock() {
			return GetRuleContext<FunctionTryBlockContext>(0);
		}
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Default() { return GetToken(CPP14Parser.Default, 0); }
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public FunctionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionBody; } }
		public string RuleName { get { return "FunctionBody"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionBody(this);
		}
	}

	[RuleVersion(0)]
	public FunctionBodyContext FunctionBody() {
		FunctionBodyContext _localctx = new FunctionBodyContext(Context, State);
		EnterRule(_localctx, 280, RULE_functionBody);
		int _la;
		try {
			State = 1938;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,228,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 1927; CtorInitializer();
					}
				}

				State = 1930; CompoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1931; FunctionTryBlock();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1932; Match(Assign);
				State = 1933; Match(Default);
				State = 1934; Match(Semi);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1935; Match(Assign);
				State = 1936; Match(Delete);
				State = 1937; Match(Semi);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerContext : ParserRuleContext {
		public BraceOrEqualInitializerContext braceOrEqualInitializer() {
			return GetRuleContext<BraceOrEqualInitializerContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public InitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializer; } }
		public string RuleName { get { return "Initializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializer(this);
		}
	}

	[RuleVersion(0)]
	public InitializerContext Initializer() {
		InitializerContext _localctx = new InitializerContext(Context, State);
		EnterRule(_localctx, 282, RULE_initializer);
		try {
			State = 1945;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LeftBrace:
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1940; BraceOrEqualInitializer();
				}
				break;
			case LeftParen:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1941; Match(LeftParen);
				State = 1942; ExpressionList();
				State = 1943; Match(RightParen);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BraceOrEqualInitializerContext : ParserRuleContext {
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public BraceOrEqualInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_braceOrEqualInitializer; } }
		public string RuleName { get { return "BraceOrEqualInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBraceOrEqualInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBraceOrEqualInitializer(this);
		}
	}

	[RuleVersion(0)]
	public BraceOrEqualInitializerContext BraceOrEqualInitializer() {
		BraceOrEqualInitializerContext _localctx = new BraceOrEqualInitializerContext(Context, State);
		EnterRule(_localctx, 284, RULE_braceOrEqualInitializer);
		try {
			State = 1950;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Assign:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1947; Match(Assign);
				State = 1948; InitializerClause();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1949; BracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerClauseContext : ParserRuleContext {
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public InitializerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerClause; } }
		public string RuleName { get { return "InitializerClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerClause(this);
		}
	}

	[RuleVersion(0)]
	public InitializerClauseContext InitializerClause() {
		InitializerClauseContext _localctx = new InitializerClauseContext(Context, State);
		EnterRule(_localctx, 286, RULE_initializerClause);
		try {
			State = 1954;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case T__1:
			case AlignOf:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case ConstCast:
			case DeclType:
			case Delete:
			case Double:
			case DynamicCast:
			case False:
			case Float:
			case Int:
			case Long:
			case New:
			case NoExcept:
			case NullPtr:
			case Null:
			case Operator:
			case ReinterpretCast:
			case Short:
			case Signed:
			case SizeOf:
			case StaticCast:
			case This:
			case Throw:
			case True:
			case TypeId:
			case TypeName:
			case Unsigned:
			case Void:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Plus:
			case Minus:
			case Star:
			case And:
			case Or:
			case Tilde:
			case PlusPlus:
			case MinusMinus:
			case DoubleColon:
			case Identifier:
			case IntegerLiteral:
			case CharacterLiteral:
			case FloatingLiteral:
			case StringLiteral:
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1952; AssignmentExpression();
				}
				break;
			case LeftBrace:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1953; BracedInitList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitializerListContext : ParserRuleContext {
		public InitializerClauseContext initializerClause() {
			return GetRuleContext<InitializerClauseContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public InitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initializerList; } }
		public string RuleName { get { return "InitializerList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public InitializerListContext InitializerList() {
		return InitializerList(0);
	}

	private InitializerListContext InitializerList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InitializerListContext _localctx = new InitializerListContext(Context, _parentState);
		InitializerListContext _prevctx = _localctx;
		int _startState = 288;
		EnterRecursionRule(_localctx, 288, RULE_initializerList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 1957; InitializerClause();
			State = 1959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 1958; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1969;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InitializerListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_initializerList);
					State = 1961;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 1962; Match(Comma);
					State = 1963; InitializerClause();
					State = 1965;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
					case 1:
						{
						State = 1964; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 1971;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,234,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BracedInitListContext : ParserRuleContext {
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public InitializerListContext initializerList() {
			return GetRuleContext<InitializerListContext>(0);
		}
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BracedInitListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bracedInitList; } }
		public string RuleName { get { return "BracedInitList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBracedInitList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBracedInitList(this);
		}
	}

	[RuleVersion(0)]
	public BracedInitListContext BracedInitList() {
		BracedInitListContext _localctx = new BracedInitListContext(Context, State);
		EnterRule(_localctx, 290, RULE_bracedInitList);
		int _la;
		try {
			State = 1981;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,236,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1972; Match(LeftBrace);
				State = 1973; InitializerList(0);
				State = 1975;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Comma) {
					{
					State = 1974; Match(Comma);
					}
				}

				State = 1977; Match(RightBrace);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1979; Match(LeftBrace);
				State = 1980; Match(RightBrace);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ClassNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_className; } }
		public string RuleName { get { return "ClassName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassName(this);
		}
	}

	[RuleVersion(0)]
	public ClassNameContext ClassName() {
		ClassNameContext _localctx = new ClassNameContext(Context, State);
		EnterRule(_localctx, 292, RULE_className);
		try {
			State = 1985;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1983; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1984; SimpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassSpecifierContext : ParserRuleContext {
		public ClassHeadContext classHead() {
			return GetRuleContext<ClassHeadContext>(0);
		}
		public ITerminalNode LeftBrace() { return GetToken(CPP14Parser.LeftBrace, 0); }
		public ITerminalNode RightBrace() { return GetToken(CPP14Parser.RightBrace, 0); }
		public MemberSpecificationContext memberSpecification() {
			return GetRuleContext<MemberSpecificationContext>(0);
		}
		public ClassSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classSpecifier; } }
		public string RuleName { get { return "ClassSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassSpecifierContext ClassSpecifier() {
		ClassSpecifierContext _localctx = new ClassSpecifierContext(Context, State);
		EnterRule(_localctx, 294, RULE_classSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1987; ClassHead();
			State = 1988; Match(LeftBrace);
			State = 1990;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << DeclType) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (ThreadLocal - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (Colon - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
				{
				State = 1989; MemberSpecification();
				}
			}

			State = 1992; Match(RightBrace);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadContext : ParserRuleContext {
		public ClassKeyContext classKey() {
			return GetRuleContext<ClassKeyContext>(0);
		}
		public ClassHeadNameContext classHeadName() {
			return GetRuleContext<ClassHeadNameContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ClassVirtSpecifierContext classVirtSpecifier() {
			return GetRuleContext<ClassVirtSpecifierContext>(0);
		}
		public BaseClauseContext baseClause() {
			return GetRuleContext<BaseClauseContext>(0);
		}
		public ClassHeadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHead; } }
		public string RuleName { get { return "ClassHead"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassHead(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassHead(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadContext ClassHead() {
		ClassHeadContext _localctx = new ClassHeadContext(Context, State);
		EnterRule(_localctx, 296, RULE_classHead);
		int _la;
		try {
			State = 2012;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1994; ClassKey();
				State = 1996;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 1995; AttributeSpecifierSeq(0);
					}
				}

				State = 1998; ClassHeadName();
				State = 2000;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Final) {
					{
					State = 1999; ClassVirtSpecifier();
					}
				}

				State = 2003;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 2002; BaseClause();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2005; ClassKey();
				State = 2007;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2006; AttributeSpecifierSeq(0);
					}
				}

				State = 2010;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Colon) {
					{
					State = 2009; BaseClause();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassHeadNameContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ClassHeadNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classHeadName; } }
		public string RuleName { get { return "ClassHeadName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassHeadName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassHeadName(this);
		}
	}

	[RuleVersion(0)]
	public ClassHeadNameContext ClassHeadName() {
		ClassHeadNameContext _localctx = new ClassHeadNameContext(Context, State);
		EnterRule(_localctx, 298, RULE_classHeadName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2015;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
			case 1:
				{
				State = 2014; NestedNameSpecifier(0);
				}
				break;
			}
			State = 2017; ClassName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassVirtSpecifierContext : ParserRuleContext {
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public ClassVirtSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classVirtSpecifier; } }
		public string RuleName { get { return "ClassVirtSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassVirtSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassVirtSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassVirtSpecifierContext ClassVirtSpecifier() {
		ClassVirtSpecifierContext _localctx = new ClassVirtSpecifierContext(Context, State);
		EnterRule(_localctx, 300, RULE_classVirtSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2019; Match(Final);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassKeyContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Struct() { return GetToken(CPP14Parser.Struct, 0); }
		public ITerminalNode Union() { return GetToken(CPP14Parser.Union, 0); }
		public ClassKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classKey; } }
		public string RuleName { get { return "ClassKey"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassKey(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassKey(this);
		}
	}

	[RuleVersion(0)]
	public ClassKeyContext ClassKey() {
		ClassKeyContext _localctx = new ClassKeyContext(Context, State);
		EnterRule(_localctx, 302, RULE_classKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2021;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 20)) & ~0x3f) == 0 && ((1L << (_la - 20)) & ((1L << (Class - 20)) | (1L << (Struct - 20)) | (1L << (Union - 20)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberSpecificationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public MemberSpecificationContext memberSpecification() {
			return GetRuleContext<MemberSpecificationContext>(0);
		}
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public MemberSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberSpecification; } }
		public string RuleName { get { return "MemberSpecification"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberSpecification(this);
		}
	}

	[RuleVersion(0)]
	public MemberSpecificationContext MemberSpecification() {
		MemberSpecificationContext _localctx = new MemberSpecificationContext(Context, State);
		EnterRule(_localctx, 304, RULE_memberSpecification);
		int _la;
		try {
			State = 2032;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
			case AlignAs:
			case Auto:
			case Bool:
			case Char:
			case Char16:
			case Char32:
			case Class:
			case Const:
			case Constexpr:
			case DeclType:
			case Double:
			case Enum:
			case Explicit:
			case Extern:
			case Float:
			case Friend:
			case Inline:
			case Int:
			case Long:
			case Mutable:
			case Operator:
			case Register:
			case Short:
			case Signed:
			case Static:
			case StaticAssert:
			case Struct:
			case Template:
			case ThreadLocal:
			case TypeDef:
			case TypeName:
			case Union:
			case Unsigned:
			case Using:
			case Virtual:
			case Void:
			case Volatile:
			case Wchar:
			case LeftParen:
			case LeftBracket:
			case Star:
			case And:
			case Tilde:
			case Colon:
			case DoubleColon:
			case Semi:
			case Ellipsis:
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2023; MemberDeclaration();
				State = 2025;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << DeclType) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (ThreadLocal - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (Colon - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
					{
					State = 2024; MemberSpecification();
					}
				}

				}
				break;
			case Private:
			case Protected:
			case Public:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2027; AccessSpecifier();
				State = 2028; Match(Colon);
				State = 2030;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << Constexpr) | (1L << DeclType) | (1L << Double) | (1L << Enum) | (1L << Explicit) | (1L << Extern) | (1L << Float) | (1L << Friend) | (1L << Inline) | (1L << Int) | (1L << Long) | (1L << Mutable) | (1L << Operator) | (1L << Private) | (1L << Protected) | (1L << Public) | (1L << Register) | (1L << Short) | (1L << Signed) | (1L << Static))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (StaticAssert - 64)) | (1L << (Struct - 64)) | (1L << (Template - 64)) | (1L << (ThreadLocal - 64)) | (1L << (TypeDef - 64)) | (1L << (TypeName - 64)) | (1L << (Union - 64)) | (1L << (Unsigned - 64)) | (1L << (Using - 64)) | (1L << (Virtual - 64)) | (1L << (Void - 64)) | (1L << (Volatile - 64)) | (1L << (Wchar - 64)) | (1L << (LeftParen - 64)) | (1L << (LeftBracket - 64)) | (1L << (Star - 64)) | (1L << (And - 64)) | (1L << (Tilde - 64)) | (1L << (Colon - 64)) | (1L << (DoubleColon - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (Semi - 128)) | (1L << (Ellipsis - 128)) | (1L << (Identifier - 128)))) != 0)) {
					{
					State = 2029; MemberSpecification();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public ITerminalNode Semi() { return GetToken(CPP14Parser.Semi, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public DeclSpecifierSeqContext declSpecifierSeq() {
			return GetRuleContext<DeclSpecifierSeqContext>(0);
		}
		public MemberDeclaratorListContext memberDeclaratorList() {
			return GetRuleContext<MemberDeclaratorListContext>(0);
		}
		public FunctionDefinitionContext functionDefinition() {
			return GetRuleContext<FunctionDefinitionContext>(0);
		}
		public UsingDeclarationContext usingDeclaration() {
			return GetRuleContext<UsingDeclarationContext>(0);
		}
		public StaticAssertDeclarationContext staticAssertDeclaration() {
			return GetRuleContext<StaticAssertDeclarationContext>(0);
		}
		public TemplateDeclarationContext templateDeclaration() {
			return GetRuleContext<TemplateDeclarationContext>(0);
		}
		public AliasDeclarationContext aliasDeclaration() {
			return GetRuleContext<AliasDeclarationContext>(0);
		}
		public EmptyDeclarationContext emptyDeclaration() {
			return GetRuleContext<EmptyDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public string RuleName { get { return "MemberDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext MemberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 306, RULE_memberDeclaration);
		int _la;
		try {
			State = 2050;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2035;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,249,Context) ) {
				case 1:
					{
					State = 2034; AttributeSpecifierSeq(0);
					}
					break;
				}
				State = 2038;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,250,Context) ) {
				case 1:
					{
					State = 2037; DeclSpecifierSeq();
					}
					break;
				}
				State = 2041;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << AlignAs) | (1L << DeclType) | (1L << Operator))) != 0) || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (Tilde - 85)) | (1L << (Colon - 85)) | (1L << (DoubleColon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 2040; MemberDeclaratorList(0);
					}
				}

				State = 2043; Match(Semi);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2044; FunctionDefinition();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2045; UsingDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2046; StaticAssertDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2047; TemplateDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2048; AliasDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2049; EmptyDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclaratorListContext : ParserRuleContext {
		public MemberDeclaratorContext memberDeclarator() {
			return GetRuleContext<MemberDeclaratorContext>(0);
		}
		public MemberDeclaratorListContext memberDeclaratorList() {
			return GetRuleContext<MemberDeclaratorListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public MemberDeclaratorListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaratorList; } }
		public string RuleName { get { return "MemberDeclaratorList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberDeclaratorList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberDeclaratorList(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorListContext MemberDeclaratorList() {
		return MemberDeclaratorList(0);
	}

	private MemberDeclaratorListContext MemberDeclaratorList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MemberDeclaratorListContext _localctx = new MemberDeclaratorListContext(Context, _parentState);
		MemberDeclaratorListContext _prevctx = _localctx;
		int _startState = 308;
		EnterRecursionRule(_localctx, 308, RULE_memberDeclaratorList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2053; MemberDeclarator();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2060;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MemberDeclaratorListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_memberDeclaratorList);
					State = 2055;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2056; Match(Comma);
					State = 2057; MemberDeclarator();
					}
					} 
				}
				State = 2062;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,253,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MemberDeclaratorContext : ParserRuleContext {
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public VirtSpecifierSeqContext virtSpecifierSeq() {
			return GetRuleContext<VirtSpecifierSeqContext>(0);
		}
		public PureSpecifierContext pureSpecifier() {
			return GetRuleContext<PureSpecifierContext>(0);
		}
		public BraceOrEqualInitializerContext braceOrEqualInitializer() {
			return GetRuleContext<BraceOrEqualInitializerContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public MemberDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclarator; } }
		public string RuleName { get { return "MemberDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemberDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemberDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclaratorContext MemberDeclarator() {
		MemberDeclaratorContext _localctx = new MemberDeclaratorContext(Context, State);
		EnterRule(_localctx, 310, RULE_memberDeclarator);
		int _la;
		try {
			State = 2082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,259,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2063; Declarator();
				State = 2065;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
				case 1:
					{
					State = 2064; VirtSpecifierSeq(0);
					}
					break;
				}
				State = 2068;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
				case 1:
					{
					State = 2067; PureSpecifier();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2070; Declarator();
				State = 2072;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,256,Context) ) {
				case 1:
					{
					State = 2071; BraceOrEqualInitializer();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2075;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2074; Match(Identifier);
					}
				}

				State = 2078;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2077; AttributeSpecifierSeq(0);
					}
				}

				State = 2080; Match(Colon);
				State = 2081; ConstantExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VirtSpecifierSeqContext : ParserRuleContext {
		public VirtSpecifierContext virtSpecifier() {
			return GetRuleContext<VirtSpecifierContext>(0);
		}
		public VirtSpecifierSeqContext virtSpecifierSeq() {
			return GetRuleContext<VirtSpecifierSeqContext>(0);
		}
		public VirtSpecifierSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtSpecifierSeq; } }
		public string RuleName { get { return "VirtSpecifierSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtSpecifierSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtSpecifierSeq(this);
		}
	}

	[RuleVersion(0)]
	public VirtSpecifierSeqContext VirtSpecifierSeq() {
		return VirtSpecifierSeq(0);
	}

	private VirtSpecifierSeqContext VirtSpecifierSeq(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		VirtSpecifierSeqContext _localctx = new VirtSpecifierSeqContext(Context, _parentState);
		VirtSpecifierSeqContext _prevctx = _localctx;
		int _startState = 312;
		EnterRecursionRule(_localctx, 312, RULE_virtSpecifierSeq, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2085; VirtSpecifier();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2091;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new VirtSpecifierSeqContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_virtSpecifierSeq);
					State = 2087;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2088; VirtSpecifier();
					}
					} 
				}
				State = 2093;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,260,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class VirtSpecifierContext : ParserRuleContext {
		public ITerminalNode Override() { return GetToken(CPP14Parser.Override, 0); }
		public ITerminalNode Final() { return GetToken(CPP14Parser.Final, 0); }
		public VirtSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_virtSpecifier; } }
		public string RuleName { get { return "VirtSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterVirtSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitVirtSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public VirtSpecifierContext VirtSpecifier() {
		VirtSpecifierContext _localctx = new VirtSpecifierContext(Context, State);
		EnterRule(_localctx, 314, RULE_virtSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2094;
			_la = TokenStream.LA(1);
			if ( !(_la==Final || _la==Override) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureSpecifierContext : ParserRuleContext {
		public IToken val;
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode OctalLiteral() { return GetToken(CPP14Parser.OctalLiteral, 0); }
		public PureSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureSpecifier; } }
		public string RuleName { get { return "PureSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPureSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPureSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public PureSpecifierContext PureSpecifier() {
		PureSpecifierContext _localctx = new PureSpecifierContext(Context, State);
		EnterRule(_localctx, 316, RULE_pureSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2096; Match(Assign);
			State = 2097; _localctx.val = Match(OctalLiteral);
			if ((_localctx.val!=null?_localctx.val.Text:null) != "0") throw new InputMismatchException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseClauseContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public BaseSpecifierListContext baseSpecifierList() {
			return GetRuleContext<BaseSpecifierListContext>(0);
		}
		public BaseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseClause; } }
		public string RuleName { get { return "BaseClause"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseClause(this);
		}
	}

	[RuleVersion(0)]
	public BaseClauseContext BaseClause() {
		BaseClauseContext _localctx = new BaseClauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_baseClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2100; Match(Colon);
			State = 2101; BaseSpecifierList(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseSpecifierListContext : ParserRuleContext {
		public BaseSpecifierContext baseSpecifier() {
			return GetRuleContext<BaseSpecifierContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public BaseSpecifierListContext baseSpecifierList() {
			return GetRuleContext<BaseSpecifierListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public BaseSpecifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseSpecifierList; } }
		public string RuleName { get { return "BaseSpecifierList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseSpecifierList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseSpecifierList(this);
		}
	}

	[RuleVersion(0)]
	public BaseSpecifierListContext BaseSpecifierList() {
		return BaseSpecifierList(0);
	}

	private BaseSpecifierListContext BaseSpecifierList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BaseSpecifierListContext _localctx = new BaseSpecifierListContext(Context, _parentState);
		BaseSpecifierListContext _prevctx = _localctx;
		int _startState = 320;
		EnterRecursionRule(_localctx, 320, RULE_baseSpecifierList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2104; BaseSpecifier();
			State = 2106;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				{
				State = 2105; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2116;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BaseSpecifierListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_baseSpecifierList);
					State = 2108;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2109; Match(Comma);
					State = 2110; BaseSpecifier();
					State = 2112;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
					case 1:
						{
						State = 2111; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2118;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,263,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BaseSpecifierContext : ParserRuleContext {
		public BaseTypeSpecifierContext baseTypeSpecifier() {
			return GetRuleContext<BaseTypeSpecifierContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public ITerminalNode Virtual() { return GetToken(CPP14Parser.Virtual, 0); }
		public AccessSpecifierContext accessSpecifier() {
			return GetRuleContext<AccessSpecifierContext>(0);
		}
		public BaseSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseSpecifier; } }
		public string RuleName { get { return "BaseSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public BaseSpecifierContext BaseSpecifier() {
		BaseSpecifierContext _localctx = new BaseSpecifierContext(Context, State);
		EnterRule(_localctx, 322, RULE_baseSpecifier);
		int _la;
		try {
			State = 2140;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2119; AttributeSpecifierSeq(0);
					}
				}

				State = 2122; BaseTypeSpecifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2123; AttributeSpecifierSeq(0);
					}
				}

				State = 2126; Match(Virtual);
				State = 2128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) {
					{
					State = 2127; AccessSpecifier();
					}
				}

				State = 2130; BaseTypeSpecifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2132;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2131; AttributeSpecifierSeq(0);
					}
				}

				State = 2134; AccessSpecifier();
				State = 2136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Virtual) {
					{
					State = 2135; Match(Virtual);
					}
				}

				State = 2138; BaseTypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrDeclTypeContext : ParserRuleContext {
		public ClassNameContext className() {
			return GetRuleContext<ClassNameContext>(0);
		}
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public DeclTypeSpecifierContext declTypeSpecifier() {
			return GetRuleContext<DeclTypeSpecifierContext>(0);
		}
		public ClassOrDeclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrDeclType; } }
		public string RuleName { get { return "ClassOrDeclType"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterClassOrDeclType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitClassOrDeclType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrDeclTypeContext ClassOrDeclType() {
		ClassOrDeclTypeContext _localctx = new ClassOrDeclTypeContext(Context, State);
		EnterRule(_localctx, 324, RULE_classOrDeclType);
		try {
			State = 2147;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
				case 1:
					{
					State = 2142; NestedNameSpecifier(0);
					}
					break;
				}
				State = 2145; ClassName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2146; DeclTypeSpecifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BaseTypeSpecifierContext : ParserRuleContext {
		public ClassOrDeclTypeContext classOrDeclType() {
			return GetRuleContext<ClassOrDeclTypeContext>(0);
		}
		public BaseTypeSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_baseTypeSpecifier; } }
		public string RuleName { get { return "BaseTypeSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBaseTypeSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBaseTypeSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public BaseTypeSpecifierContext BaseTypeSpecifier() {
		BaseTypeSpecifierContext _localctx = new BaseTypeSpecifierContext(Context, State);
		EnterRule(_localctx, 326, RULE_baseTypeSpecifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2149; ClassOrDeclType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccessSpecifierContext : ParserRuleContext {
		public ITerminalNode Private() { return GetToken(CPP14Parser.Private, 0); }
		public ITerminalNode Protected() { return GetToken(CPP14Parser.Protected, 0); }
		public ITerminalNode Public() { return GetToken(CPP14Parser.Public, 0); }
		public AccessSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accessSpecifier; } }
		public string RuleName { get { return "AccessSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterAccessSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitAccessSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public AccessSpecifierContext AccessSpecifier() {
		AccessSpecifierContext _localctx = new AccessSpecifierContext(Context, State);
		EnterRule(_localctx, 328, RULE_accessSpecifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2151;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Private) | (1L << Protected) | (1L << Public))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionFunctionIdContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ConversionTypeIdContext conversionTypeId() {
			return GetRuleContext<ConversionTypeIdContext>(0);
		}
		public ConversionFunctionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionFunctionId; } }
		public string RuleName { get { return "ConversionFunctionId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversionFunctionId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversionFunctionId(this);
		}
	}

	[RuleVersion(0)]
	public ConversionFunctionIdContext ConversionFunctionId() {
		ConversionFunctionIdContext _localctx = new ConversionFunctionIdContext(Context, State);
		EnterRule(_localctx, 330, RULE_conversionFunctionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2153; Match(Operator);
			State = 2154; ConversionTypeId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionTypeIdContext : ParserRuleContext {
		public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public ConversionDeclaratorContext conversionDeclarator() {
			return GetRuleContext<ConversionDeclaratorContext>(0);
		}
		public ConversionTypeIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionTypeId; } }
		public string RuleName { get { return "ConversionTypeId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversionTypeId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversionTypeId(this);
		}
	}

	[RuleVersion(0)]
	public ConversionTypeIdContext ConversionTypeId() {
		ConversionTypeIdContext _localctx = new ConversionTypeIdContext(Context, State);
		EnterRule(_localctx, 332, RULE_conversionTypeId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2156; TypeSpecifierSeq();
			State = 2158;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 2157; ConversionDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConversionDeclaratorContext : ParserRuleContext {
		public PtrOperatorContext ptrOperator() {
			return GetRuleContext<PtrOperatorContext>(0);
		}
		public ConversionDeclaratorContext conversionDeclarator() {
			return GetRuleContext<ConversionDeclaratorContext>(0);
		}
		public ConversionDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conversionDeclarator; } }
		public string RuleName { get { return "ConversionDeclarator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterConversionDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitConversionDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public ConversionDeclaratorContext ConversionDeclarator() {
		ConversionDeclaratorContext _localctx = new ConversionDeclaratorContext(Context, State);
		EnterRule(_localctx, 334, RULE_conversionDeclarator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160; PtrOperator();
			State = 2162;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 2161; ConversionDeclarator();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CtorInitializerContext : ParserRuleContext {
		public ITerminalNode Colon() { return GetToken(CPP14Parser.Colon, 0); }
		public MemInitializerListContext memInitializerList() {
			return GetRuleContext<MemInitializerListContext>(0);
		}
		public CtorInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ctorInitializer; } }
		public string RuleName { get { return "CtorInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterCtorInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitCtorInitializer(this);
		}
	}

	[RuleVersion(0)]
	public CtorInitializerContext CtorInitializer() {
		CtorInitializerContext _localctx = new CtorInitializerContext(Context, State);
		EnterRule(_localctx, 336, RULE_ctorInitializer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2164; Match(Colon);
			State = 2165; MemInitializerList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerListContext : ParserRuleContext {
		public MemInitializerContext memInitializer() {
			return GetRuleContext<MemInitializerContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public MemInitializerListContext memInitializerList() {
			return GetRuleContext<MemInitializerListContext>(0);
		}
		public MemInitializerListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializerList; } }
		public string RuleName { get { return "MemInitializerList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemInitializerList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemInitializerList(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerListContext MemInitializerList() {
		MemInitializerListContext _localctx = new MemInitializerListContext(Context, State);
		EnterRule(_localctx, 338, RULE_memInitializerList);
		int _la;
		try {
			State = 2178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2167; MemInitializer();
				State = 2169;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2168; Match(Ellipsis);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2171; MemInitializer();
				State = 2173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Ellipsis) {
					{
					State = 2172; Match(Ellipsis);
					}
				}

				State = 2175; Match(Comma);
				State = 2176; MemInitializerList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerContext : ParserRuleContext {
		public MemInitializerIdContext memInitializerId() {
			return GetRuleContext<MemInitializerIdContext>(0);
		}
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public BracedInitListContext bracedInitList() {
			return GetRuleContext<BracedInitListContext>(0);
		}
		public MemInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializer; } }
		public string RuleName { get { return "MemInitializer"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemInitializer(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerContext MemInitializer() {
		MemInitializerContext _localctx = new MemInitializerContext(Context, State);
		EnterRule(_localctx, 340, RULE_memInitializer);
		int _la;
		try {
			State = 2190;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2180; MemInitializerId();
				State = 2181; Match(LeftParen);
				State = 2183;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (This - 65)) | (1L << (Throw - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (LeftBrace - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 2182; ExpressionList();
					}
				}

				State = 2185; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2187; MemInitializerId();
				State = 2188; BracedInitList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemInitializerIdContext : ParserRuleContext {
		public ClassOrDeclTypeContext classOrDeclType() {
			return GetRuleContext<ClassOrDeclTypeContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public MemInitializerIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memInitializerId; } }
		public string RuleName { get { return "MemInitializerId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterMemInitializerId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitMemInitializerId(this);
		}
	}

	[RuleVersion(0)]
	public MemInitializerIdContext MemInitializerId() {
		MemInitializerIdContext _localctx = new MemInitializerIdContext(Context, State);
		EnterRule(_localctx, 342, RULE_memInitializerId);
		try {
			State = 2194;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2192; ClassOrDeclType();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2193; Match(Identifier);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OperatorFunctionIdContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public TheOperatorContext theOperator() {
			return GetRuleContext<TheOperatorContext>(0);
		}
		public OperatorFunctionIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_operatorFunctionId; } }
		public string RuleName { get { return "OperatorFunctionId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterOperatorFunctionId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitOperatorFunctionId(this);
		}
	}

	[RuleVersion(0)]
	public OperatorFunctionIdContext OperatorFunctionId() {
		OperatorFunctionIdContext _localctx = new OperatorFunctionIdContext(Context, State);
		EnterRule(_localctx, 344, RULE_operatorFunctionId);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2196; Match(Operator);
			State = 2197; TheOperator();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOperatorIdContext : ParserRuleContext {
		public ITerminalNode Operator() { return GetToken(CPP14Parser.Operator, 0); }
		public ITerminalNode StringLiteral() { return GetToken(CPP14Parser.StringLiteral, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode UserDefinedStringLiteral() { return GetToken(CPP14Parser.UserDefinedStringLiteral, 0); }
		public LiteralOperatorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOperatorId; } }
		public string RuleName { get { return "LiteralOperatorId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteralOperatorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteralOperatorId(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOperatorIdContext LiteralOperatorId() {
		LiteralOperatorIdContext _localctx = new LiteralOperatorIdContext(Context, State);
		EnterRule(_localctx, 346, RULE_literalOperatorId);
		try {
			State = 2204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2199; Match(Operator);
				State = 2200; Match(StringLiteral);
				State = 2201; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2202; Match(Operator);
				State = 2203; Match(UserDefinedStringLiteral);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateDeclarationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public TemplateParameterListContext templateParameterList() {
			return GetRuleContext<TemplateParameterListContext>(0);
		}
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public TemplateDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateDeclaration; } }
		public string RuleName { get { return "TemplateDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TemplateDeclarationContext TemplateDeclaration() {
		TemplateDeclarationContext _localctx = new TemplateDeclarationContext(Context, State);
		EnterRule(_localctx, 348, RULE_templateDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2206; Match(Template);
			State = 2207; Match(Less);
			State = 2208; TemplateParameterList(0);
			State = 2209; Match(Greater);
			State = 2210; Declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateParameterListContext : ParserRuleContext {
		public TemplateParameterContext templateParameter() {
			return GetRuleContext<TemplateParameterContext>(0);
		}
		public TemplateParameterListContext templateParameterList() {
			return GetRuleContext<TemplateParameterListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TemplateParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParameterList; } }
		public string RuleName { get { return "TemplateParameterList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateParameterList(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParameterListContext TemplateParameterList() {
		return TemplateParameterList(0);
	}

	private TemplateParameterListContext TemplateParameterList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateParameterListContext _localctx = new TemplateParameterListContext(Context, _parentState);
		TemplateParameterListContext _prevctx = _localctx;
		int _startState = 350;
		EnterRecursionRule(_localctx, 350, RULE_templateParameterList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2213; TemplateParameter();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2220;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateParameterListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateParameterList);
					State = 2215;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2216; Match(Comma);
					State = 2217; TemplateParameter();
					}
					} 
				}
				State = 2222;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,281,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateParameterContext : ParserRuleContext {
		public TypeParameterContext typeParameter() {
			return GetRuleContext<TypeParameterContext>(0);
		}
		public ParameterDeclarationContext parameterDeclaration() {
			return GetRuleContext<ParameterDeclarationContext>(0);
		}
		public TemplateParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateParameter; } }
		public string RuleName { get { return "TemplateParameter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateParameter(this);
		}
	}

	[RuleVersion(0)]
	public TemplateParameterContext TemplateParameter() {
		TemplateParameterContext _localctx = new TemplateParameterContext(Context, State);
		EnterRule(_localctx, 352, RULE_templateParameter);
		try {
			State = 2225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2223; TypeParameter();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2224; ParameterDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode Class() { return GetToken(CPP14Parser.Class, 0); }
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode TypeName() { return GetToken(CPP14Parser.TypeName, 0); }
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public TemplateParameterListContext templateParameterList() {
			return GetRuleContext<TemplateParameterListContext>(0);
		}
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public string RuleName { get { return "TypeParameter"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext TypeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 354, RULE_typeParameter);
		int _la;
		try {
			State = 2275;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2227; Match(Class);
				State = 2229;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 2228; Match(Ellipsis);
					}
					break;
				}
				State = 2232;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,284,Context) ) {
				case 1:
					{
					State = 2231; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2234; Match(Class);
				State = 2236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2235; Match(Identifier);
					}
				}

				State = 2238; Match(Assign);
				State = 2239; TheTypeId();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2240; Match(TypeName);
				State = 2242;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
				case 1:
					{
					State = 2241; Match(Ellipsis);
					}
					break;
				}
				State = 2245;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
				case 1:
					{
					State = 2244; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2247; Match(TypeName);
				State = 2249;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2248; Match(Identifier);
					}
				}

				State = 2251; Match(Assign);
				State = 2252; TheTypeId();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2253; Match(Template);
				State = 2254; Match(Less);
				State = 2255; TemplateParameterList(0);
				State = 2256; Match(Greater);
				State = 2257; Match(Class);
				State = 2259;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 2258; Match(Ellipsis);
					}
					break;
				}
				State = 2262;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
				case 1:
					{
					State = 2261; Match(Identifier);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2264; Match(Template);
				State = 2265; Match(Less);
				State = 2266; TemplateParameterList(0);
				State = 2267; Match(Greater);
				State = 2268; Match(Class);
				State = 2270;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Identifier) {
					{
					State = 2269; Match(Identifier);
					}
				}

				State = 2272; Match(Assign);
				State = 2273; IdExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleTemplateIdContext : ParserRuleContext {
		public TemplateNameContext templateName() {
			return GetRuleContext<TemplateNameContext>(0);
		}
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public SimpleTemplateIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleTemplateId; } }
		public string RuleName { get { return "SimpleTemplateId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterSimpleTemplateId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitSimpleTemplateId(this);
		}
	}

	[RuleVersion(0)]
	public SimpleTemplateIdContext SimpleTemplateId() {
		SimpleTemplateIdContext _localctx = new SimpleTemplateIdContext(Context, State);
		EnterRule(_localctx, 356, RULE_simpleTemplateId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277; TemplateName();
			State = 2278; Match(Less);
			State = 2280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
				{
				State = 2279; TemplateArgumentList(0);
				}
			}

			State = 2282; Match(Greater);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateIdContext : ParserRuleContext {
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public OperatorFunctionIdContext operatorFunctionId() {
			return GetRuleContext<OperatorFunctionIdContext>(0);
		}
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public LiteralOperatorIdContext literalOperatorId() {
			return GetRuleContext<LiteralOperatorIdContext>(0);
		}
		public TemplateIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateId; } }
		public string RuleName { get { return "TemplateId"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateId(this);
		}
	}

	[RuleVersion(0)]
	public TemplateIdContext TemplateId() {
		TemplateIdContext _localctx = new TemplateIdContext(Context, State);
		EnterRule(_localctx, 358, RULE_templateId);
		int _la;
		try {
			State = 2299;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2284; SimpleTemplateId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2285; OperatorFunctionId();
				State = 2286; Match(Less);
				State = 2288;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 2287; TemplateArgumentList(0);
					}
				}

				State = 2290; Match(Greater);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2292; LiteralOperatorId();
				State = 2293; Match(Less);
				State = 2295;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << AlignOf) | (1L << Auto) | (1L << Bool) | (1L << Char) | (1L << Char16) | (1L << Char32) | (1L << Class) | (1L << Const) | (1L << ConstCast) | (1L << DeclType) | (1L << Delete) | (1L << Double) | (1L << DynamicCast) | (1L << Enum) | (1L << False) | (1L << Float) | (1L << Int) | (1L << Long) | (1L << New) | (1L << NoExcept) | (1L << NullPtr) | (1L << Null) | (1L << Operator) | (1L << ReinterpretCast) | (1L << Short) | (1L << Signed) | (1L << SizeOf))) != 0) || ((((_la - 65)) & ~0x3f) == 0 && ((1L << (_la - 65)) & ((1L << (StaticCast - 65)) | (1L << (Struct - 65)) | (1L << (This - 65)) | (1L << (True - 65)) | (1L << (TypeId - 65)) | (1L << (TypeName - 65)) | (1L << (Union - 65)) | (1L << (Unsigned - 65)) | (1L << (Void - 65)) | (1L << (Volatile - 65)) | (1L << (Wchar - 65)) | (1L << (LeftParen - 65)) | (1L << (LeftBracket - 65)) | (1L << (Plus - 65)) | (1L << (Minus - 65)) | (1L << (Star - 65)) | (1L << (And - 65)) | (1L << (Or - 65)) | (1L << (Tilde - 65)) | (1L << (PlusPlus - 65)) | (1L << (MinusMinus - 65)) | (1L << (DoubleColon - 65)))) != 0) || ((((_la - 132)) & ~0x3f) == 0 && ((1L << (_la - 132)) & ((1L << (Identifier - 132)) | (1L << (IntegerLiteral - 132)) | (1L << (CharacterLiteral - 132)) | (1L << (FloatingLiteral - 132)) | (1L << (StringLiteral - 132)) | (1L << (UserDefinedIntegerLiteral - 132)) | (1L << (UserDefinedFloatingLiteral - 132)) | (1L << (UserDefinedStringLiteral - 132)) | (1L << (UserDefinedCharacterLiteral - 132)))) != 0)) {
					{
					State = 2294; TemplateArgumentList(0);
					}
				}

				State = 2297; Match(Greater);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateNameContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public TemplateNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateName; } }
		public string RuleName { get { return "TemplateName"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateName(this);
		}
	}

	[RuleVersion(0)]
	public TemplateNameContext TemplateName() {
		TemplateNameContext _localctx = new TemplateNameContext(Context, State);
		EnterRule(_localctx, 360, RULE_templateName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2301; Match(Identifier);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemplateArgumentListContext : ParserRuleContext {
		public TemplateArgumentContext templateArgument() {
			return GetRuleContext<TemplateArgumentContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public TemplateArgumentListContext templateArgumentList() {
			return GetRuleContext<TemplateArgumentListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TemplateArgumentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgumentList; } }
		public string RuleName { get { return "TemplateArgumentList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateArgumentList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateArgumentList(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgumentListContext TemplateArgumentList() {
		return TemplateArgumentList(0);
	}

	private TemplateArgumentListContext TemplateArgumentList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TemplateArgumentListContext _localctx = new TemplateArgumentListContext(Context, _parentState);
		TemplateArgumentListContext _prevctx = _localctx;
		int _startState = 362;
		EnterRecursionRule(_localctx, 362, RULE_templateArgumentList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2304; TemplateArgument();
			State = 2306;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
			case 1:
				{
				State = 2305; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2316;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TemplateArgumentListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_templateArgumentList);
					State = 2308;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2309; Match(Comma);
					State = 2310; TemplateArgument();
					State = 2312;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
					case 1:
						{
						State = 2311; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2318;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TemplateArgumentContext : ParserRuleContext {
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public IdExpressionContext idExpression() {
			return GetRuleContext<IdExpressionContext>(0);
		}
		public TemplateArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_templateArgument; } }
		public string RuleName { get { return "TemplateArgument"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTemplateArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTemplateArgument(this);
		}
	}

	[RuleVersion(0)]
	public TemplateArgumentContext TemplateArgument() {
		TemplateArgumentContext _localctx = new TemplateArgumentContext(Context, State);
		EnterRule(_localctx, 364, RULE_templateArgument);
		try {
			State = 2322;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2319; TheTypeId();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2320; ConstantExpression();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2321; IdExpression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeNameSpecifierContext : ParserRuleContext {
		public ITerminalNode TypeName() { return GetToken(CPP14Parser.TypeName, 0); }
		public NestedNameSpecifierContext nestedNameSpecifier() {
			return GetRuleContext<NestedNameSpecifierContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(CPP14Parser.Identifier, 0); }
		public SimpleTemplateIdContext simpleTemplateId() {
			return GetRuleContext<SimpleTemplateIdContext>(0);
		}
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public TypeNameSpecifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeNameSpecifier; } }
		public string RuleName { get { return "TypeNameSpecifier"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeNameSpecifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeNameSpecifier(this);
		}
	}

	[RuleVersion(0)]
	public TypeNameSpecifierContext TypeNameSpecifier() {
		TypeNameSpecifierContext _localctx = new TypeNameSpecifierContext(Context, State);
		EnterRule(_localctx, 366, RULE_typeNameSpecifier);
		int _la;
		try {
			State = 2335;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,302,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2324; Match(TypeName);
				State = 2325; NestedNameSpecifier(0);
				State = 2326; Match(Identifier);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2328; Match(TypeName);
				State = 2329; NestedNameSpecifier(0);
				State = 2331;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==Template) {
					{
					State = 2330; Match(Template);
					}
				}

				State = 2333; SimpleTemplateId();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitInstantiationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ITerminalNode Extern() { return GetToken(CPP14Parser.Extern, 0); }
		public ExplicitInstantiationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitInstantiation; } }
		public string RuleName { get { return "ExplicitInstantiation"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitInstantiation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitInstantiation(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitInstantiationContext ExplicitInstantiation() {
		ExplicitInstantiationContext _localctx = new ExplicitInstantiationContext(Context, State);
		EnterRule(_localctx, 368, RULE_explicitInstantiation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Extern) {
				{
				State = 2337; Match(Extern);
				}
			}

			State = 2340; Match(Template);
			State = 2341; Declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitSpecializationContext : ParserRuleContext {
		public ITerminalNode Template() { return GetToken(CPP14Parser.Template, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		public ExplicitSpecializationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitSpecialization; } }
		public string RuleName { get { return "ExplicitSpecialization"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExplicitSpecialization(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExplicitSpecialization(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitSpecializationContext ExplicitSpecialization() {
		ExplicitSpecializationContext _localctx = new ExplicitSpecializationContext(Context, State);
		EnterRule(_localctx, 370, RULE_explicitSpecialization);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2343; Match(Template);
			State = 2344; Match(Less);
			State = 2345; Match(Greater);
			State = 2346; Declaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TryBlockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		public TryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tryBlock; } }
		public string RuleName { get { return "TryBlock"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTryBlock(this);
		}
	}

	[RuleVersion(0)]
	public TryBlockContext TryBlock() {
		TryBlockContext _localctx = new TryBlockContext(Context, State);
		EnterRule(_localctx, 372, RULE_tryBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2348; Match(Try);
			State = 2349; CompoundStatement();
			State = 2350; HandlerSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionTryBlockContext : ParserRuleContext {
		public ITerminalNode Try() { return GetToken(CPP14Parser.Try, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		public CtorInitializerContext ctorInitializer() {
			return GetRuleContext<CtorInitializerContext>(0);
		}
		public FunctionTryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionTryBlock; } }
		public string RuleName { get { return "FunctionTryBlock"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterFunctionTryBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitFunctionTryBlock(this);
		}
	}

	[RuleVersion(0)]
	public FunctionTryBlockContext FunctionTryBlock() {
		FunctionTryBlockContext _localctx = new FunctionTryBlockContext(Context, State);
		EnterRule(_localctx, 374, RULE_functionTryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2352; Match(Try);
			State = 2354;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==Colon) {
				{
				State = 2353; CtorInitializer();
				}
			}

			State = 2356; CompoundStatement();
			State = 2357; HandlerSeq();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerSeqContext : ParserRuleContext {
		public HandlerContext handler() {
			return GetRuleContext<HandlerContext>(0);
		}
		public HandlerSeqContext handlerSeq() {
			return GetRuleContext<HandlerSeqContext>(0);
		}
		public HandlerSeqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerSeq; } }
		public string RuleName { get { return "HandlerSeq"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandlerSeq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandlerSeq(this);
		}
	}

	[RuleVersion(0)]
	public HandlerSeqContext HandlerSeq() {
		HandlerSeqContext _localctx = new HandlerSeqContext(Context, State);
		EnterRule(_localctx, 376, RULE_handlerSeq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2359; Handler();
			State = 2361;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 2360; HandlerSeq();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerContext : ParserRuleContext {
		public ITerminalNode Catch() { return GetToken(CPP14Parser.Catch, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ExceptionDeclarationContext exceptionDeclaration() {
			return GetRuleContext<ExceptionDeclarationContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		public HandlerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handler; } }
		public string RuleName { get { return "Handler"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterHandler(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitHandler(this);
		}
	}

	[RuleVersion(0)]
	public HandlerContext Handler() {
		HandlerContext _localctx = new HandlerContext(Context, State);
		EnterRule(_localctx, 378, RULE_handler);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2363; Match(Catch);
			State = 2364; Match(LeftParen);
			State = 2365; ExceptionDeclaration();
			State = 2366; Match(RightParen);
			State = 2367; CompoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionDeclarationContext : ParserRuleContext {
		public TypeSpecifierSeqContext typeSpecifierSeq() {
			return GetRuleContext<TypeSpecifierSeqContext>(0);
		}
		public DeclaratorContext declarator() {
			return GetRuleContext<DeclaratorContext>(0);
		}
		public AttributeSpecifierSeqContext attributeSpecifierSeq() {
			return GetRuleContext<AttributeSpecifierSeqContext>(0);
		}
		public AbstractDeclaratorContext abstractDeclarator() {
			return GetRuleContext<AbstractDeclaratorContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public ExceptionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionDeclaration; } }
		public string RuleName { get { return "ExceptionDeclaration"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptionDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionDeclarationContext ExceptionDeclaration() {
		ExceptionDeclarationContext _localctx = new ExceptionDeclarationContext(Context, State);
		EnterRule(_localctx, 380, RULE_exceptionDeclaration);
		int _la;
		try {
			State = 2383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2369; AttributeSpecifierSeq(0);
					}
				}

				State = 2372; TypeSpecifierSeq();
				State = 2373; Declarator();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AlignAs || _la==LeftBracket) {
					{
					State = 2375; AttributeSpecifierSeq(0);
					}
				}

				State = 2378; TypeSpecifierSeq();
				State = 2380;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__2 || _la==DeclType || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (LeftParen - 85)) | (1L << (LeftBracket - 85)) | (1L << (Star - 85)) | (1L << (And - 85)) | (1L << (DoubleColon - 85)) | (1L << (Ellipsis - 85)) | (1L << (Identifier - 85)))) != 0)) {
					{
					State = 2379; AbstractDeclarator();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2382; Match(Ellipsis);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThrowExpressionContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public AssignmentExpressionContext assignmentExpression() {
			return GetRuleContext<AssignmentExpressionContext>(0);
		}
		public ThrowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_throwExpression; } }
		public string RuleName { get { return "ThrowExpression"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterThrowExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitThrowExpression(this);
		}
	}

	[RuleVersion(0)]
	public ThrowExpressionContext ThrowExpression() {
		ThrowExpressionContext _localctx = new ThrowExpressionContext(Context, State);
		EnterRule(_localctx, 382, RULE_throwExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2385; Match(Throw);
			State = 2387;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 2386; AssignmentExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptionSpecificationContext : ParserRuleContext {
		public DynamicExceptionSpecificationContext dynamicExceptionSpecification() {
			return GetRuleContext<DynamicExceptionSpecificationContext>(0);
		}
		public NoExceptSpecificationContext noExceptSpecification() {
			return GetRuleContext<NoExceptSpecificationContext>(0);
		}
		public ExceptionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptionSpecification; } }
		public string RuleName { get { return "ExceptionSpecification"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterExceptionSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitExceptionSpecification(this);
		}
	}

	[RuleVersion(0)]
	public ExceptionSpecificationContext ExceptionSpecification() {
		ExceptionSpecificationContext _localctx = new ExceptionSpecificationContext(Context, State);
		EnterRule(_localctx, 384, RULE_exceptionSpecification);
		try {
			State = 2391;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Throw:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2389; DynamicExceptionSpecification();
				}
				break;
			case NoExcept:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2390; NoExceptSpecification();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DynamicExceptionSpecificationContext : ParserRuleContext {
		public ITerminalNode Throw() { return GetToken(CPP14Parser.Throw, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public TypeIdListContext typeIdList() {
			return GetRuleContext<TypeIdListContext>(0);
		}
		public DynamicExceptionSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dynamicExceptionSpecification; } }
		public string RuleName { get { return "DynamicExceptionSpecification"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterDynamicExceptionSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitDynamicExceptionSpecification(this);
		}
	}

	[RuleVersion(0)]
	public DynamicExceptionSpecificationContext DynamicExceptionSpecification() {
		DynamicExceptionSpecificationContext _localctx = new DynamicExceptionSpecificationContext(Context, State);
		EnterRule(_localctx, 386, RULE_dynamicExceptionSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2393; Match(Throw);
			State = 2394; Match(LeftParen);
			State = 2396;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((((_la - 12)) & ~0x3f) == 0 && ((1L << (_la - 12)) & ((1L << (Auto - 12)) | (1L << (Bool - 12)) | (1L << (Char - 12)) | (1L << (Char16 - 12)) | (1L << (Char32 - 12)) | (1L << (Class - 12)) | (1L << (Const - 12)) | (1L << (DeclType - 12)) | (1L << (Double - 12)) | (1L << (Enum - 12)) | (1L << (Float - 12)) | (1L << (Int - 12)) | (1L << (Long - 12)) | (1L << (Short - 12)) | (1L << (Signed - 12)) | (1L << (Struct - 12)))) != 0) || ((((_la - 76)) & ~0x3f) == 0 && ((1L << (_la - 76)) & ((1L << (TypeName - 76)) | (1L << (Union - 76)) | (1L << (Unsigned - 76)) | (1L << (Void - 76)) | (1L << (Volatile - 76)) | (1L << (Wchar - 76)) | (1L << (DoubleColon - 76)) | (1L << (Identifier - 76)))) != 0)) {
				{
				State = 2395; TypeIdList(0);
				}
			}

			State = 2398; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeIdListContext : ParserRuleContext {
		public TheTypeIdContext theTypeId() {
			return GetRuleContext<TheTypeIdContext>(0);
		}
		public ITerminalNode Ellipsis() { return GetToken(CPP14Parser.Ellipsis, 0); }
		public TypeIdListContext typeIdList() {
			return GetRuleContext<TypeIdListContext>(0);
		}
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public TypeIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeIdList; } }
		public string RuleName { get { return "TypeIdList"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTypeIdList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTypeIdList(this);
		}
	}

	[RuleVersion(0)]
	public TypeIdListContext TypeIdList() {
		return TypeIdList(0);
	}

	private TypeIdListContext TypeIdList(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		TypeIdListContext _localctx = new TypeIdListContext(Context, _parentState);
		TypeIdListContext _prevctx = _localctx;
		int _startState = 388;
		EnterRecursionRule(_localctx, 388, RULE_typeIdList, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 2401; TheTypeId();
			State = 2403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
			case 1:
				{
				State = 2402; Match(Ellipsis);
				}
				break;
			}
			}
			Context.Stop = TokenStream.LT(-1);
			State = 2413;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,315,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new TypeIdListContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_typeIdList);
					State = 2405;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 2406; Match(Comma);
					State = 2407; TheTypeId();
					State = 2409;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
					case 1:
						{
						State = 2408; Match(Ellipsis);
						}
						break;
					}
					}
					} 
				}
				State = 2415;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,315,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class NoExceptSpecificationContext : ParserRuleContext {
		public ITerminalNode NoExcept() { return GetToken(CPP14Parser.NoExcept, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ConstantExpressionContext constantExpression() {
			return GetRuleContext<ConstantExpressionContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public NoExceptSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noExceptSpecification; } }
		public string RuleName { get { return "NoExceptSpecification"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterNoExceptSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitNoExceptSpecification(this);
		}
	}

	[RuleVersion(0)]
	public NoExceptSpecificationContext NoExceptSpecification() {
		NoExceptSpecificationContext _localctx = new NoExceptSpecificationContext(Context, State);
		EnterRule(_localctx, 390, RULE_noExceptSpecification);
		try {
			State = 2422;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2416; Match(NoExcept);
				State = 2417; Match(LeftParen);
				State = 2418; ConstantExpression();
				State = 2419; Match(RightParen);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2421; Match(NoExcept);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode[] Greater() { return GetTokens(CPP14Parser.Greater); }
		public ITerminalNode Greater(int i) {
			return GetToken(CPP14Parser.Greater, i);
		}
		public RightShiftContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShift; } }
		public string RuleName { get { return "RightShift"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRightShift(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRightShift(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftContext RightShift() {
		RightShiftContext _localctx = new RightShiftContext(Context, State);
		EnterRule(_localctx, 392, RULE_rightShift);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2424; _localctx.first = Match(Greater);
			State = 2425; _localctx.second = Match(Greater);
			State = 2426;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RightShiftAssignContext : ParserRuleContext {
		public IToken first;
		public IToken second;
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		public RightShiftAssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rightShiftAssign; } }
		public string RuleName { get { return "RightShiftAssign"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterRightShiftAssign(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitRightShiftAssign(this);
		}
	}

	[RuleVersion(0)]
	public RightShiftAssignContext RightShiftAssign() {
		RightShiftAssignContext _localctx = new RightShiftAssignContext(Context, State);
		EnterRule(_localctx, 394, RULE_rightShiftAssign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2428; _localctx.first = Match(Greater);
			State = 2429; _localctx.second = Match(GreaterEqual);
			State = 2430;
			if (!((_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0))) throw new FailedPredicateException(this, "$first.index + 1 == $second.index");
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TheOperatorContext : ParserRuleContext {
		public ITerminalNode New() { return GetToken(CPP14Parser.New, 0); }
		public ITerminalNode Delete() { return GetToken(CPP14Parser.Delete, 0); }
		public ITerminalNode LeftBracket() { return GetToken(CPP14Parser.LeftBracket, 0); }
		public ITerminalNode RightBracket() { return GetToken(CPP14Parser.RightBracket, 0); }
		public ITerminalNode Plus() { return GetToken(CPP14Parser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(CPP14Parser.Minus, 0); }
		public ITerminalNode Star() { return GetToken(CPP14Parser.Star, 0); }
		public ITerminalNode Div() { return GetToken(CPP14Parser.Div, 0); }
		public ITerminalNode Mod() { return GetToken(CPP14Parser.Mod, 0); }
		public ITerminalNode Caret() { return GetToken(CPP14Parser.Caret, 0); }
		public ITerminalNode And() { return GetToken(CPP14Parser.And, 0); }
		public ITerminalNode Or() { return GetToken(CPP14Parser.Or, 0); }
		public ITerminalNode Tilde() { return GetToken(CPP14Parser.Tilde, 0); }
		public ITerminalNode Assign() { return GetToken(CPP14Parser.Assign, 0); }
		public ITerminalNode Less() { return GetToken(CPP14Parser.Less, 0); }
		public ITerminalNode Greater() { return GetToken(CPP14Parser.Greater, 0); }
		public ITerminalNode PlusAssign() { return GetToken(CPP14Parser.PlusAssign, 0); }
		public ITerminalNode MinusAssign() { return GetToken(CPP14Parser.MinusAssign, 0); }
		public ITerminalNode StarAssign() { return GetToken(CPP14Parser.StarAssign, 0); }
		public ITerminalNode DivAssign() { return GetToken(CPP14Parser.DivAssign, 0); }
		public ITerminalNode ModAssign() { return GetToken(CPP14Parser.ModAssign, 0); }
		public ITerminalNode XorAssign() { return GetToken(CPP14Parser.XorAssign, 0); }
		public ITerminalNode AndAssign() { return GetToken(CPP14Parser.AndAssign, 0); }
		public ITerminalNode OrAssign() { return GetToken(CPP14Parser.OrAssign, 0); }
		public ITerminalNode LeftShift() { return GetToken(CPP14Parser.LeftShift, 0); }
		public RightShiftContext rightShift() {
			return GetRuleContext<RightShiftContext>(0);
		}
		public RightShiftAssignContext rightShiftAssign() {
			return GetRuleContext<RightShiftAssignContext>(0);
		}
		public ITerminalNode LeftShiftAssign() { return GetToken(CPP14Parser.LeftShiftAssign, 0); }
		public ITerminalNode Equal() { return GetToken(CPP14Parser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(CPP14Parser.NotEqual, 0); }
		public ITerminalNode LessEqual() { return GetToken(CPP14Parser.LessEqual, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(CPP14Parser.GreaterEqual, 0); }
		public ITerminalNode PlusPlus() { return GetToken(CPP14Parser.PlusPlus, 0); }
		public ITerminalNode MinusMinus() { return GetToken(CPP14Parser.MinusMinus, 0); }
		public ITerminalNode Comma() { return GetToken(CPP14Parser.Comma, 0); }
		public ITerminalNode ArrowStar() { return GetToken(CPP14Parser.ArrowStar, 0); }
		public ITerminalNode Arrow() { return GetToken(CPP14Parser.Arrow, 0); }
		public ITerminalNode LeftParen() { return GetToken(CPP14Parser.LeftParen, 0); }
		public ITerminalNode RightParen() { return GetToken(CPP14Parser.RightParen, 0); }
		public TheOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_theOperator; } }
		public string RuleName { get { return "TheOperator"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterTheOperator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitTheOperator(this);
		}
	}

	[RuleVersion(0)]
	public TheOperatorContext TheOperator() {
		TheOperatorContext _localctx = new TheOperatorContext(Context, State);
		EnterRule(_localctx, 396, RULE_theOperator);
		try {
			State = 2483;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,317,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2432; Match(New);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2433; Match(Delete);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2434; Match(New);
				State = 2435; Match(LeftBracket);
				State = 2436; Match(RightBracket);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2437; Match(Delete);
				State = 2438; Match(LeftBracket);
				State = 2439; Match(RightBracket);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2440; Match(Plus);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2441; Match(Minus);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2442; Match(Star);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2443; Match(Div);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2444; Match(Mod);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2445; Match(Caret);
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 2446; Match(And);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 2447; Match(Or);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 2448; Match(Tilde);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 2449; Match(T__0);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 2450; Match(T__1);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2451; Match(Assign);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2452; Match(Less);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 2453; Match(Greater);
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 2454; Match(PlusAssign);
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 2455; Match(MinusAssign);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 2456; Match(StarAssign);
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 2457; Match(DivAssign);
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 2458; Match(ModAssign);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 2459; Match(XorAssign);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 2460; Match(AndAssign);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 2461; Match(OrAssign);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 2462; Match(LeftShift);
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 2463; RightShift();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 2464; RightShiftAssign();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 2465; Match(LeftShiftAssign);
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 2466; Match(Equal);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 2467; Match(NotEqual);
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 2468; Match(LessEqual);
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 2469; Match(GreaterEqual);
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 2470; Match(T__2);
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 2471; Match(T__3);
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 2472; Match(T__4);
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 2473; Match(T__5);
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 2474; Match(PlusPlus);
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 2475; Match(MinusMinus);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 2476; Match(Comma);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 2477; Match(ArrowStar);
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 2478; Match(Arrow);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 2479; Match(LeftParen);
				State = 2480; Match(RightParen);
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 2481; Match(LeftBracket);
				State = 2482; Match(RightBracket);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode IntegerLiteral() { return GetToken(CPP14Parser.IntegerLiteral, 0); }
		public ITerminalNode CharacterLiteral() { return GetToken(CPP14Parser.CharacterLiteral, 0); }
		public ITerminalNode FloatingLiteral() { return GetToken(CPP14Parser.FloatingLiteral, 0); }
		public StringLiteralsContext stringLiterals() {
			return GetRuleContext<StringLiteralsContext>(0);
		}
		public BooleanLiteralContext booleanLiteral() {
			return GetRuleContext<BooleanLiteralContext>(0);
		}
		public PointerLiteralContext pointerLiteral() {
			return GetRuleContext<PointerLiteralContext>(0);
		}
		public UserDefinedLiteralContext userDefinedLiteral() {
			return GetRuleContext<UserDefinedLiteralContext>(0);
		}
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public string RuleName { get { return "Literal"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext Literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 398, RULE_literal);
		try {
			State = 2492;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IntegerLiteral:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2485; Match(IntegerLiteral);
				}
				break;
			case CharacterLiteral:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2486; Match(CharacterLiteral);
				}
				break;
			case FloatingLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2487; Match(FloatingLiteral);
				}
				break;
			case StringLiteral:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2488; StringLiterals();
				}
				break;
			case False:
			case True:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2489; BooleanLiteral();
				}
				break;
			case NullPtr:
			case Null:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2490; PointerLiteral();
				}
				break;
			case UserDefinedIntegerLiteral:
			case UserDefinedFloatingLiteral:
			case UserDefinedStringLiteral:
			case UserDefinedCharacterLiteral:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2491; UserDefinedLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BooleanLiteralContext : ParserRuleContext {
		public ITerminalNode False() { return GetToken(CPP14Parser.False, 0); }
		public ITerminalNode True() { return GetToken(CPP14Parser.True, 0); }
		public BooleanLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_booleanLiteral; } }
		public string RuleName { get { return "BooleanLiteral"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterBooleanLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitBooleanLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BooleanLiteralContext BooleanLiteral() {
		BooleanLiteralContext _localctx = new BooleanLiteralContext(Context, State);
		EnterRule(_localctx, 400, RULE_booleanLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2494;
			_la = TokenStream.LA(1);
			if ( !(_la==False || _la==True) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PointerLiteralContext : ParserRuleContext {
		public ITerminalNode NullPtr() { return GetToken(CPP14Parser.NullPtr, 0); }
		public ITerminalNode Null() { return GetToken(CPP14Parser.Null, 0); }
		public PointerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pointerLiteral; } }
		public string RuleName { get { return "PointerLiteral"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterPointerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitPointerLiteral(this);
		}
	}

	[RuleVersion(0)]
	public PointerLiteralContext PointerLiteral() {
		PointerLiteralContext _localctx = new PointerLiteralContext(Context, State);
		EnterRule(_localctx, 402, RULE_pointerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2496;
			_la = TokenStream.LA(1);
			if ( !(_la==NullPtr || _la==Null) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserDefinedLiteralContext : ParserRuleContext {
		public ITerminalNode UserDefinedIntegerLiteral() { return GetToken(CPP14Parser.UserDefinedIntegerLiteral, 0); }
		public ITerminalNode UserDefinedFloatingLiteral() { return GetToken(CPP14Parser.UserDefinedFloatingLiteral, 0); }
		public ITerminalNode UserDefinedStringLiteral() { return GetToken(CPP14Parser.UserDefinedStringLiteral, 0); }
		public ITerminalNode UserDefinedCharacterLiteral() { return GetToken(CPP14Parser.UserDefinedCharacterLiteral, 0); }
		public UserDefinedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userDefinedLiteral; } }
		public string RuleName { get { return "UserDefinedLiteral"; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.EnterUserDefinedLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICPP14Listener typedListener = listener as ICPP14Listener;
			if (typedListener != null) typedListener.ExitUserDefinedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public UserDefinedLiteralContext UserDefinedLiteral() {
		UserDefinedLiteralContext _localctx = new UserDefinedLiteralContext(Context, State);
		EnterRule(_localctx, 404, RULE_userDefinedLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2498;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 142)) & ~0x3f) == 0 && ((1L << (_la - 142)) & ((1L << (UserDefinedIntegerLiteral - 142)) | (1L << (UserDefinedFloatingLiteral - 142)) | (1L << (UserDefinedStringLiteral - 142)) | (1L << (UserDefinedCharacterLiteral - 142)))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return nestedNameSpecifier_sempred((NestedNameSpecifierContext)_localctx, predIndex);
		case 10: return captureList_sempred((CaptureListContext)_localctx, predIndex);
		case 15: return postfixExpression_sempred((PostfixExpressionContext)_localctx, predIndex);
		case 26: return noPtrNewDeclarator_sempred((NoPtrNewDeclaratorContext)_localctx, predIndex);
		case 31: return pmExpression_sempred((PmExpressionContext)_localctx, predIndex);
		case 32: return multiplicativeExpression_sempred((MultiplicativeExpressionContext)_localctx, predIndex);
		case 33: return additiveExpression_sempred((AdditiveExpressionContext)_localctx, predIndex);
		case 34: return shiftExpression_sempred((ShiftExpressionContext)_localctx, predIndex);
		case 36: return relationalExpression_sempred((RelationalExpressionContext)_localctx, predIndex);
		case 37: return equalityExpression_sempred((EqualityExpressionContext)_localctx, predIndex);
		case 38: return andExpression_sempred((AndExpressionContext)_localctx, predIndex);
		case 39: return exclusiveOrExpression_sempred((ExclusiveOrExpressionContext)_localctx, predIndex);
		case 40: return inclusiveOrExpression_sempred((InclusiveOrExpressionContext)_localctx, predIndex);
		case 41: return logicalAndExpression_sempred((LogicalAndExpressionContext)_localctx, predIndex);
		case 42: return logicalOrExpression_sempred((LogicalOrExpressionContext)_localctx, predIndex);
		case 46: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 52: return statementSeq_sempred((StatementSeqContext)_localctx, predIndex);
		case 61: return declarationSeq_sempred((DeclarationSeqContext)_localctx, predIndex);
		case 89: return enumeratorList_sempred((EnumeratorListContext)_localctx, predIndex);
		case 107: return attributeSpecifierSeq_sempred((AttributeSpecifierSeqContext)_localctx, predIndex);
		case 110: return attributeList_sempred((AttributeListContext)_localctx, predIndex);
		case 116: return balancedTokenSeq_sempred((BalancedTokenSeqContext)_localctx, predIndex);
		case 118: return initDeclaratorList_sempred((InitDeclaratorListContext)_localctx, predIndex);
		case 122: return noPtrDeclarator_sempred((NoPtrDeclaratorContext)_localctx, predIndex);
		case 133: return noPtrAbstractDeclarator_sempred((NoPtrAbstractDeclaratorContext)_localctx, predIndex);
		case 135: return noPtrAbstractPackDeclarator_sempred((NoPtrAbstractPackDeclaratorContext)_localctx, predIndex);
		case 137: return parameterDeclarationList_sempred((ParameterDeclarationListContext)_localctx, predIndex);
		case 144: return initializerList_sempred((InitializerListContext)_localctx, predIndex);
		case 154: return memberDeclaratorList_sempred((MemberDeclaratorListContext)_localctx, predIndex);
		case 156: return virtSpecifierSeq_sempred((VirtSpecifierSeqContext)_localctx, predIndex);
		case 160: return baseSpecifierList_sempred((BaseSpecifierListContext)_localctx, predIndex);
		case 175: return templateParameterList_sempred((TemplateParameterListContext)_localctx, predIndex);
		case 181: return templateArgumentList_sempred((TemplateArgumentListContext)_localctx, predIndex);
		case 194: return typeIdList_sempred((TypeIdListContext)_localctx, predIndex);
		case 196: return rightShift_sempred((RightShiftContext)_localctx, predIndex);
		case 197: return rightShiftAssign_sempred((RightShiftAssignContext)_localctx, predIndex);
		}
		return true;
	}
	private bool nestedNameSpecifier_sempred(NestedNameSpecifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}
	private bool captureList_sempred(CaptureListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 1);
		}
		return true;
	}
	private bool postfixExpression_sempred(PostfixExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 3: return Precpred(Context, 19);
		case 4: return Precpred(Context, 18);
		case 5: return Precpred(Context, 17);
		case 6: return Precpred(Context, 12);
		case 7: return Precpred(Context, 11);
		case 8: return Precpred(Context, 10);
		case 9: return Precpred(Context, 9);
		case 10: return Precpred(Context, 8);
		case 11: return Precpred(Context, 7);
		}
		return true;
	}
	private bool noPtrNewDeclarator_sempred(NoPtrNewDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 1);
		}
		return true;
	}
	private bool pmExpression_sempred(PmExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 13: return Precpred(Context, 2);
		case 14: return Precpred(Context, 1);
		}
		return true;
	}
	private bool multiplicativeExpression_sempred(MultiplicativeExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return Precpred(Context, 3);
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool additiveExpression_sempred(AdditiveExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 2);
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shiftExpression_sempred(ShiftExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relationalExpression_sempred(RelationalExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 4);
		case 22: return Precpred(Context, 3);
		case 23: return Precpred(Context, 2);
		case 24: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equalityExpression_sempred(EqualityExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return Precpred(Context, 2);
		case 26: return Precpred(Context, 1);
		}
		return true;
	}
	private bool andExpression_sempred(AndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return Precpred(Context, 1);
		}
		return true;
	}
	private bool exclusiveOrExpression_sempred(ExclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return Precpred(Context, 1);
		}
		return true;
	}
	private bool inclusiveOrExpression_sempred(InclusiveOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalAndExpression_sempred(LogicalAndExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return Precpred(Context, 2);
		case 31: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logicalOrExpression_sempred(LogicalOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return Precpred(Context, 2);
		case 33: return Precpred(Context, 1);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return Precpred(Context, 1);
		}
		return true;
	}
	private bool statementSeq_sempred(StatementSeqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return Precpred(Context, 1);
		}
		return true;
	}
	private bool declarationSeq_sempred(DeclarationSeqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return Precpred(Context, 1);
		}
		return true;
	}
	private bool enumeratorList_sempred(EnumeratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributeSpecifierSeq_sempred(AttributeSpecifierSeqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return Precpred(Context, 1);
		}
		return true;
	}
	private bool attributeList_sempred(AttributeListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return Precpred(Context, 3);
		case 40: return Precpred(Context, 1);
		}
		return true;
	}
	private bool balancedTokenSeq_sempred(BalancedTokenSeqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initDeclaratorList_sempred(InitDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return Precpred(Context, 1);
		}
		return true;
	}
	private bool noPtrDeclarator_sempred(NoPtrDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return Precpred(Context, 3);
		case 44: return Precpred(Context, 2);
		}
		return true;
	}
	private bool noPtrAbstractDeclarator_sempred(NoPtrAbstractDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 45: return Precpred(Context, 5);
		case 46: return Precpred(Context, 3);
		}
		return true;
	}
	private bool noPtrAbstractPackDeclarator_sempred(NoPtrAbstractPackDeclaratorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return Precpred(Context, 3);
		case 48: return Precpred(Context, 2);
		}
		return true;
	}
	private bool parameterDeclarationList_sempred(ParameterDeclarationListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 49: return Precpred(Context, 1);
		}
		return true;
	}
	private bool initializerList_sempred(InitializerListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return Precpred(Context, 1);
		}
		return true;
	}
	private bool memberDeclaratorList_sempred(MemberDeclaratorListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 51: return Precpred(Context, 1);
		}
		return true;
	}
	private bool virtSpecifierSeq_sempred(VirtSpecifierSeqContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return Precpred(Context, 1);
		}
		return true;
	}
	private bool baseSpecifierList_sempred(BaseSpecifierListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateParameterList_sempred(TemplateParameterListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return Precpred(Context, 1);
		}
		return true;
	}
	private bool templateArgumentList_sempred(TemplateArgumentListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 55: return Precpred(Context, 1);
		}
		return true;
	}
	private bool typeIdList_sempred(TypeIdListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return Precpred(Context, 1);
		}
		return true;
	}
	private bool rightShift_sempred(RightShiftContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}
	private bool rightShiftAssign_sempred(RightShiftAssignContext _localctx, int predIndex) {
		switch (predIndex) {
		case 58: return (_localctx.first!=null?_localctx.first.TokenIndex:0) + 1 == (_localctx.second!=null?_localctx.second.TokenIndex:0);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x97', '\x9C7', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x4', 
		'j', '\t', 'j', '\x4', 'k', '\t', 'k', '\x4', 'l', '\t', 'l', '\x4', 'm', 
		'\t', 'm', '\x4', 'n', '\t', 'n', '\x4', 'o', '\t', 'o', '\x4', 'p', '\t', 
		'p', '\x4', 'q', '\t', 'q', '\x4', 'r', '\t', 'r', '\x4', 's', '\t', 's', 
		'\x4', 't', '\t', 't', '\x4', 'u', '\t', 'u', '\x4', 'v', '\t', 'v', '\x4', 
		'w', '\t', 'w', '\x4', 'x', '\t', 'x', '\x4', 'y', '\t', 'y', '\x4', 'z', 
		'\t', 'z', '\x4', '{', '\t', '{', '\x4', '|', '\t', '|', '\x4', '}', '\t', 
		'}', '\x4', '~', '\t', '~', '\x4', '\x7F', '\t', '\x7F', '\x4', '\x80', 
		'\t', '\x80', '\x4', '\x81', '\t', '\x81', '\x4', '\x82', '\t', '\x82', 
		'\x4', '\x83', '\t', '\x83', '\x4', '\x84', '\t', '\x84', '\x4', '\x85', 
		'\t', '\x85', '\x4', '\x86', '\t', '\x86', '\x4', '\x87', '\t', '\x87', 
		'\x4', '\x88', '\t', '\x88', '\x4', '\x89', '\t', '\x89', '\x4', '\x8A', 
		'\t', '\x8A', '\x4', '\x8B', '\t', '\x8B', '\x4', '\x8C', '\t', '\x8C', 
		'\x4', '\x8D', '\t', '\x8D', '\x4', '\x8E', '\t', '\x8E', '\x4', '\x8F', 
		'\t', '\x8F', '\x4', '\x90', '\t', '\x90', '\x4', '\x91', '\t', '\x91', 
		'\x4', '\x92', '\t', '\x92', '\x4', '\x93', '\t', '\x93', '\x4', '\x94', 
		'\t', '\x94', '\x4', '\x95', '\t', '\x95', '\x4', '\x96', '\t', '\x96', 
		'\x4', '\x97', '\t', '\x97', '\x4', '\x98', '\t', '\x98', '\x4', '\x99', 
		'\t', '\x99', '\x4', '\x9A', '\t', '\x9A', '\x4', '\x9B', '\t', '\x9B', 
		'\x4', '\x9C', '\t', '\x9C', '\x4', '\x9D', '\t', '\x9D', '\x4', '\x9E', 
		'\t', '\x9E', '\x4', '\x9F', '\t', '\x9F', '\x4', '\xA0', '\t', '\xA0', 
		'\x4', '\xA1', '\t', '\xA1', '\x4', '\xA2', '\t', '\xA2', '\x4', '\xA3', 
		'\t', '\xA3', '\x4', '\xA4', '\t', '\xA4', '\x4', '\xA5', '\t', '\xA5', 
		'\x4', '\xA6', '\t', '\xA6', '\x4', '\xA7', '\t', '\xA7', '\x4', '\xA8', 
		'\t', '\xA8', '\x4', '\xA9', '\t', '\xA9', '\x4', '\xAA', '\t', '\xAA', 
		'\x4', '\xAB', '\t', '\xAB', '\x4', '\xAC', '\t', '\xAC', '\x4', '\xAD', 
		'\t', '\xAD', '\x4', '\xAE', '\t', '\xAE', '\x4', '\xAF', '\t', '\xAF', 
		'\x4', '\xB0', '\t', '\xB0', '\x4', '\xB1', '\t', '\xB1', '\x4', '\xB2', 
		'\t', '\xB2', '\x4', '\xB3', '\t', '\xB3', '\x4', '\xB4', '\t', '\xB4', 
		'\x4', '\xB5', '\t', '\xB5', '\x4', '\xB6', '\t', '\xB6', '\x4', '\xB7', 
		'\t', '\xB7', '\x4', '\xB8', '\t', '\xB8', '\x4', '\xB9', '\t', '\xB9', 
		'\x4', '\xBA', '\t', '\xBA', '\x4', '\xBB', '\t', '\xBB', '\x4', '\xBC', 
		'\t', '\xBC', '\x4', '\xBD', '\t', '\xBD', '\x4', '\xBE', '\t', '\xBE', 
		'\x4', '\xBF', '\t', '\xBF', '\x4', '\xC0', '\t', '\xC0', '\x4', '\xC1', 
		'\t', '\xC1', '\x4', '\xC2', '\t', '\xC2', '\x4', '\xC3', '\t', '\xC3', 
		'\x4', '\xC4', '\t', '\xC4', '\x4', '\xC5', '\t', '\xC5', '\x4', '\xC6', 
		'\t', '\xC6', '\x4', '\xC7', '\t', '\xC7', '\x4', '\xC8', '\t', '\xC8', 
		'\x4', '\xC9', '\t', '\xC9', '\x4', '\xCA', '\t', '\xCA', '\x4', '\xCB', 
		'\t', '\xCB', '\x4', '\xCC', '\t', '\xCC', '\x3', '\x2', '\x5', '\x2', 
		'\x19A', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x5', '\x3', '\x1A6', '\n', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x5', '\x4', '\x1AA', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x1B5', '\n', '\x5', 
		'\x3', '\x6', '\x3', '\x6', '\x5', '\x6', '\x1B9', '\n', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x1C8', '\n', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x1CF', '\n', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', '\x1D4', '\n', 
		'\a', '\f', '\a', '\xE', '\a', '\x1D7', '\v', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x1DB', '\n', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', '\x1E1', '\n', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x5', '\n', '\x1EB', '\n', '\n', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x1F2', '\n', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x1F8', 
		'\n', '\f', '\a', '\f', '\x1FA', '\n', '\f', '\f', '\f', '\xE', '\f', 
		'\x1FD', '\v', '\f', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\x201', '\n', 
		'\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', 
		'\x207', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', 
		'\xF', '\x3', '\xF', '\x5', '\xF', '\x20E', '\n', '\xF', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x5', '\x10', '\x214', '\n', 
		'\x10', '\x3', '\x10', '\x5', '\x10', '\x217', '\n', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\x21A', '\n', '\x10', '\x3', '\x10', '\x5', '\x10', '\x21D', 
		'\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x224', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x22B', 
		'\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x5', '\x11', '\x25F', '\n', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x5', '\x11', '\x26E', '\n', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', '\x11', '\x274', '\n', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x5', 
		'\x11', '\x27A', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\a', '\x11', '\x287', '\n', 
		'\x11', '\f', '\x11', '\xE', '\x11', '\x28A', '\v', '\x11', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x15', '\x5', '\x15', '\x293', '\n', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', 
		'\x15', '\x3', '\x15', '\x5', '\x15', '\x2A2', '\n', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x5', '\x15', '\x2A8', '\n', 
		'\x15', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\x5', '\x16', '\x2C6', 
		'\n', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x18', '\x5', '\x18', 
		'\x2CB', '\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2CF', 
		'\n', '\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2D3', '\n', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x2D6', '\n', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x5', '\x18', '\x2DA', '\n', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x5', '\x18', '\x2E0', '\n', '\x18', 
		'\x5', '\x18', '\x2E2', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x2EA', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x2EE', '\n', 
		'\x1B', '\x3', '\x1B', '\x5', '\x1B', '\x2F1', '\n', '\x1B', '\x3', '\x1C', 
		'\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x5', '\x1C', 
		'\x2F8', '\n', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x5', '\x1C', '\x2FF', '\n', '\x1C', '\a', '\x1C', 
		'\x301', '\n', '\x1C', '\f', '\x1C', '\xE', '\x1C', '\x304', '\v', '\x1C', 
		'\x3', '\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x308', '\n', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x30C', '\n', '\x1D', '\x3', '\x1E', 
		'\x5', '\x1E', '\x30F', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x5', '\x1E', '\x314', '\n', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x5', '\x1E', '\x31A', '\n', '\x1E', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x5', 
		' ', '\x327', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', 
		'\x332', '\n', '!', '\f', '!', '\xE', '!', '\x335', '\v', '!', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\a', '\"', '\x343', '\n', '\"', '\f', '\"', '\xE', '\"', '\x346', 
		'\v', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '#', '\a', '#', '\x351', '\n', 
		'#', '\f', '#', '\xE', '#', '\x354', '\v', '#', '\x3', '$', '\x3', '$', 
		'\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\a', '$', 
		'\x35D', '\n', '$', '\f', '$', '\xE', '$', '\x360', '\v', '$', '\x3', 
		'%', '\x3', '%', '\x5', '%', '\x364', '\n', '%', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', 
		'\x3', '&', '\a', '&', '\x375', '\n', '&', '\f', '&', '\xE', '&', '\x378', 
		'\v', '&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', 
		'\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\a', '\'', 
		'\x383', '\n', '\'', '\f', '\'', '\xE', '\'', '\x386', '\v', '\'', '\x3', 
		'(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', 
		'(', '\x38E', '\n', '(', '\f', '(', '\xE', '(', '\x391', '\v', '(', '\x3', 
		')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\x3', ')', '\a', 
		')', '\x399', '\n', ')', '\f', ')', '\xE', ')', '\x39C', '\v', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\a', 
		'*', '\x3A4', '\n', '*', '\f', '*', '\xE', '*', '\x3A7', '\v', '*', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', '+', '\a', '+', '\x3B2', '\n', '+', '\f', '+', 
		'\xE', '+', '\x3B5', '\v', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', 
		',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', ',', '\a', 
		',', '\x3C0', '\n', ',', '\f', ',', '\xE', ',', '\x3C3', '\v', ',', '\x3', 
		'-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x3CC', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '.', 
		'\x3', '.', '\x3', '.', '\x3', '.', '\x5', '.', '\x3D4', '\n', '.', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', '\x3E1', 
		'\n', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\x3', '\x30', '\x3', '\x30', '\a', '\x30', '\x3E9', '\n', '\x30', '\f', 
		'\x30', '\xE', '\x30', '\x3EC', '\v', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x5', '\x32', '\x3F2', '\n', '\x32', '\x3', 
		'\x32', '\x3', '\x32', '\x5', '\x32', '\x3F6', '\n', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x5', '\x32', '\x3FA', '\n', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x3FE', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x5', '\x32', '\x402', '\n', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', 
		'\x32', '\x5', '\x32', '\x407', '\n', '\x32', '\x3', '\x32', '\x5', '\x32', 
		'\x40A', '\n', '\x32', '\x3', '\x33', '\x5', '\x33', '\x40D', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', 
		'\x413', '\n', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x3', 
		'\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x41B', '\n', '\x33', 
		'\x3', '\x33', '\x3', '\x33', '\x3', '\x33', '\x5', '\x33', '\x420', '\n', 
		'\x33', '\x3', '\x34', '\x5', '\x34', '\x423', '\n', '\x34', '\x3', '\x34', 
		'\x3', '\x34', '\x3', '\x35', '\x3', '\x35', '\x5', '\x35', '\x429', '\n', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\x3', '\x36', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\a', '\x36', '\x432', '\n', '\x36', 
		'\f', '\x36', '\xE', '\x36', '\x435', '\v', '\x36', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x3', '\x37', '\x3', '\x37', '\x3', '\x37', '\x5', '\x37', '\x44B', 
		'\n', '\x37', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x44F', '\n', 
		'\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x5', '\x38', '\x457', '\n', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\x3', '\x38', '\x5', '\x38', '\x45D', '\n', 
		'\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x471', 
		'\n', '\x39', '\x3', '\x39', '\x3', '\x39', '\x5', '\x39', '\x475', '\n', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x5', '\x39', '\x482', '\n', '\x39', '\x3', ':', 
		'\x3', ':', '\x5', ':', '\x486', '\n', ':', '\x3', ';', '\x5', ';', '\x489', 
		'\n', ';', '\x3', ';', '\x3', ';', '\x3', ';', '\x3', '<', '\x3', '<', 
		'\x5', '<', '\x490', '\n', '<', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', 
		'=', '\x3', '=', '\x3', '=', '\x5', '=', '\x498', '\n', '=', '\x3', '=', 
		'\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', '\x3', '=', 
		'\x3', '=', '\x5', '=', '\x4A2', '\n', '=', '\x3', '>', '\x3', '>', '\x3', 
		'?', '\x3', '?', '\x3', '?', '\x3', '?', '\x3', '?', '\a', '?', '\x4AB', 
		'\n', '?', '\f', '?', '\xE', '?', '\x4AE', '\v', '?', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', 
		'@', '\x3', '@', '\x5', '@', '\x4B9', '\n', '@', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', 
		'\x41', '\x3', '\x41', '\x5', '\x41', '\x4C3', '\n', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x5', '\x42', '\x4C8', '\n', '\x42', '\x3', 
		'\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x43', '\x5', 
		'\x43', '\x4CF', '\n', '\x43', '\x3', '\x43', '\x5', '\x43', '\x4D2', 
		'\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', '\x43', 
		'\x4D7', '\n', '\x43', '\x3', '\x43', '\x3', '\x43', '\x3', '\x43', '\x5', 
		'\x43', '\x4DC', '\n', '\x43', '\x3', '\x44', '\x6', '\x44', '\x4DF', 
		'\n', '\x44', '\r', '\x44', '\xE', '\x44', '\x4E0', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', 'G', '\x3', 
		'G', '\x3', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 'H', '\x3', 
		'H', '\x3', 'H', '\x5', 'H', '\x4F6', '\n', 'H', '\x3', 'I', '\x3', 'I', 
		'\x5', 'I', '\x4FA', '\n', 'I', '\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 
		'I', '\x4FF', '\n', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'K', '\x3', 'K', 
		'\x3', 'L', '\x3', 'L', '\x3', 'M', '\x3', 'M', '\x3', 'M', '\x5', 'M', 
		'\x50A', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x3', 'N', '\x5', 
		'N', '\x510', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x514', 
		'\n', 'O', '\x3', 'O', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x519', '\n', 
		'O', '\x3', 'P', '\x3', 'P', '\x5', 'P', '\x51D', '\n', 'P', '\x3', 'P', 
		'\x3', 'P', '\x3', 'P', '\x5', 'P', '\x522', '\n', 'P', '\x3', 'Q', '\x5', 
		'Q', '\x525', '\n', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', 
		'\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x5', 'Q', '\x53B', '\n', 
		'Q', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x3', 'R', '\x5', 'R', '\x541', 
		'\n', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', '\x54C', '\n', 
		'S', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x550', '\n', 'T', '\x3', 'T', 
		'\x5', 'T', '\x553', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x55D', 
		'\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', 
		'\x563', '\n', 'T', '\x3', 'T', '\x5', 'T', '\x566', '\n', 'T', '\x3', 
		'U', '\x3', 'U', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x56D', 
		'\n', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x577', '\n', 'V', '\x3', 
		'W', '\x3', 'W', '\x5', 'W', '\x57B', '\n', 'W', '\x3', 'W', '\x5', 'W', 
		'\x57E', '\n', 'W', '\x3', 'W', '\x5', 'W', '\x581', '\n', 'W', '\x3', 
		'W', '\x3', 'W', '\x5', 'W', '\x585', '\n', 'W', '\x3', 'W', '\x3', 'W', 
		'\x3', 'W', '\x5', 'W', '\x58A', '\n', 'W', '\x5', 'W', '\x58C', '\n', 
		'W', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x590', '\n', 'X', '\x3', 'X', 
		'\x3', 'X', '\x5', 'X', '\x594', '\n', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x3', 'Y', '\x5', 'Y', '\x59D', 
		'\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', '[', '\x3', '[', 
		'\x3', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\a', '[', '\x5A8', '\n', 
		'[', '\f', '[', '\xE', '[', '\x5AB', '\v', '[', '\x3', '\\', '\x3', '\\', 
		'\x3', '\\', '\x3', '\\', '\x3', '\\', '\x5', '\\', '\x5B2', '\n', '\\', 
		'\x3', ']', '\x3', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x5B8', '\n', 
		'^', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', '\x5', '`', '\x5BE', 
		'\n', '`', '\x3', '\x61', '\x3', '\x61', '\x5', '\x61', '\x5C2', '\n', 
		'\x61', '\x3', '\x62', '\x5', '\x62', '\x5C5', '\n', '\x62', '\x3', '\x62', 
		'\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x62', 
		'\x3', '\x63', '\x5', '\x63', '\x5CE', '\n', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x64', '\x5', '\x64', '\x5D7', '\n', '\x64', '\x3', '\x64', '\x3', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x3', '\x64', '\x3', '\x65', '\x5', '\x65', 
		'\x5DF', '\n', '\x65', '\x3', '\x66', '\x3', '\x66', '\x3', 'g', '\x3', 
		'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'h', '\x5', 
		'h', '\x5EA', '\n', 'h', '\x3', 'h', '\x3', 'h', '\x3', 'i', '\x3', 'i', 
		'\x5', 'i', '\x5F0', '\n', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x3', 'i', '\x5', 
		'i', '\x5FB', '\n', 'i', '\x3', 'j', '\x5', 'j', '\x5FE', '\n', 'j', '\x3', 
		'j', '\x3', 'j', '\x3', 'j', '\x5', 'j', '\x603', '\n', 'j', '\x3', 'j', 
		'\x3', 'j', '\x3', 'j', '\x3', 'k', '\x3', 'k', '\x3', 'k', '\x3', 'k', 
		'\x3', 'k', '\x3', 'k', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', 
		'\x5', 'l', '\x612', '\n', 'l', '\x3', 'l', '\x3', 'l', '\x3', 'l', '\x3', 
		'l', '\x5', 'l', '\x618', '\n', 'l', '\x3', 'm', '\x3', 'm', '\x3', 'm', 
		'\x3', 'm', '\x3', 'm', '\a', 'm', '\x61F', '\n', 'm', '\f', 'm', '\xE', 
		'm', '\x622', '\v', 'm', '\x3', 'n', '\x3', 'n', '\x3', 'n', '\x3', 'n', 
		'\x3', 'n', '\x3', 'n', '\x3', 'n', '\x5', 'n', '\x62B', '\n', 'n', '\x3', 
		'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\x631', '\n', 'o', 
		'\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', '\x3', 'o', 
		'\x5', 'o', '\x639', '\n', 'o', '\x3', 'o', '\x3', 'o', '\x5', 'o', '\x63D', 
		'\n', 'o', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x641', '\n', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x5', 'p', '\x646', '\n', 'p', '\x3', 'p', 
		'\x3', 'p', '\x3', 'p', '\x5', 'p', '\x64B', '\n', 'p', '\x3', 'p', '\x3', 
		'p', '\x3', 'p', '\x3', 'p', '\x3', 'p', '\a', 'p', '\x652', '\n', 'p', 
		'\f', 'p', '\xE', 'p', '\x655', '\v', 'p', '\x3', 'q', '\x3', 'q', '\x5', 
		'q', '\x659', '\n', 'q', '\x3', 'r', '\x3', 'r', '\x5', 'r', '\x65D', 
		'\n', 'r', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 's', '\x3', 't', 
		'\x3', 't', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'u', '\x3', 'v', 
		'\x3', 'v', '\x5', 'v', '\x66B', '\n', 'v', '\x3', 'v', '\x3', 'v', '\a', 
		'v', '\x66F', '\n', 'v', '\f', 'v', '\xE', 'v', '\x672', '\v', 'v', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 'w', '\x3', 
		'w', '\x6', 'w', '\x681', '\n', 'w', '\r', 'w', '\xE', 'w', '\x682', '\x5', 
		'w', '\x685', '\n', 'w', '\x3', 'x', '\x3', 'x', '\x3', 'x', '\x3', 'x', 
		'\x3', 'x', '\x3', 'x', '\a', 'x', '\x68D', '\n', 'x', '\f', 'x', '\xE', 
		'x', '\x690', '\v', 'x', '\x3', 'y', '\x3', 'y', '\x5', 'y', '\x694', 
		'\n', 'y', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', '\x3', 'z', 
		'\x5', 'z', '\x69B', '\n', 'z', '\x3', '{', '\x3', '{', '\x3', '{', '\x3', 
		'{', '\x5', '{', '\x6A1', '\n', '{', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x5', '|', '\x6A6', '\n', '|', '\x3', '|', '\x3', '|', '\x3', '|', '\x3', 
		'|', '\x5', '|', '\x6AC', '\n', '|', '\x3', '|', '\x3', '|', '\x3', '|', 
		'\x3', '|', '\x3', '|', '\x5', '|', '\x6B3', '\n', '|', '\x3', '|', '\x3', 
		'|', '\x5', '|', '\x6B7', '\n', '|', '\a', '|', '\x6B9', '\n', '|', '\f', 
		'|', '\xE', '|', '\x6BC', '\v', '|', '\x3', '}', '\x3', '}', '\x3', '}', 
		'\x3', '}', '\x5', '}', '\x6C2', '\n', '}', '\x3', '}', '\x5', '}', '\x6C5', 
		'\n', '}', '\x3', '}', '\x5', '}', '\x6C8', '\n', '}', '\x3', '}', '\x5', 
		'}', '\x6CB', '\n', '}', '\x3', '~', '\x3', '~', '\x3', '~', '\x5', '~', 
		'\x6D0', '\n', '~', '\x3', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x6D4', 
		'\n', '\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x6D7', '\n', '\x7F', '\x3', 
		'\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x6DB', '\n', '\x7F', '\x3', '\x7F', 
		'\x3', '\x7F', '\x5', '\x7F', '\x6DF', '\n', '\x7F', '\x3', '\x7F', '\x3', 
		'\x7F', '\x3', '\x7F', '\x5', '\x7F', '\x6E4', '\n', '\x7F', '\x3', '\x7F', 
		'\x5', '\x7F', '\x6E7', '\n', '\x7F', '\x5', '\x7F', '\x6E9', '\n', '\x7F', 
		'\x3', '\x80', '\x3', '\x80', '\x5', '\x80', '\x6ED', '\n', '\x80', '\x3', 
		'\x81', '\x3', '\x81', '\x3', '\x82', '\x3', '\x82', '\x3', '\x83', '\x5', 
		'\x83', '\x6F4', '\n', '\x83', '\x3', '\x83', '\x3', '\x83', '\x3', '\x84', 
		'\x3', '\x84', '\x5', '\x84', '\x6FA', '\n', '\x84', '\x3', '\x85', '\x3', 
		'\x85', '\x5', '\x85', '\x6FE', '\n', '\x85', '\x3', '\x85', '\x3', '\x85', 
		'\x3', '\x85', '\x3', '\x85', '\x5', '\x85', '\x704', '\n', '\x85', '\x3', 
		'\x86', '\x3', '\x86', '\x3', '\x86', '\x5', '\x86', '\x709', '\n', '\x86', 
		'\x5', '\x86', '\x70B', '\n', '\x86', '\x3', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x5', '\x87', '\x711', '\n', '\x87', '\x3', '\x87', 
		'\x3', '\x87', '\x5', '\x87', '\x715', '\n', '\x87', '\x3', '\x87', '\x3', 
		'\x87', '\x3', '\x87', '\x3', '\x87', '\x5', '\x87', '\x71B', '\n', '\x87', 
		'\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', '\x3', '\x87', 
		'\x5', '\x87', '\x722', '\n', '\x87', '\x3', '\x87', '\x3', '\x87', '\x5', 
		'\x87', '\x726', '\n', '\x87', '\a', '\x87', '\x728', '\n', '\x87', '\f', 
		'\x87', '\xE', '\x87', '\x72B', '\v', '\x87', '\x3', '\x88', '\x3', '\x88', 
		'\x3', '\x88', '\x3', '\x88', '\x5', '\x88', '\x731', '\n', '\x88', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', '\x89', '\x3', 
		'\x89', '\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\x73B', '\n', '\x89', 
		'\x3', '\x89', '\x3', '\x89', '\x5', '\x89', '\x73F', '\n', '\x89', '\a', 
		'\x89', '\x741', '\n', '\x89', '\f', '\x89', '\xE', '\x89', '\x744', '\v', 
		'\x89', '\x3', '\x8A', '\x5', '\x8A', '\x747', '\n', '\x8A', '\x3', '\x8A', 
		'\x5', '\x8A', '\x74A', '\n', '\x8A', '\x3', '\x8A', '\x3', '\x8A', '\x3', 
		'\x8A', '\x3', '\x8A', '\x5', '\x8A', '\x750', '\n', '\x8A', '\x3', '\x8B', 
		'\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', '\x3', '\x8B', 
		'\a', '\x8B', '\x758', '\n', '\x8B', '\f', '\x8B', '\xE', '\x8B', '\x75B', 
		'\v', '\x8B', '\x3', '\x8C', '\x5', '\x8C', '\x75E', '\n', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x5', '\x8C', '\x764', 
		'\n', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x3', '\x8C', '\x3', '\x8C', '\x5', '\x8C', '\x76C', '\n', '\x8C', '\x3', 
		'\x8C', '\x3', '\x8C', '\x5', '\x8C', '\x770', '\n', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\x773', '\n', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x5', 
		'\x8C', '\x777', '\n', '\x8C', '\x3', '\x8C', '\x3', '\x8C', '\x3', '\x8C', 
		'\x5', '\x8C', '\x77C', '\n', '\x8C', '\x3', '\x8D', '\x5', '\x8D', '\x77F', 
		'\n', '\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x782', '\n', '\x8D', '\x3', 
		'\x8D', '\x3', '\x8D', '\x5', '\x8D', '\x786', '\n', '\x8D', '\x3', '\x8D', 
		'\x3', '\x8D', '\x3', '\x8E', '\x5', '\x8E', '\x78B', '\n', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x3', 
		'\x8E', '\x3', '\x8E', '\x3', '\x8E', '\x5', '\x8E', '\x795', '\n', '\x8E', 
		'\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', '\x3', '\x8F', 
		'\x5', '\x8F', '\x79C', '\n', '\x8F', '\x3', '\x90', '\x3', '\x90', '\x3', 
		'\x90', '\x5', '\x90', '\x7A1', '\n', '\x90', '\x3', '\x91', '\x3', '\x91', 
		'\x5', '\x91', '\x7A5', '\n', '\x91', '\x3', '\x92', '\x3', '\x92', '\x3', 
		'\x92', '\x5', '\x92', '\x7AA', '\n', '\x92', '\x3', '\x92', '\x3', '\x92', 
		'\x3', '\x92', '\x3', '\x92', '\x5', '\x92', '\x7B0', '\n', '\x92', '\a', 
		'\x92', '\x7B2', '\n', '\x92', '\f', '\x92', '\xE', '\x92', '\x7B5', '\v', 
		'\x92', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x5', '\x93', '\x7BA', 
		'\n', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', '\x3', '\x93', 
		'\x5', '\x93', '\x7C0', '\n', '\x93', '\x3', '\x94', '\x3', '\x94', '\x5', 
		'\x94', '\x7C4', '\n', '\x94', '\x3', '\x95', '\x3', '\x95', '\x3', '\x95', 
		'\x5', '\x95', '\x7C9', '\n', '\x95', '\x3', '\x95', '\x3', '\x95', '\x3', 
		'\x96', '\x3', '\x96', '\x5', '\x96', '\x7CF', '\n', '\x96', '\x3', '\x96', 
		'\x3', '\x96', '\x5', '\x96', '\x7D3', '\n', '\x96', '\x3', '\x96', '\x5', 
		'\x96', '\x7D6', '\n', '\x96', '\x3', '\x96', '\x3', '\x96', '\x5', '\x96', 
		'\x7DA', '\n', '\x96', '\x3', '\x96', '\x5', '\x96', '\x7DD', '\n', '\x96', 
		'\x5', '\x96', '\x7DF', '\n', '\x96', '\x3', '\x97', '\x5', '\x97', '\x7E2', 
		'\n', '\x97', '\x3', '\x97', '\x3', '\x97', '\x3', '\x98', '\x3', '\x98', 
		'\x3', '\x99', '\x3', '\x99', '\x3', '\x9A', '\x3', '\x9A', '\x5', '\x9A', 
		'\x7EC', '\n', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x3', '\x9A', '\x5', 
		'\x9A', '\x7F1', '\n', '\x9A', '\x5', '\x9A', '\x7F3', '\n', '\x9A', '\x3', 
		'\x9B', '\x5', '\x9B', '\x7F6', '\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', 
		'\x7F9', '\n', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x7FC', '\n', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', '\x3', '\x9B', 
		'\x3', '\x9B', '\x3', '\x9B', '\x5', '\x9B', '\x805', '\n', '\x9B', '\x3', 
		'\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', '\x9C', '\x3', 
		'\x9C', '\a', '\x9C', '\x80D', '\n', '\x9C', '\f', '\x9C', '\xE', '\x9C', 
		'\x810', '\v', '\x9C', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x814', 
		'\n', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x817', '\n', '\x9D', '\x3', 
		'\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x81B', '\n', '\x9D', '\x3', '\x9D', 
		'\x5', '\x9D', '\x81E', '\n', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x821', 
		'\n', '\x9D', '\x3', '\x9D', '\x3', '\x9D', '\x5', '\x9D', '\x825', '\n', 
		'\x9D', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', '\x9E', '\x3', 
		'\x9E', '\a', '\x9E', '\x82C', '\n', '\x9E', '\f', '\x9E', '\xE', '\x9E', 
		'\x82F', '\v', '\x9E', '\x3', '\x9F', '\x3', '\x9F', '\x3', '\xA0', '\x3', 
		'\xA0', '\x3', '\xA0', '\x3', '\xA0', '\x3', '\xA1', '\x3', '\xA1', '\x3', 
		'\xA1', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x5', '\xA2', '\x83D', 
		'\n', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', '\x3', '\xA2', 
		'\x5', '\xA2', '\x843', '\n', '\xA2', '\a', '\xA2', '\x845', '\n', '\xA2', 
		'\f', '\xA2', '\xE', '\xA2', '\x848', '\v', '\xA2', '\x3', '\xA3', '\x5', 
		'\xA3', '\x84B', '\n', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', 
		'\x84F', '\n', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\x853', 
		'\n', '\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\x857', '\n', 
		'\xA3', '\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\x85B', '\n', '\xA3', 
		'\x3', '\xA3', '\x3', '\xA3', '\x5', '\xA3', '\x85F', '\n', '\xA3', '\x3', 
		'\xA4', '\x5', '\xA4', '\x862', '\n', '\xA4', '\x3', '\xA4', '\x3', '\xA4', 
		'\x5', '\xA4', '\x866', '\n', '\xA4', '\x3', '\xA5', '\x3', '\xA5', '\x3', 
		'\xA6', '\x3', '\xA6', '\x3', '\xA7', '\x3', '\xA7', '\x3', '\xA7', '\x3', 
		'\xA8', '\x3', '\xA8', '\x5', '\xA8', '\x871', '\n', '\xA8', '\x3', '\xA9', 
		'\x3', '\xA9', '\x5', '\xA9', '\x875', '\n', '\xA9', '\x3', '\xAA', '\x3', 
		'\xAA', '\x3', '\xAA', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x87C', 
		'\n', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x880', '\n', 
		'\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x3', '\xAB', '\x5', '\xAB', '\x885', 
		'\n', '\xAB', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x5', '\xAC', 
		'\x88A', '\n', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', '\xAC', '\x3', 
		'\xAC', '\x3', '\xAC', '\x5', '\xAC', '\x891', '\n', '\xAC', '\x3', '\xAD', 
		'\x3', '\xAD', '\x5', '\xAD', '\x895', '\n', '\xAD', '\x3', '\xAE', '\x3', 
		'\xAE', '\x3', '\xAE', '\x3', '\xAF', '\x3', '\xAF', '\x3', '\xAF', '\x3', 
		'\xAF', '\x3', '\xAF', '\x5', '\xAF', '\x89F', '\n', '\xAF', '\x3', '\xB0', 
		'\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', '\x3', '\xB0', 
		'\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', '\x3', '\xB1', 
		'\x3', '\xB1', '\a', '\xB1', '\x8AD', '\n', '\xB1', '\f', '\xB1', '\xE', 
		'\xB1', '\x8B0', '\v', '\xB1', '\x3', '\xB2', '\x3', '\xB2', '\x5', '\xB2', 
		'\x8B4', '\n', '\xB2', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8B8', 
		'\n', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8BB', '\n', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8BF', '\n', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8C5', '\n', 
		'\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8C8', '\n', '\xB3', '\x3', '\xB3', 
		'\x3', '\xB3', '\x5', '\xB3', '\x8CC', '\n', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8D6', '\n', '\xB3', '\x3', '\xB3', 
		'\x5', '\xB3', '\x8D9', '\n', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', 
		'\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', '\x8E1', 
		'\n', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x3', '\xB3', '\x5', '\xB3', 
		'\x8E6', '\n', '\xB3', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x5', 
		'\xB4', '\x8EB', '\n', '\xB4', '\x3', '\xB4', '\x3', '\xB4', '\x3', '\xB5', 
		'\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x5', '\xB5', '\x8F3', '\n', 
		'\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', '\xB5', '\x3', 
		'\xB5', '\x5', '\xB5', '\x8FA', '\n', '\xB5', '\x3', '\xB5', '\x3', '\xB5', 
		'\x5', '\xB5', '\x8FE', '\n', '\xB5', '\x3', '\xB6', '\x3', '\xB6', '\x3', 
		'\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', '\x905', '\n', '\xB7', 
		'\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x3', '\xB7', '\x5', '\xB7', 
		'\x90B', '\n', '\xB7', '\a', '\xB7', '\x90D', '\n', '\xB7', '\f', '\xB7', 
		'\xE', '\xB7', '\x910', '\v', '\xB7', '\x3', '\xB8', '\x3', '\xB8', '\x3', 
		'\xB8', '\x5', '\xB8', '\x915', '\n', '\xB8', '\x3', '\xB9', '\x3', '\xB9', 
		'\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x3', '\xB9', 
		'\x5', '\xB9', '\x91E', '\n', '\xB9', '\x3', '\xB9', '\x3', '\xB9', '\x5', 
		'\xB9', '\x922', '\n', '\xB9', '\x3', '\xBA', '\x5', '\xBA', '\x925', 
		'\n', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBA', '\x3', '\xBB', 
		'\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBB', '\x3', '\xBC', 
		'\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBC', '\x3', '\xBD', '\x3', '\xBD', 
		'\x5', '\xBD', '\x935', '\n', '\xBD', '\x3', '\xBD', '\x3', '\xBD', '\x3', 
		'\xBD', '\x3', '\xBE', '\x3', '\xBE', '\x5', '\xBE', '\x93C', '\n', '\xBE', 
		'\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', '\x3', '\xBF', 
		'\x3', '\xBF', '\x3', '\xC0', '\x5', '\xC0', '\x945', '\n', '\xC0', '\x3', 
		'\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x94B', 
		'\n', '\xC0', '\x3', '\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x94F', '\n', 
		'\xC0', '\x3', '\xC0', '\x5', '\xC0', '\x952', '\n', '\xC0', '\x3', '\xC1', 
		'\x3', '\xC1', '\x5', '\xC1', '\x956', '\n', '\xC1', '\x3', '\xC2', '\x3', 
		'\xC2', '\x5', '\xC2', '\x95A', '\n', '\xC2', '\x3', '\xC3', '\x3', '\xC3', 
		'\x3', '\xC3', '\x5', '\xC3', '\x95F', '\n', '\xC3', '\x3', '\xC3', '\x3', 
		'\xC3', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x5', '\xC4', '\x966', 
		'\n', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', '\x3', '\xC4', 
		'\x5', '\xC4', '\x96C', '\n', '\xC4', '\a', '\xC4', '\x96E', '\n', '\xC4', 
		'\f', '\xC4', '\xE', '\xC4', '\x971', '\v', '\xC4', '\x3', '\xC5', '\x3', 
		'\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x3', '\xC5', '\x5', 
		'\xC5', '\x979', '\n', '\xC5', '\x3', '\xC6', '\x3', '\xC6', '\x3', '\xC6', 
		'\x3', '\xC6', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', '\x3', '\xC7', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', '\x3', '\xC8', 
		'\x3', '\xC8', '\x5', '\xC8', '\x9B6', '\n', '\xC8', '\x3', '\xC9', '\x3', 
		'\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', '\xC9', '\x3', 
		'\xC9', '\x5', '\xC9', '\x9BF', '\n', '\xC9', '\x3', '\xCA', '\x3', '\xCA', 
		'\x3', '\xCB', '\x3', '\xCB', '\x3', '\xCC', '\x3', '\xCC', '\x3', '\xCC', 
		'\x2', '$', '\f', '\x16', ' ', '\x36', '@', '\x42', '\x44', '\x46', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', '^', 'j', '|', '\xB4', '\xD8', '\xDE', '\xEA', 
		'\xEE', '\xF6', '\x10C', '\x110', '\x114', '\x122', '\x136', '\x13A', 
		'\x142', '\x160', '\x16C', '\x186', '\xCD', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\xD2', '\xD4', '\xD6', '\xD8', '\xDA', 
		'\xDC', '\xDE', '\xE0', '\xE2', '\xE4', '\xE6', '\xE8', '\xEA', '\xEC', 
		'\xEE', '\xF0', '\xF2', '\xF4', '\xF6', '\xF8', '\xFA', '\xFC', '\xFE', 
		'\x100', '\x102', '\x104', '\x106', '\x108', '\x10A', '\x10C', '\x10E', 
		'\x110', '\x112', '\x114', '\x116', '\x118', '\x11A', '\x11C', '\x11E', 
		'\x120', '\x122', '\x124', '\x126', '\x128', '\x12A', '\x12C', '\x12E', 
		'\x130', '\x132', '\x134', '\x136', '\x138', '\x13A', '\x13C', '\x13E', 
		'\x140', '\x142', '\x144', '\x146', '\x148', '\x14A', '\x14C', '\x14E', 
		'\x150', '\x152', '\x154', '\x156', '\x158', '\x15A', '\x15C', '\x15E', 
		'\x160', '\x162', '\x164', '\x166', '\x168', '\x16A', '\x16C', '\x16E', 
		'\x170', '\x172', '\x174', '\x176', '\x178', '\x17A', '\x17C', '\x17E', 
		'\x180', '\x182', '\x184', '\x186', '\x188', '\x18A', '\x18C', '\x18E', 
		'\x190', '\x192', '\x194', '\x196', '\x2', '\xF', '\x4', '\x2', '\x63', 
		'\x63', 'g', 'g', '\x5', '\x2', '\x3', '\x4', ']', '_', '\x63', '\x65', 
		'\a', '\x2', '%', '%', '\x30', '\x30', ';', ';', '\x41', '\x41', 'H', 
		'H', '\x5', '\x2', '#', '#', '-', '-', 'R', 'R', '\x3', '\x2', 'W', '\\', 
		'\x4', '\x2', '\x17', '\x17', 'T', 'T', '\x4', '\x2', '\x5', '\x5', '\x63', 
		'\x63', '\x5', '\x2', '\x16', '\x16', '\x44', '\x44', 'O', 'O', '\x4', 
		'\x2', '\'', '\'', '\x37', '\x37', '\x3', '\x2', '\x38', ':', '\x4', '\x2', 
		'&', '&', 'J', 'J', '\x3', '\x2', '\x34', '\x35', '\x3', '\x2', '\x90', 
		'\x93', '\x2', '\xAEC', '\x2', '\x199', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x1A5', '\x3', '\x2', '\x2', '\x2', '\x6', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\n', '\x1B6', '\x3', 
		'\x2', '\x2', '\x2', '\f', '\x1C7', '\x3', '\x2', '\x2', '\x2', '\xE', 
		'\x1D8', '\x3', '\x2', '\x2', '\x2', '\x10', '\x1DE', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x1EA', '\x3', '\x2', '\x2', '\x2', '\x14', '\x1EC', '\x3', 
		'\x2', '\x2', '\x2', '\x16', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x20F', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x25E', '\x3', '\x2', '\x2', '\x2', '\"', '\x28B', 
		'\x3', '\x2', '\x2', '\x2', '$', '\x28D', '\x3', '\x2', '\x2', '\x2', 
		'&', '\x28F', '\x3', '\x2', '\x2', '\x2', '(', '\x2A7', '\x3', '\x2', 
		'\x2', '\x2', '*', '\x2C5', '\x3', '\x2', '\x2', '\x2', ',', '\x2C7', 
		'\x3', '\x2', '\x2', '\x2', '.', '\x2E1', '\x3', '\x2', '\x2', '\x2', 
		'\x30', '\x2E3', '\x3', '\x2', '\x2', '\x2', '\x32', '\x2E7', '\x3', '\x2', 
		'\x2', '\x2', '\x34', '\x2F0', '\x3', '\x2', '\x2', '\x2', '\x36', '\x2F2', 
		'\x3', '\x2', '\x2', '\x2', '\x38', '\x30B', '\x3', '\x2', '\x2', '\x2', 
		':', '\x319', '\x3', '\x2', '\x2', '\x2', '<', '\x31B', '\x3', '\x2', 
		'\x2', '\x2', '>', '\x326', '\x3', '\x2', '\x2', '\x2', '@', '\x328', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x336', '\x3', '\x2', '\x2', '\x2', 
		'\x44', '\x347', '\x3', '\x2', '\x2', '\x2', '\x46', '\x355', '\x3', '\x2', 
		'\x2', '\x2', 'H', '\x363', '\x3', '\x2', '\x2', '\x2', 'J', '\x365', 
		'\x3', '\x2', '\x2', '\x2', 'L', '\x379', '\x3', '\x2', '\x2', '\x2', 
		'N', '\x387', '\x3', '\x2', '\x2', '\x2', 'P', '\x392', '\x3', '\x2', 
		'\x2', '\x2', 'R', '\x39D', '\x3', '\x2', '\x2', '\x2', 'T', '\x3A8', 
		'\x3', '\x2', '\x2', '\x2', 'V', '\x3B6', '\x3', '\x2', '\x2', '\x2', 
		'X', '\x3CB', '\x3', '\x2', '\x2', '\x2', 'Z', '\x3D3', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x3E0', '\x3', '\x2', '\x2', '\x2', '^', '\x3E2', 
		'\x3', '\x2', '\x2', '\x2', '`', '\x3ED', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x409', '\x3', '\x2', '\x2', '\x2', '\x64', '\x41F', '\x3', '\x2', 
		'\x2', '\x2', '\x66', '\x422', '\x3', '\x2', '\x2', '\x2', 'h', '\x426', 
		'\x3', '\x2', '\x2', '\x2', 'j', '\x42C', '\x3', '\x2', '\x2', '\x2', 
		'l', '\x44A', '\x3', '\x2', '\x2', '\x2', 'n', '\x45C', '\x3', '\x2', 
		'\x2', '\x2', 'p', '\x481', '\x3', '\x2', '\x2', '\x2', 'r', '\x485', 
		'\x3', '\x2', '\x2', '\x2', 't', '\x488', '\x3', '\x2', '\x2', '\x2', 
		'v', '\x48F', '\x3', '\x2', '\x2', '\x2', 'x', '\x4A1', '\x3', '\x2', 
		'\x2', '\x2', 'z', '\x4A3', '\x3', '\x2', '\x2', '\x2', '|', '\x4A5', 
		'\x3', '\x2', '\x2', '\x2', '~', '\x4B8', '\x3', '\x2', '\x2', '\x2', 
		'\x80', '\x4C2', '\x3', '\x2', '\x2', '\x2', '\x82', '\x4C4', '\x3', '\x2', 
		'\x2', '\x2', '\x84', '\x4DB', '\x3', '\x2', '\x2', '\x2', '\x86', '\x4DE', 
		'\x3', '\x2', '\x2', '\x2', '\x88', '\x4E2', '\x3', '\x2', '\x2', '\x2', 
		'\x8A', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x4EC', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x4F5', '\x3', '\x2', '\x2', '\x2', '\x90', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x500', '\x3', '\x2', '\x2', '\x2', 
		'\x94', '\x502', '\x3', '\x2', '\x2', '\x2', '\x96', '\x504', '\x3', '\x2', 
		'\x2', '\x2', '\x98', '\x509', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x50F', 
		'\x3', '\x2', '\x2', '\x2', '\x9C', '\x518', '\x3', '\x2', '\x2', '\x2', 
		'\x9E', '\x521', '\x3', '\x2', '\x2', '\x2', '\xA0', '\x53A', '\x3', '\x2', 
		'\x2', '\x2', '\xA2', '\x540', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x54B', 
		'\x3', '\x2', '\x2', '\x2', '\xA6', '\x565', '\x3', '\x2', '\x2', '\x2', 
		'\xA8', '\x567', '\x3', '\x2', '\x2', '\x2', '\xAA', '\x576', '\x3', '\x2', 
		'\x2', '\x2', '\xAC', '\x58B', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x58D', 
		'\x3', '\x2', '\x2', '\x2', '\xB0', '\x59C', '\x3', '\x2', '\x2', '\x2', 
		'\xB2', '\x59E', '\x3', '\x2', '\x2', '\x2', '\xB4', '\x5A1', '\x3', '\x2', 
		'\x2', '\x2', '\xB6', '\x5B1', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x5B3', 
		'\x3', '\x2', '\x2', '\x2', '\xBA', '\x5B7', '\x3', '\x2', '\x2', '\x2', 
		'\xBC', '\x5B9', '\x3', '\x2', '\x2', '\x2', '\xBE', '\x5BD', '\x3', '\x2', 
		'\x2', '\x2', '\xC0', '\x5C1', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x5C4', 
		'\x3', '\x2', '\x2', '\x2', '\xC4', '\x5CD', '\x3', '\x2', '\x2', '\x2', 
		'\xC6', '\x5D6', '\x3', '\x2', '\x2', '\x2', '\xC8', '\x5DE', '\x3', '\x2', 
		'\x2', '\x2', '\xCA', '\x5E0', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x5E2', 
		'\x3', '\x2', '\x2', '\x2', '\xCE', '\x5E9', '\x3', '\x2', '\x2', '\x2', 
		'\xD0', '\x5FA', '\x3', '\x2', '\x2', '\x2', '\xD2', '\x5FD', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\x607', '\x3', '\x2', '\x2', '\x2', '\xD6', '\x617', 
		'\x3', '\x2', '\x2', '\x2', '\xD8', '\x619', '\x3', '\x2', '\x2', '\x2', 
		'\xDA', '\x62A', '\x3', '\x2', '\x2', '\x2', '\xDC', '\x63C', '\x3', '\x2', 
		'\x2', '\x2', '\xDE', '\x645', '\x3', '\x2', '\x2', '\x2', '\xE0', '\x656', 
		'\x3', '\x2', '\x2', '\x2', '\xE2', '\x65C', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '\x65E', '\x3', '\x2', '\x2', '\x2', '\xE6', '\x662', '\x3', '\x2', 
		'\x2', '\x2', '\xE8', '\x664', '\x3', '\x2', '\x2', '\x2', '\xEA', '\x668', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\x684', '\x3', '\x2', '\x2', '\x2', 
		'\xEE', '\x686', '\x3', '\x2', '\x2', '\x2', '\xF0', '\x691', '\x3', '\x2', 
		'\x2', '\x2', '\xF2', '\x69A', '\x3', '\x2', '\x2', '\x2', '\xF4', '\x6A0', 
		'\x3', '\x2', '\x2', '\x2', '\xF6', '\x6AB', '\x3', '\x2', '\x2', '\x2', 
		'\xF8', '\x6BD', '\x3', '\x2', '\x2', '\x2', '\xFA', '\x6CC', '\x3', '\x2', 
		'\x2', '\x2', '\xFC', '\x6E8', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x6EA', 
		'\x3', '\x2', '\x2', '\x2', '\x100', '\x6EE', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\x6F0', '\x3', '\x2', '\x2', '\x2', '\x104', '\x6F3', '\x3', 
		'\x2', '\x2', '\x2', '\x106', '\x6F7', '\x3', '\x2', '\x2', '\x2', '\x108', 
		'\x703', '\x3', '\x2', '\x2', '\x2', '\x10A', '\x70A', '\x3', '\x2', '\x2', 
		'\x2', '\x10C', '\x71A', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x730', 
		'\x3', '\x2', '\x2', '\x2', '\x110', '\x732', '\x3', '\x2', '\x2', '\x2', 
		'\x112', '\x74F', '\x3', '\x2', '\x2', '\x2', '\x114', '\x751', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x77B', '\x3', '\x2', '\x2', '\x2', '\x118', 
		'\x77E', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x794', '\x3', '\x2', '\x2', 
		'\x2', '\x11C', '\x79B', '\x3', '\x2', '\x2', '\x2', '\x11E', '\x7A0', 
		'\x3', '\x2', '\x2', '\x2', '\x120', '\x7A4', '\x3', '\x2', '\x2', '\x2', 
		'\x122', '\x7A6', '\x3', '\x2', '\x2', '\x2', '\x124', '\x7BF', '\x3', 
		'\x2', '\x2', '\x2', '\x126', '\x7C3', '\x3', '\x2', '\x2', '\x2', '\x128', 
		'\x7C5', '\x3', '\x2', '\x2', '\x2', '\x12A', '\x7DE', '\x3', '\x2', '\x2', 
		'\x2', '\x12C', '\x7E1', '\x3', '\x2', '\x2', '\x2', '\x12E', '\x7E5', 
		'\x3', '\x2', '\x2', '\x2', '\x130', '\x7E7', '\x3', '\x2', '\x2', '\x2', 
		'\x132', '\x7F2', '\x3', '\x2', '\x2', '\x2', '\x134', '\x804', '\x3', 
		'\x2', '\x2', '\x2', '\x136', '\x806', '\x3', '\x2', '\x2', '\x2', '\x138', 
		'\x824', '\x3', '\x2', '\x2', '\x2', '\x13A', '\x826', '\x3', '\x2', '\x2', 
		'\x2', '\x13C', '\x830', '\x3', '\x2', '\x2', '\x2', '\x13E', '\x832', 
		'\x3', '\x2', '\x2', '\x2', '\x140', '\x836', '\x3', '\x2', '\x2', '\x2', 
		'\x142', '\x839', '\x3', '\x2', '\x2', '\x2', '\x144', '\x85E', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x865', '\x3', '\x2', '\x2', '\x2', '\x148', 
		'\x867', '\x3', '\x2', '\x2', '\x2', '\x14A', '\x869', '\x3', '\x2', '\x2', 
		'\x2', '\x14C', '\x86B', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x86E', 
		'\x3', '\x2', '\x2', '\x2', '\x150', '\x872', '\x3', '\x2', '\x2', '\x2', 
		'\x152', '\x876', '\x3', '\x2', '\x2', '\x2', '\x154', '\x884', '\x3', 
		'\x2', '\x2', '\x2', '\x156', '\x890', '\x3', '\x2', '\x2', '\x2', '\x158', 
		'\x894', '\x3', '\x2', '\x2', '\x2', '\x15A', '\x896', '\x3', '\x2', '\x2', 
		'\x2', '\x15C', '\x89E', '\x3', '\x2', '\x2', '\x2', '\x15E', '\x8A0', 
		'\x3', '\x2', '\x2', '\x2', '\x160', '\x8A6', '\x3', '\x2', '\x2', '\x2', 
		'\x162', '\x8B3', '\x3', '\x2', '\x2', '\x2', '\x164', '\x8E5', '\x3', 
		'\x2', '\x2', '\x2', '\x166', '\x8E7', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x8FD', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x8FF', '\x3', '\x2', '\x2', 
		'\x2', '\x16C', '\x901', '\x3', '\x2', '\x2', '\x2', '\x16E', '\x914', 
		'\x3', '\x2', '\x2', '\x2', '\x170', '\x921', '\x3', '\x2', '\x2', '\x2', 
		'\x172', '\x924', '\x3', '\x2', '\x2', '\x2', '\x174', '\x929', '\x3', 
		'\x2', '\x2', '\x2', '\x176', '\x92E', '\x3', '\x2', '\x2', '\x2', '\x178', 
		'\x932', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x939', '\x3', '\x2', '\x2', 
		'\x2', '\x17C', '\x93D', '\x3', '\x2', '\x2', '\x2', '\x17E', '\x951', 
		'\x3', '\x2', '\x2', '\x2', '\x180', '\x953', '\x3', '\x2', '\x2', '\x2', 
		'\x182', '\x959', '\x3', '\x2', '\x2', '\x2', '\x184', '\x95B', '\x3', 
		'\x2', '\x2', '\x2', '\x186', '\x962', '\x3', '\x2', '\x2', '\x2', '\x188', 
		'\x978', '\x3', '\x2', '\x2', '\x2', '\x18A', '\x97A', '\x3', '\x2', '\x2', 
		'\x2', '\x18C', '\x97E', '\x3', '\x2', '\x2', '\x2', '\x18E', '\x9B5', 
		'\x3', '\x2', '\x2', '\x2', '\x190', '\x9BE', '\x3', '\x2', '\x2', '\x2', 
		'\x192', '\x9C0', '\x3', '\x2', '\x2', '\x2', '\x194', '\x9C2', '\x3', 
		'\x2', '\x2', '\x2', '\x196', '\x9C4', '\x3', '\x2', '\x2', '\x2', '\x198', 
		'\x19A', '\x5', '|', '?', '\x2', '\x199', '\x198', '\x3', '\x2', '\x2', 
		'\x2', '\x199', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19A', '\x19B', 
		'\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\a', '\x2', '\x2', '\x3', 
		'\x19C', '\x3', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x1A6', '\x5', '\x190', 
		'\xC9', '\x2', '\x19E', '\x1A6', '\a', 'G', '\x2', '\x2', '\x19F', '\x1A0', 
		'\a', 'W', '\x2', '\x2', '\x1A0', '\x1A1', '\x5', '^', '\x30', '\x2', 
		'\x1A1', '\x1A2', '\a', 'X', '\x2', '\x2', '\x1A2', '\x1A6', '\x3', '\x2', 
		'\x2', '\x2', '\x1A3', '\x1A6', '\x5', '\x6', '\x4', '\x2', '\x1A4', '\x1A6', 
		'\x5', '\xE', '\b', '\x2', '\x1A5', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x1A5', '\x19E', '\x3', '\x2', '\x2', '\x2', '\x1A5', '\x19F', '\x3', 
		'\x2', '\x2', '\x2', '\x1A5', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1A5', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1A6', '\x5', '\x3', '\x2', '\x2', 
		'\x2', '\x1A7', '\x1AA', '\x5', '\b', '\x5', '\x2', '\x1A8', '\x1AA', 
		'\x5', '\n', '\x6', '\x2', '\x1A9', '\x1A7', '\x3', '\x2', '\x2', '\x2', 
		'\x1A9', '\x1A8', '\x3', '\x2', '\x2', '\x2', '\x1AA', '\a', '\x3', '\x2', 
		'\x2', '\x2', '\x1AB', '\x1B5', '\a', '\x86', '\x2', '\x2', '\x1AC', '\x1B5', 
		'\x5', '\x15A', '\xAE', '\x2', '\x1AD', '\x1B5', '\x5', '\x14C', '\xA7', 
		'\x2', '\x1AE', '\x1B5', '\x5', '\x15C', '\xAF', '\x2', '\x1AF', '\x1B0', 
		'\a', '\x65', '\x2', '\x2', '\x1B0', '\x1B5', '\x5', '\x126', '\x94', 
		'\x2', '\x1B1', '\x1B2', '\a', '\x65', '\x2', '\x2', '\x1B2', '\x1B5', 
		'\x5', '\xA4', 'S', '\x2', '\x1B3', '\x1B5', '\x5', '\x168', '\xB5', '\x2', 
		'\x1B4', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1AC', '\x3', 
		'\x2', '\x2', '\x2', '\x1B4', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1B4', 
		'\x1AE', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1AF', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B1', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B3', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B8', '\x5', '\f', '\a', '\x2', '\x1B7', '\x1B9', '\a', '\x46', 
		'\x2', '\x2', '\x1B8', '\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B8', '\x1B9', 
		'\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', '\x2', 
		'\x1BA', '\x1BB', '\x5', '\b', '\x5', '\x2', '\x1BB', '\v', '\x3', '\x2', 
		'\x2', '\x2', '\x1BC', '\x1BD', '\b', '\a', '\x1', '\x2', '\x1BD', '\x1C8', 
		'\a', '\x81', '\x2', '\x2', '\x1BE', '\x1BF', '\x5', '\xA2', 'R', '\x2', 
		'\x1BF', '\x1C0', '\a', '\x81', '\x2', '\x2', '\x1C0', '\x1C8', '\x3', 
		'\x2', '\x2', '\x2', '\x1C1', '\x1C2', '\x5', '\xBA', '^', '\x2', '\x1C2', 
		'\x1C3', '\a', '\x81', '\x2', '\x2', '\x1C3', '\x1C8', '\x3', '\x2', '\x2', 
		'\x2', '\x1C4', '\x1C5', '\x5', '\xA4', 'S', '\x2', '\x1C5', '\x1C6', 
		'\a', '\x81', '\x2', '\x2', '\x1C6', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x1C7', '\x1BC', '\x3', '\x2', '\x2', '\x2', '\x1C7', '\x1BE', '\x3', 
		'\x2', '\x2', '\x2', '\x1C7', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C7', 
		'\x1C4', '\x3', '\x2', '\x2', '\x2', '\x1C8', '\x1D5', '\x3', '\x2', '\x2', 
		'\x2', '\x1C9', '\x1CA', '\f', '\x4', '\x2', '\x2', '\x1CA', '\x1CB', 
		'\a', '\x86', '\x2', '\x2', '\x1CB', '\x1D4', '\a', '\x81', '\x2', '\x2', 
		'\x1CC', '\x1CE', '\f', '\x3', '\x2', '\x2', '\x1CD', '\x1CF', '\a', '\x46', 
		'\x2', '\x2', '\x1CE', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CE', '\x1CF', 
		'\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', '\x3', '\x2', '\x2', '\x2', 
		'\x1D0', '\x1D1', '\x5', '\x166', '\xB4', '\x2', '\x1D1', '\x1D2', '\a', 
		'\x81', '\x2', '\x2', '\x1D2', '\x1D4', '\x3', '\x2', '\x2', '\x2', '\x1D3', 
		'\x1C9', '\x3', '\x2', '\x2', '\x2', '\x1D3', '\x1CC', '\x3', '\x2', '\x2', 
		'\x2', '\x1D4', '\x1D7', '\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D3', 
		'\x3', '\x2', '\x2', '\x2', '\x1D5', '\x1D6', '\x3', '\x2', '\x2', '\x2', 
		'\x1D6', '\r', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D5', '\x3', '\x2', 
		'\x2', '\x2', '\x1D8', '\x1DA', '\x5', '\x10', '\t', '\x2', '\x1D9', '\x1DB', 
		'\x5', '\x1E', '\x10', '\x2', '\x1DA', '\x1D9', '\x3', '\x2', '\x2', '\x2', 
		'\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', '\x1DC', '\x3', 
		'\x2', '\x2', '\x2', '\x1DC', '\x1DD', '\x5', 'h', '\x35', '\x2', '\x1DD', 
		'\xF', '\x3', '\x2', '\x2', '\x2', '\x1DE', '\x1E0', '\a', 'Y', '\x2', 
		'\x2', '\x1DF', '\x1E1', '\x5', '\x12', '\n', '\x2', '\x1E0', '\x1DF', 
		'\x3', '\x2', '\x2', '\x2', '\x1E0', '\x1E1', '\x3', '\x2', '\x2', '\x2', 
		'\x1E1', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E2', '\x1E3', '\a', 
		'Z', '\x2', '\x2', '\x1E3', '\x11', '\x3', '\x2', '\x2', '\x2', '\x1E4', 
		'\x1EB', '\x5', '\x14', '\v', '\x2', '\x1E5', '\x1EB', '\x5', '\x16', 
		'\f', '\x2', '\x1E6', '\x1E7', '\x5', '\x14', '\v', '\x2', '\x1E7', '\x1E8', 
		'\a', '|', '\x2', '\x2', '\x1E8', '\x1E9', '\x5', '\x16', '\f', '\x2', 
		'\x1E9', '\x1EB', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1E4', '\x3', 
		'\x2', '\x2', '\x2', '\x1EA', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1EA', 
		'\x1E6', '\x3', '\x2', '\x2', '\x2', '\x1EB', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x1EC', '\x1ED', '\t', '\x2', '\x2', '\x2', '\x1ED', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x1EE', '\x1EF', '\b', '\f', '\x1', '\x2', '\x1EF', 
		'\x1F1', '\x5', '\x18', '\r', '\x2', '\x1F0', '\x1F2', '\a', '\x85', '\x2', 
		'\x2', '\x1F1', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F2', 
		'\x3', '\x2', '\x2', '\x2', '\x1F2', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1F3', '\x1F4', '\f', '\x3', '\x2', '\x2', '\x1F4', '\x1F5', '\a', '|', 
		'\x2', '\x2', '\x1F5', '\x1F7', '\x5', '\x18', '\r', '\x2', '\x1F6', '\x1F8', 
		'\a', '\x85', '\x2', '\x2', '\x1F7', '\x1F6', '\x3', '\x2', '\x2', '\x2', 
		'\x1F7', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1F8', '\x1FA', '\x3', 
		'\x2', '\x2', '\x2', '\x1F9', '\x1F3', '\x3', '\x2', '\x2', '\x2', '\x1FA', 
		'\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FB', '\x1F9', '\x3', '\x2', '\x2', 
		'\x2', '\x1FB', '\x1FC', '\x3', '\x2', '\x2', '\x2', '\x1FC', '\x17', 
		'\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FB', '\x3', '\x2', '\x2', '\x2', 
		'\x1FE', '\x201', '\x5', '\x1A', '\xE', '\x2', '\x1FF', '\x201', '\x5', 
		'\x1C', '\xF', '\x2', '\x200', '\x1FE', '\x3', '\x2', '\x2', '\x2', '\x200', 
		'\x1FF', '\x3', '\x2', '\x2', '\x2', '\x201', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\x202', '\x207', '\a', '\x86', '\x2', '\x2', '\x203', '\x204', 
		'\a', '\x63', '\x2', '\x2', '\x204', '\x207', '\a', '\x86', '\x2', '\x2', 
		'\x205', '\x207', '\a', 'G', '\x2', '\x2', '\x206', '\x202', '\x3', '\x2', 
		'\x2', '\x2', '\x206', '\x203', '\x3', '\x2', '\x2', '\x2', '\x206', '\x205', 
		'\x3', '\x2', '\x2', '\x2', '\x207', '\x1B', '\x3', '\x2', '\x2', '\x2', 
		'\x208', '\x209', '\a', '\x86', '\x2', '\x2', '\x209', '\x20E', '\x5', 
		'\x11C', '\x8F', '\x2', '\x20A', '\x20B', '\a', '\x63', '\x2', '\x2', 
		'\x20B', '\x20C', '\a', '\x86', '\x2', '\x2', '\x20C', '\x20E', '\x5', 
		'\x11C', '\x8F', '\x2', '\x20D', '\x208', '\x3', '\x2', '\x2', '\x2', 
		'\x20D', '\x20A', '\x3', '\x2', '\x2', '\x2', '\x20E', '\x1D', '\x3', 
		'\x2', '\x2', '\x2', '\x20F', '\x210', '\a', 'W', '\x2', '\x2', '\x210', 
		'\x211', '\x5', '\x112', '\x8A', '\x2', '\x211', '\x213', '\a', 'X', '\x2', 
		'\x2', '\x212', '\x214', '\a', '\x30', '\x2', '\x2', '\x213', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x213', '\x214', '\x3', '\x2', '\x2', '\x2', 
		'\x214', '\x216', '\x3', '\x2', '\x2', '\x2', '\x215', '\x217', '\x5', 
		'\x182', '\xC2', '\x2', '\x216', '\x215', '\x3', '\x2', '\x2', '\x2', 
		'\x216', '\x217', '\x3', '\x2', '\x2', '\x2', '\x217', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x218', '\x21A', '\x5', '\xD8', 'm', '\x2', '\x219', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x219', '\x21A', '\x3', '\x2', '\x2', 
		'\x2', '\x21A', '\x21C', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21D', 
		'\x5', '\xFA', '~', '\x2', '\x21C', '\x21B', '\x3', '\x2', '\x2', '\x2', 
		'\x21C', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21D', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x21E', '\x21F', '\b', '\x11', '\x1', '\x2', '\x21F', 
		'\x25F', '\x5', '\x4', '\x3', '\x2', '\x220', '\x221', '\x5', '\xA0', 
		'Q', '\x2', '\x221', '\x223', '\a', 'W', '\x2', '\x2', '\x222', '\x224', 
		'\x5', '&', '\x14', '\x2', '\x223', '\x222', '\x3', '\x2', '\x2', '\x2', 
		'\x223', '\x224', '\x3', '\x2', '\x2', '\x2', '\x224', '\x225', '\x3', 
		'\x2', '\x2', '\x2', '\x225', '\x226', '\a', 'X', '\x2', '\x2', '\x226', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x227', '\x228', '\x5', '\x170', 
		'\xB9', '\x2', '\x228', '\x22A', '\a', 'W', '\x2', '\x2', '\x229', '\x22B', 
		'\x5', '&', '\x14', '\x2', '\x22A', '\x229', '\x3', '\x2', '\x2', '\x2', 
		'\x22A', '\x22B', '\x3', '\x2', '\x2', '\x2', '\x22B', '\x22C', '\x3', 
		'\x2', '\x2', '\x2', '\x22C', '\x22D', '\a', 'X', '\x2', '\x2', '\x22D', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x22E', '\x22F', '\x5', '\xA0', 
		'Q', '\x2', '\x22F', '\x230', '\x5', '\x124', '\x93', '\x2', '\x230', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x5', '\x170', 
		'\xB9', '\x2', '\x232', '\x233', '\x5', '\x124', '\x93', '\x2', '\x233', 
		'\x25F', '\x3', '\x2', '\x2', '\x2', '\x234', '\x235', '\a', ' ', '\x2', 
		'\x2', '\x235', '\x236', '\a', 'h', '\x2', '\x2', '\x236', '\x237', '\x5', 
		'\x106', '\x84', '\x2', '\x237', '\x238', '\a', 'i', '\x2', '\x2', '\x238', 
		'\x239', '\a', 'W', '\x2', '\x2', '\x239', '\x23A', '\x5', '^', '\x30', 
		'\x2', '\x23A', '\x23B', '\a', 'X', '\x2', '\x2', '\x23B', '\x25F', '\x3', 
		'\x2', '\x2', '\x2', '\x23C', '\x23D', '\a', '\x43', '\x2', '\x2', '\x23D', 
		'\x23E', '\a', 'h', '\x2', '\x2', '\x23E', '\x23F', '\x5', '\x106', '\x84', 
		'\x2', '\x23F', '\x240', '\a', 'i', '\x2', '\x2', '\x240', '\x241', '\a', 
		'W', '\x2', '\x2', '\x241', '\x242', '\x5', '^', '\x30', '\x2', '\x242', 
		'\x243', '\a', 'X', '\x2', '\x2', '\x243', '\x25F', '\x3', '\x2', '\x2', 
		'\x2', '\x244', '\x245', '\a', '<', '\x2', '\x2', '\x245', '\x246', '\a', 
		'h', '\x2', '\x2', '\x246', '\x247', '\x5', '\x106', '\x84', '\x2', '\x247', 
		'\x248', '\a', 'i', '\x2', '\x2', '\x248', '\x249', '\a', 'W', '\x2', 
		'\x2', '\x249', '\x24A', '\x5', '^', '\x30', '\x2', '\x24A', '\x24B', 
		'\a', 'X', '\x2', '\x2', '\x24B', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24D', '\a', '\x19', '\x2', '\x2', '\x24D', '\x24E', '\a', 
		'h', '\x2', '\x2', '\x24E', '\x24F', '\x5', '\x106', '\x84', '\x2', '\x24F', 
		'\x250', '\a', 'i', '\x2', '\x2', '\x250', '\x251', '\a', 'W', '\x2', 
		'\x2', '\x251', '\x252', '\x5', '^', '\x30', '\x2', '\x252', '\x253', 
		'\a', 'X', '\x2', '\x2', '\x253', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x254', '\x255', '\x5', '$', '\x13', '\x2', '\x255', '\x256', '\a', 'W', 
		'\x2', '\x2', '\x256', '\x257', '\x5', '^', '\x30', '\x2', '\x257', '\x258', 
		'\a', 'X', '\x2', '\x2', '\x258', '\x25F', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x25A', '\x5', '$', '\x13', '\x2', '\x25A', '\x25B', '\a', 'W', 
		'\x2', '\x2', '\x25B', '\x25C', '\x5', '\x106', '\x84', '\x2', '\x25C', 
		'\x25D', '\a', 'X', '\x2', '\x2', '\x25D', '\x25F', '\x3', '\x2', '\x2', 
		'\x2', '\x25E', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x220', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x227', '\x3', '\x2', '\x2', '\x2', 
		'\x25E', '\x22E', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x231', '\x3', 
		'\x2', '\x2', '\x2', '\x25E', '\x234', '\x3', '\x2', '\x2', '\x2', '\x25E', 
		'\x23C', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x244', '\x3', '\x2', '\x2', 
		'\x2', '\x25E', '\x24C', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x254', 
		'\x3', '\x2', '\x2', '\x2', '\x25E', '\x259', '\x3', '\x2', '\x2', '\x2', 
		'\x25F', '\x288', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\f', 
		'\x15', '\x2', '\x2', '\x261', '\x262', '\a', 'Y', '\x2', '\x2', '\x262', 
		'\x263', '\x5', '^', '\x30', '\x2', '\x263', '\x264', '\a', 'Z', '\x2', 
		'\x2', '\x264', '\x287', '\x3', '\x2', '\x2', '\x2', '\x265', '\x266', 
		'\f', '\x14', '\x2', '\x2', '\x266', '\x267', '\a', 'Y', '\x2', '\x2', 
		'\x267', '\x268', '\x5', '\x124', '\x93', '\x2', '\x268', '\x269', '\a', 
		'Z', '\x2', '\x2', '\x269', '\x287', '\x3', '\x2', '\x2', '\x2', '\x26A', 
		'\x26B', '\f', '\x13', '\x2', '\x2', '\x26B', '\x26D', '\a', 'W', '\x2', 
		'\x2', '\x26C', '\x26E', '\x5', '&', '\x14', '\x2', '\x26D', '\x26C', 
		'\x3', '\x2', '\x2', '\x2', '\x26D', '\x26E', '\x3', '\x2', '\x2', '\x2', 
		'\x26E', '\x26F', '\x3', '\x2', '\x2', '\x2', '\x26F', '\x287', '\a', 
		'X', '\x2', '\x2', '\x270', '\x271', '\f', '\xE', '\x2', '\x2', '\x271', 
		'\x273', '\a', '\x83', '\x2', '\x2', '\x272', '\x274', '\a', '\x46', '\x2', 
		'\x2', '\x273', '\x272', '\x3', '\x2', '\x2', '\x2', '\x273', '\x274', 
		'\x3', '\x2', '\x2', '\x2', '\x274', '\x275', '\x3', '\x2', '\x2', '\x2', 
		'\x275', '\x287', '\x5', '\x6', '\x4', '\x2', '\x276', '\x277', '\f', 
		'\r', '\x2', '\x2', '\x277', '\x279', '\a', '~', '\x2', '\x2', '\x278', 
		'\x27A', '\a', '\x46', '\x2', '\x2', '\x279', '\x278', '\x3', '\x2', '\x2', 
		'\x2', '\x279', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27A', '\x27B', 
		'\x3', '\x2', '\x2', '\x2', '\x27B', '\x287', '\x5', '\x6', '\x4', '\x2', 
		'\x27C', '\x27D', '\f', '\f', '\x2', '\x2', '\x27D', '\x27E', '\a', '\x83', 
		'\x2', '\x2', '\x27E', '\x287', '\x5', '(', '\x15', '\x2', '\x27F', '\x280', 
		'\f', '\v', '\x2', '\x2', '\x280', '\x281', '\a', '~', '\x2', '\x2', '\x281', 
		'\x287', '\x5', '(', '\x15', '\x2', '\x282', '\x283', '\f', '\n', '\x2', 
		'\x2', '\x283', '\x287', '\a', 'z', '\x2', '\x2', '\x284', '\x285', '\f', 
		'\t', '\x2', '\x2', '\x285', '\x287', '\a', '{', '\x2', '\x2', '\x286', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x286', '\x265', '\x3', '\x2', '\x2', 
		'\x2', '\x286', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x286', '\x270', 
		'\x3', '\x2', '\x2', '\x2', '\x286', '\x276', '\x3', '\x2', '\x2', '\x2', 
		'\x286', '\x27C', '\x3', '\x2', '\x2', '\x2', '\x286', '\x27F', '\x3', 
		'\x2', '\x2', '\x2', '\x286', '\x282', '\x3', '\x2', '\x2', '\x2', '\x286', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x287', '\x28A', '\x3', '\x2', '\x2', 
		'\x2', '\x288', '\x286', '\x3', '\x2', '\x2', '\x2', '\x288', '\x289', 
		'\x3', '\x2', '\x2', '\x2', '\x289', '!', '\x3', '\x2', '\x2', '\x2', 
		'\x28A', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28B', '\x28C', '\a', 
		'M', '\x2', '\x2', '\x28C', '#', '\x3', '\x2', '\x2', '\x2', '\x28D', 
		'\x28E', '\a', 'M', '\x2', '\x2', '\x28E', '%', '\x3', '\x2', '\x2', '\x2', 
		'\x28F', '\x290', '\x5', '\x122', '\x92', '\x2', '\x290', '\'', '\x3', 
		'\x2', '\x2', '\x2', '\x291', '\x293', '\x5', '\f', '\a', '\x2', '\x292', 
		'\x291', '\x3', '\x2', '\x2', '\x2', '\x292', '\x293', '\x3', '\x2', '\x2', 
		'\x2', '\x293', '\x294', '\x3', '\x2', '\x2', '\x2', '\x294', '\x295', 
		'\x5', '\xA2', 'R', '\x2', '\x295', '\x296', '\a', '\x81', '\x2', '\x2', 
		'\x296', '\x297', '\a', '\x65', '\x2', '\x2', '\x297', '\x298', '\x5', 
		'\xA2', 'R', '\x2', '\x298', '\x2A8', '\x3', '\x2', '\x2', '\x2', '\x299', 
		'\x29A', '\x5', '\f', '\a', '\x2', '\x29A', '\x29B', '\a', '\x46', '\x2', 
		'\x2', '\x29B', '\x29C', '\x5', '\x166', '\xB4', '\x2', '\x29C', '\x29D', 
		'\a', '\x81', '\x2', '\x2', '\x29D', '\x29E', '\a', '\x65', '\x2', '\x2', 
		'\x29E', '\x29F', '\x5', '\xA2', 'R', '\x2', '\x29F', '\x2A8', '\x3', 
		'\x2', '\x2', '\x2', '\x2A0', '\x2A2', '\x5', '\f', '\a', '\x2', '\x2A1', 
		'\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A1', '\x2A2', '\x3', '\x2', '\x2', 
		'\x2', '\x2A2', '\x2A3', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2A4', 
		'\a', '\x65', '\x2', '\x2', '\x2A4', '\x2A8', '\x5', '\xA2', 'R', '\x2', 
		'\x2A5', '\x2A6', '\a', '\x65', '\x2', '\x2', '\x2A6', '\x2A8', '\x5', 
		'\xA4', 'S', '\x2', '\x2A7', '\x292', '\x3', '\x2', '\x2', '\x2', '\x2A7', 
		'\x299', '\x3', '\x2', '\x2', '\x2', '\x2A7', '\x2A1', '\x3', '\x2', '\x2', 
		'\x2', '\x2A7', '\x2A5', '\x3', '\x2', '\x2', '\x2', '\x2A8', ')', '\x3', 
		'\x2', '\x2', '\x2', '\x2A9', '\x2C6', '\x5', ' ', '\x11', '\x2', '\x2AA', 
		'\x2AB', '\a', 'z', '\x2', '\x2', '\x2AB', '\x2C6', '\x5', '>', ' ', '\x2', 
		'\x2AC', '\x2AD', '\a', '{', '\x2', '\x2', '\x2AD', '\x2C6', '\x5', '>', 
		' ', '\x2', '\x2AE', '\x2AF', '\x5', ',', '\x17', '\x2', '\x2AF', '\x2B0', 
		'\x5', '>', ' ', '\x2', '\x2B0', '\x2C6', '\x3', '\x2', '\x2', '\x2', 
		'\x2B1', '\x2B2', '\a', '@', '\x2', '\x2', '\x2B2', '\x2C6', '\x5', '*', 
		'\x16', '\x2', '\x2B3', '\x2B4', '\a', '@', '\x2', '\x2', '\x2B4', '\x2B5', 
		'\a', 'W', '\x2', '\x2', '\x2B5', '\x2B6', '\x5', '\x106', '\x84', '\x2', 
		'\x2B6', '\x2B7', '\a', 'X', '\x2', '\x2', '\x2B7', '\x2C6', '\x3', '\x2', 
		'\x2', '\x2', '\x2B8', '\x2B9', '\a', '@', '\x2', '\x2', '\x2B9', '\x2BA', 
		'\a', '\x85', '\x2', '\x2', '\x2BA', '\x2BB', '\a', 'W', '\x2', '\x2', 
		'\x2BB', '\x2BC', '\a', '\x86', '\x2', '\x2', '\x2BC', '\x2C6', '\a', 
		'X', '\x2', '\x2', '\x2BD', '\x2BE', '\a', '\f', '\x2', '\x2', '\x2BE', 
		'\x2BF', '\a', 'W', '\x2', '\x2', '\x2BF', '\x2C0', '\x5', '\x106', '\x84', 
		'\x2', '\x2C0', '\x2C1', '\a', 'X', '\x2', '\x2', '\x2C1', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C2', '\x2C6', '\x5', '<', '\x1F', '\x2', '\x2C3', 
		'\x2C6', '\x5', '.', '\x18', '\x2', '\x2C4', '\x2C6', '\x5', ':', '\x1E', 
		'\x2', '\x2C5', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2AA', 
		'\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2AC', '\x3', '\x2', '\x2', '\x2', 
		'\x2C5', '\x2AE', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2B1', '\x3', 
		'\x2', '\x2', '\x2', '\x2C5', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2C5', 
		'\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2BD', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C2', '\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C3', 
		'\x3', '\x2', '\x2', '\x2', '\x2C5', '\x2C4', '\x3', '\x2', '\x2', '\x2', 
		'\x2C6', '+', '\x3', '\x2', '\x2', '\x2', '\x2C7', '\x2C8', '\t', '\x3', 
		'\x2', '\x2', '\x2C8', '-', '\x3', '\x2', '\x2', '\x2', '\x2C9', '\x2CB', 
		'\a', '\x81', '\x2', '\x2', '\x2CA', '\x2C9', '\x3', '\x2', '\x2', '\x2', 
		'\x2CA', '\x2CB', '\x3', '\x2', '\x2', '\x2', '\x2CB', '\x2CC', '\x3', 
		'\x2', '\x2', '\x2', '\x2CC', '\x2CE', '\a', '\x32', '\x2', '\x2', '\x2CD', 
		'\x2CF', '\x5', '\x30', '\x19', '\x2', '\x2CE', '\x2CD', '\x3', '\x2', 
		'\x2', '\x2', '\x2CE', '\x2CF', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D0', 
		'\x3', '\x2', '\x2', '\x2', '\x2D0', '\x2D2', '\x5', '\x32', '\x1A', '\x2', 
		'\x2D1', '\x2D3', '\x5', '\x38', '\x1D', '\x2', '\x2D2', '\x2D1', '\x3', 
		'\x2', '\x2', '\x2', '\x2D2', '\x2D3', '\x3', '\x2', '\x2', '\x2', '\x2D3', 
		'\x2E2', '\x3', '\x2', '\x2', '\x2', '\x2D4', '\x2D6', '\a', '\x81', '\x2', 
		'\x2', '\x2D5', '\x2D4', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D6', 
		'\x3', '\x2', '\x2', '\x2', '\x2D6', '\x2D7', '\x3', '\x2', '\x2', '\x2', 
		'\x2D7', '\x2D9', '\a', '\x32', '\x2', '\x2', '\x2D8', '\x2DA', '\x5', 
		'\x30', '\x19', '\x2', '\x2D9', '\x2D8', '\x3', '\x2', '\x2', '\x2', '\x2D9', 
		'\x2DA', '\x3', '\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\x3', '\x2', '\x2', 
		'\x2', '\x2DB', '\x2DC', '\a', 'W', '\x2', '\x2', '\x2DC', '\x2DD', '\x5', 
		'\x106', '\x84', '\x2', '\x2DD', '\x2DF', '\a', 'X', '\x2', '\x2', '\x2DE', 
		'\x2E0', '\x5', '\x38', '\x1D', '\x2', '\x2DF', '\x2DE', '\x3', '\x2', 
		'\x2', '\x2', '\x2DF', '\x2E0', '\x3', '\x2', '\x2', '\x2', '\x2E0', '\x2E2', 
		'\x3', '\x2', '\x2', '\x2', '\x2E1', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'\x2E1', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2E2', '/', '\x3', '\x2', 
		'\x2', '\x2', '\x2E3', '\x2E4', '\a', 'W', '\x2', '\x2', '\x2E4', '\x2E5', 
		'\x5', '&', '\x14', '\x2', '\x2E5', '\x2E6', '\a', 'X', '\x2', '\x2', 
		'\x2E6', '\x31', '\x3', '\x2', '\x2', '\x2', '\x2E7', '\x2E9', '\x5', 
		'\x9C', 'O', '\x2', '\x2E8', '\x2EA', '\x5', '\x34', '\x1B', '\x2', '\x2E9', 
		'\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2E9', '\x2EA', '\x3', '\x2', '\x2', 
		'\x2', '\x2EA', '\x33', '\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2ED', 
		'\x5', '\xFC', '\x7F', '\x2', '\x2EC', '\x2EE', '\x5', '\x34', '\x1B', 
		'\x2', '\x2ED', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2ED', '\x2EE', 
		'\x3', '\x2', '\x2', '\x2', '\x2EE', '\x2F1', '\x3', '\x2', '\x2', '\x2', 
		'\x2EF', '\x2F1', '\x5', '\x36', '\x1C', '\x2', '\x2F0', '\x2EB', '\x3', 
		'\x2', '\x2', '\x2', '\x2F0', '\x2EF', '\x3', '\x2', '\x2', '\x2', '\x2F1', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x2F2', '\x2F3', '\b', '\x1C', '\x1', 
		'\x2', '\x2F3', '\x2F4', '\a', 'Y', '\x2', '\x2', '\x2F4', '\x2F5', '\x5', 
		'^', '\x30', '\x2', '\x2F5', '\x2F7', '\a', 'Z', '\x2', '\x2', '\x2F6', 
		'\x2F8', '\x5', '\xD8', 'm', '\x2', '\x2F7', '\x2F6', '\x3', '\x2', '\x2', 
		'\x2', '\x2F7', '\x2F8', '\x3', '\x2', '\x2', '\x2', '\x2F8', '\x302', 
		'\x3', '\x2', '\x2', '\x2', '\x2F9', '\x2FA', '\f', '\x3', '\x2', '\x2', 
		'\x2FA', '\x2FB', '\a', 'Y', '\x2', '\x2', '\x2FB', '\x2FC', '\x5', '`', 
		'\x31', '\x2', '\x2FC', '\x2FE', '\a', 'Z', '\x2', '\x2', '\x2FD', '\x2FF', 
		'\x5', '\xD8', 'm', '\x2', '\x2FE', '\x2FD', '\x3', '\x2', '\x2', '\x2', 
		'\x2FE', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x2FF', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x300', '\x2F9', '\x3', '\x2', '\x2', '\x2', '\x301', 
		'\x304', '\x3', '\x2', '\x2', '\x2', '\x302', '\x300', '\x3', '\x2', '\x2', 
		'\x2', '\x302', '\x303', '\x3', '\x2', '\x2', '\x2', '\x303', '\x37', 
		'\x3', '\x2', '\x2', '\x2', '\x304', '\x302', '\x3', '\x2', '\x2', '\x2', 
		'\x305', '\x307', '\a', 'W', '\x2', '\x2', '\x306', '\x308', '\x5', '&', 
		'\x14', '\x2', '\x307', '\x306', '\x3', '\x2', '\x2', '\x2', '\x307', 
		'\x308', '\x3', '\x2', '\x2', '\x2', '\x308', '\x309', '\x3', '\x2', '\x2', 
		'\x2', '\x309', '\x30C', '\a', 'X', '\x2', '\x2', '\x30A', '\x30C', '\x5', 
		'\x124', '\x93', '\x2', '\x30B', '\x305', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', '\x30A', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x30D', '\x30F', '\a', '\x81', '\x2', '\x2', '\x30E', 
		'\x30D', '\x3', '\x2', '\x2', '\x2', '\x30E', '\x30F', '\x3', '\x2', '\x2', 
		'\x2', '\x30F', '\x310', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', 
		'\a', '\x1D', '\x2', '\x2', '\x311', '\x31A', '\x5', '>', ' ', '\x2', 
		'\x312', '\x314', '\a', '\x81', '\x2', '\x2', '\x313', '\x312', '\x3', 
		'\x2', '\x2', '\x2', '\x313', '\x314', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x315', '\x3', '\x2', '\x2', '\x2', '\x315', '\x316', '\a', '\x1D', '\x2', 
		'\x2', '\x316', '\x317', '\a', 'Y', '\x2', '\x2', '\x317', '\x318', '\a', 
		'Z', '\x2', '\x2', '\x318', '\x31A', '\x5', '>', ' ', '\x2', '\x319', 
		'\x30E', '\x3', '\x2', '\x2', '\x2', '\x319', '\x313', '\x3', '\x2', '\x2', 
		'\x2', '\x31A', ';', '\x3', '\x2', '\x2', '\x2', '\x31B', '\x31C', '\a', 
		'\x33', '\x2', '\x2', '\x31C', '\x31D', '\a', 'W', '\x2', '\x2', '\x31D', 
		'\x31E', '\x5', '^', '\x30', '\x2', '\x31E', '\x31F', '\a', 'X', '\x2', 
		'\x2', '\x31F', '=', '\x3', '\x2', '\x2', '\x2', '\x320', '\x327', '\x5', 
		'*', '\x16', '\x2', '\x321', '\x322', '\a', 'W', '\x2', '\x2', '\x322', 
		'\x323', '\x5', '\x106', '\x84', '\x2', '\x323', '\x324', '\a', 'X', '\x2', 
		'\x2', '\x324', '\x325', '\x5', '>', ' ', '\x2', '\x325', '\x327', '\x3', 
		'\x2', '\x2', '\x2', '\x326', '\x320', '\x3', '\x2', '\x2', '\x2', '\x326', 
		'\x321', '\x3', '\x2', '\x2', '\x2', '\x327', '?', '\x3', '\x2', '\x2', 
		'\x2', '\x328', '\x329', '\b', '!', '\x1', '\x2', '\x329', '\x32A', '\x5', 
		'>', ' ', '\x2', '\x32A', '\x333', '\x3', '\x2', '\x2', '\x2', '\x32B', 
		'\x32C', '\f', '\x4', '\x2', '\x2', '\x32C', '\x32D', '\a', '\x84', '\x2', 
		'\x2', '\x32D', '\x332', '\x5', '>', ' ', '\x2', '\x32E', '\x32F', '\f', 
		'\x3', '\x2', '\x2', '\x32F', '\x330', '\a', '}', '\x2', '\x2', '\x330', 
		'\x332', '\x5', '>', ' ', '\x2', '\x331', '\x32B', '\x3', '\x2', '\x2', 
		'\x2', '\x331', '\x32E', '\x3', '\x2', '\x2', '\x2', '\x332', '\x335', 
		'\x3', '\x2', '\x2', '\x2', '\x333', '\x331', '\x3', '\x2', '\x2', '\x2', 
		'\x333', '\x334', '\x3', '\x2', '\x2', '\x2', '\x334', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x335', '\x333', '\x3', '\x2', '\x2', '\x2', '\x336', 
		'\x337', '\b', '\"', '\x1', '\x2', '\x337', '\x338', '\x5', '@', '!', 
		'\x2', '\x338', '\x344', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33A', 
		'\f', '\x5', '\x2', '\x2', '\x33A', '\x33B', '\a', '_', '\x2', '\x2', 
		'\x33B', '\x343', '\x5', '@', '!', '\x2', '\x33C', '\x33D', '\f', '\x4', 
		'\x2', '\x2', '\x33D', '\x33E', '\a', '`', '\x2', '\x2', '\x33E', '\x343', 
		'\x5', '@', '!', '\x2', '\x33F', '\x340', '\f', '\x3', '\x2', '\x2', '\x340', 
		'\x341', '\a', '\x61', '\x2', '\x2', '\x341', '\x343', '\x5', '@', '!', 
		'\x2', '\x342', '\x339', '\x3', '\x2', '\x2', '\x2', '\x342', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x342', '\x33F', '\x3', '\x2', '\x2', '\x2', 
		'\x343', '\x346', '\x3', '\x2', '\x2', '\x2', '\x344', '\x342', '\x3', 
		'\x2', '\x2', '\x2', '\x344', '\x345', '\x3', '\x2', '\x2', '\x2', '\x345', 
		'\x43', '\x3', '\x2', '\x2', '\x2', '\x346', '\x344', '\x3', '\x2', '\x2', 
		'\x2', '\x347', '\x348', '\b', '#', '\x1', '\x2', '\x348', '\x349', '\x5', 
		'\x42', '\"', '\x2', '\x349', '\x352', '\x3', '\x2', '\x2', '\x2', '\x34A', 
		'\x34B', '\f', '\x4', '\x2', '\x2', '\x34B', '\x34C', '\a', ']', '\x2', 
		'\x2', '\x34C', '\x351', '\x5', '\x42', '\"', '\x2', '\x34D', '\x34E', 
		'\f', '\x3', '\x2', '\x2', '\x34E', '\x34F', '\a', '^', '\x2', '\x2', 
		'\x34F', '\x351', '\x5', '\x42', '\"', '\x2', '\x350', '\x34A', '\x3', 
		'\x2', '\x2', '\x2', '\x350', '\x34D', '\x3', '\x2', '\x2', '\x2', '\x351', 
		'\x354', '\x3', '\x2', '\x2', '\x2', '\x352', '\x350', '\x3', '\x2', '\x2', 
		'\x2', '\x352', '\x353', '\x3', '\x2', '\x2', '\x2', '\x353', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\x354', '\x352', '\x3', '\x2', '\x2', '\x2', 
		'\x355', '\x356', '\b', '$', '\x1', '\x2', '\x356', '\x357', '\x5', '\x44', 
		'#', '\x2', '\x357', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x358', '\x359', 
		'\f', '\x3', '\x2', '\x2', '\x359', '\x35A', '\x5', 'H', '%', '\x2', '\x35A', 
		'\x35B', '\x5', '\x44', '#', '\x2', '\x35B', '\x35D', '\x3', '\x2', '\x2', 
		'\x2', '\x35C', '\x358', '\x3', '\x2', '\x2', '\x2', '\x35D', '\x360', 
		'\x3', '\x2', '\x2', '\x2', '\x35E', '\x35C', '\x3', '\x2', '\x2', '\x2', 
		'\x35E', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x35F', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x360', '\x35E', '\x3', '\x2', '\x2', '\x2', '\x361', '\x364', 
		'\x5', '\x18A', '\xC6', '\x2', '\x362', '\x364', '\a', 'r', '\x2', '\x2', 
		'\x363', '\x361', '\x3', '\x2', '\x2', '\x2', '\x363', '\x362', '\x3', 
		'\x2', '\x2', '\x2', '\x364', 'I', '\x3', '\x2', '\x2', '\x2', '\x365', 
		'\x366', '\b', '&', '\x1', '\x2', '\x366', '\x367', '\x5', '\x46', '$', 
		'\x2', '\x367', '\x376', '\x3', '\x2', '\x2', '\x2', '\x368', '\x369', 
		'\f', '\x6', '\x2', '\x2', '\x369', '\x36A', '\a', 'h', '\x2', '\x2', 
		'\x36A', '\x375', '\x5', '\x46', '$', '\x2', '\x36B', '\x36C', '\f', '\x5', 
		'\x2', '\x2', '\x36C', '\x36D', '\a', 'i', '\x2', '\x2', '\x36D', '\x375', 
		'\x5', '\x46', '$', '\x2', '\x36E', '\x36F', '\f', '\x4', '\x2', '\x2', 
		'\x36F', '\x370', '\a', 'v', '\x2', '\x2', '\x370', '\x375', '\x5', '\x46', 
		'$', '\x2', '\x371', '\x372', '\f', '\x3', '\x2', '\x2', '\x372', '\x373', 
		'\a', 'w', '\x2', '\x2', '\x373', '\x375', '\x5', '\x46', '$', '\x2', 
		'\x374', '\x368', '\x3', '\x2', '\x2', '\x2', '\x374', '\x36B', '\x3', 
		'\x2', '\x2', '\x2', '\x374', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x374', 
		'\x371', '\x3', '\x2', '\x2', '\x2', '\x375', '\x378', '\x3', '\x2', '\x2', 
		'\x2', '\x376', '\x374', '\x3', '\x2', '\x2', '\x2', '\x376', '\x377', 
		'\x3', '\x2', '\x2', '\x2', '\x377', 'K', '\x3', '\x2', '\x2', '\x2', 
		'\x378', '\x376', '\x3', '\x2', '\x2', '\x2', '\x379', '\x37A', '\b', 
		'\'', '\x1', '\x2', '\x37A', '\x37B', '\x5', 'J', '&', '\x2', '\x37B', 
		'\x384', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37D', '\f', '\x4', '\x2', 
		'\x2', '\x37D', '\x37E', '\a', 't', '\x2', '\x2', '\x37E', '\x383', '\x5', 
		'J', '&', '\x2', '\x37F', '\x380', '\f', '\x3', '\x2', '\x2', '\x380', 
		'\x381', '\a', 'u', '\x2', '\x2', '\x381', '\x383', '\x5', 'J', '&', '\x2', 
		'\x382', '\x37C', '\x3', '\x2', '\x2', '\x2', '\x382', '\x37F', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x386', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x382', '\x3', '\x2', '\x2', '\x2', '\x384', '\x385', '\x3', '\x2', '\x2', 
		'\x2', '\x385', 'M', '\x3', '\x2', '\x2', '\x2', '\x386', '\x384', '\x3', 
		'\x2', '\x2', '\x2', '\x387', '\x388', '\b', '(', '\x1', '\x2', '\x388', 
		'\x389', '\x5', 'L', '\'', '\x2', '\x389', '\x38F', '\x3', '\x2', '\x2', 
		'\x2', '\x38A', '\x38B', '\f', '\x3', '\x2', '\x2', '\x38B', '\x38C', 
		'\a', '\x63', '\x2', '\x2', '\x38C', '\x38E', '\x5', 'L', '\'', '\x2', 
		'\x38D', '\x38A', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x391', '\x3', 
		'\x2', '\x2', '\x2', '\x38F', '\x38D', '\x3', '\x2', '\x2', '\x2', '\x38F', 
		'\x390', '\x3', '\x2', '\x2', '\x2', '\x390', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\x391', '\x38F', '\x3', '\x2', '\x2', '\x2', '\x392', '\x393', 
		'\b', ')', '\x1', '\x2', '\x393', '\x394', '\x5', 'N', '(', '\x2', '\x394', 
		'\x39A', '\x3', '\x2', '\x2', '\x2', '\x395', '\x396', '\f', '\x3', '\x2', 
		'\x2', '\x396', '\x397', '\a', '\x62', '\x2', '\x2', '\x397', '\x399', 
		'\x5', 'N', '(', '\x2', '\x398', '\x395', '\x3', '\x2', '\x2', '\x2', 
		'\x399', '\x39C', '\x3', '\x2', '\x2', '\x2', '\x39A', '\x398', '\x3', 
		'\x2', '\x2', '\x2', '\x39A', '\x39B', '\x3', '\x2', '\x2', '\x2', '\x39B', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\x39C', '\x39A', '\x3', '\x2', '\x2', 
		'\x2', '\x39D', '\x39E', '\b', '*', '\x1', '\x2', '\x39E', '\x39F', '\x5', 
		'P', ')', '\x2', '\x39F', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x3A0', 
		'\x3A1', '\f', '\x3', '\x2', '\x2', '\x3A1', '\x3A2', '\a', '\x64', '\x2', 
		'\x2', '\x3A2', '\x3A4', '\x5', 'P', ')', '\x2', '\x3A3', '\x3A0', '\x3', 
		'\x2', '\x2', '\x2', '\x3A4', '\x3A7', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3A3', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x3A6', 'S', '\x3', '\x2', '\x2', '\x2', '\x3A7', '\x3A5', '\x3', 
		'\x2', '\x2', '\x2', '\x3A8', '\x3A9', '\b', '+', '\x1', '\x2', '\x3A9', 
		'\x3AA', '\x5', 'R', '*', '\x2', '\x3AA', '\x3B3', '\x3', '\x2', '\x2', 
		'\x2', '\x3AB', '\x3AC', '\f', '\x4', '\x2', '\x2', '\x3AC', '\x3AD', 
		'\a', '\x5', '\x2', '\x2', '\x3AD', '\x3B2', '\x5', 'R', '*', '\x2', '\x3AE', 
		'\x3AF', '\f', '\x3', '\x2', '\x2', '\x3AF', '\x3B0', '\a', '\x6', '\x2', 
		'\x2', '\x3B0', '\x3B2', '\x5', 'R', '*', '\x2', '\x3B1', '\x3AB', '\x3', 
		'\x2', '\x2', '\x2', '\x3B1', '\x3AE', '\x3', '\x2', '\x2', '\x2', '\x3B2', 
		'\x3B5', '\x3', '\x2', '\x2', '\x2', '\x3B3', '\x3B1', '\x3', '\x2', '\x2', 
		'\x2', '\x3B3', '\x3B4', '\x3', '\x2', '\x2', '\x2', '\x3B4', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x3B5', '\x3B3', '\x3', '\x2', '\x2', '\x2', '\x3B6', 
		'\x3B7', '\b', ',', '\x1', '\x2', '\x3B7', '\x3B8', '\x5', 'T', '+', '\x2', 
		'\x3B8', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', '\f', 
		'\x4', '\x2', '\x2', '\x3BA', '\x3BB', '\a', '\a', '\x2', '\x2', '\x3BB', 
		'\x3C0', '\x5', 'T', '+', '\x2', '\x3BC', '\x3BD', '\f', '\x3', '\x2', 
		'\x2', '\x3BD', '\x3BE', '\a', '\b', '\x2', '\x2', '\x3BE', '\x3C0', '\x5', 
		'T', '+', '\x2', '\x3BF', '\x3B9', '\x3', '\x2', '\x2', '\x2', '\x3BF', 
		'\x3BC', '\x3', '\x2', '\x2', '\x2', '\x3C0', '\x3C3', '\x3', '\x2', '\x2', 
		'\x2', '\x3C1', '\x3BF', '\x3', '\x2', '\x2', '\x2', '\x3C1', '\x3C2', 
		'\x3', '\x2', '\x2', '\x2', '\x3C2', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x3C3', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C4', '\x3CC', '\x5', 
		'V', ',', '\x2', '\x3C5', '\x3C6', '\x5', 'V', ',', '\x2', '\x3C6', '\x3C7', 
		'\a', '\x7F', '\x2', '\x2', '\x3C7', '\x3C8', '\x5', '^', '\x30', '\x2', 
		'\x3C8', '\x3C9', '\a', '\x80', '\x2', '\x2', '\x3C9', '\x3CA', '\x5', 
		'Z', '.', '\x2', '\x3CA', '\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CB', 
		'\x3C4', '\x3', '\x2', '\x2', '\x2', '\x3CB', '\x3C5', '\x3', '\x2', '\x2', 
		'\x2', '\x3CC', 'Y', '\x3', '\x2', '\x2', '\x2', '\x3CD', '\x3D4', '\x5', 
		'X', '-', '\x2', '\x3CE', '\x3CF', '\x5', 'V', ',', '\x2', '\x3CF', '\x3D0', 
		'\x5', '\\', '/', '\x2', '\x3D0', '\x3D1', '\x5', '\x120', '\x91', '\x2', 
		'\x3D1', '\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D2', '\x3D4', '\x5', 
		'\x180', '\xC1', '\x2', '\x3D3', '\x3CD', '\x3', '\x2', '\x2', '\x2', 
		'\x3D3', '\x3CE', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D2', '\x3', 
		'\x2', '\x2', '\x2', '\x3D4', '[', '\x3', '\x2', '\x2', '\x2', '\x3D5', 
		'\x3E1', '\a', 'g', '\x2', '\x2', '\x3D6', '\x3E1', '\a', 'l', '\x2', 
		'\x2', '\x3D7', '\x3E1', '\a', 'm', '\x2', '\x2', '\x3D8', '\x3E1', '\a', 
		'n', '\x2', '\x2', '\x3D9', '\x3E1', '\a', 'j', '\x2', '\x2', '\x3DA', 
		'\x3E1', '\a', 'k', '\x2', '\x2', '\x3DB', '\x3E1', '\x5', '\x18C', '\xC7', 
		'\x2', '\x3DC', '\x3E1', '\a', 's', '\x2', '\x2', '\x3DD', '\x3E1', '\a', 
		'p', '\x2', '\x2', '\x3DE', '\x3E1', '\a', 'o', '\x2', '\x2', '\x3DF', 
		'\x3E1', '\a', 'q', '\x2', '\x2', '\x3E0', '\x3D5', '\x3', '\x2', '\x2', 
		'\x2', '\x3E0', '\x3D6', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3D7', 
		'\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3D8', '\x3', '\x2', '\x2', '\x2', 
		'\x3E0', '\x3D9', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DA', '\x3', 
		'\x2', '\x2', '\x2', '\x3E0', '\x3DB', '\x3', '\x2', '\x2', '\x2', '\x3E0', 
		'\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DD', '\x3', '\x2', '\x2', 
		'\x2', '\x3E0', '\x3DE', '\x3', '\x2', '\x2', '\x2', '\x3E0', '\x3DF', 
		'\x3', '\x2', '\x2', '\x2', '\x3E1', ']', '\x3', '\x2', '\x2', '\x2', 
		'\x3E2', '\x3E3', '\b', '\x30', '\x1', '\x2', '\x3E3', '\x3E4', '\x5', 
		'Z', '.', '\x2', '\x3E4', '\x3EA', '\x3', '\x2', '\x2', '\x2', '\x3E5', 
		'\x3E6', '\f', '\x3', '\x2', '\x2', '\x3E6', '\x3E7', '\a', '|', '\x2', 
		'\x2', '\x3E7', '\x3E9', '\x5', 'Z', '.', '\x2', '\x3E8', '\x3E5', '\x3', 
		'\x2', '\x2', '\x2', '\x3E9', '\x3EC', '\x3', '\x2', '\x2', '\x2', '\x3EA', 
		'\x3E8', '\x3', '\x2', '\x2', '\x2', '\x3EA', '\x3EB', '\x3', '\x2', '\x2', 
		'\x2', '\x3EB', '_', '\x3', '\x2', '\x2', '\x2', '\x3EC', '\x3EA', '\x3', 
		'\x2', '\x2', '\x2', '\x3ED', '\x3EE', '\x5', 'X', '-', '\x2', '\x3EE', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x3EF', '\x40A', '\x5', '\x64', '\x33', 
		'\x2', '\x3F0', '\x3F2', '\x5', '\xD8', 'm', '\x2', '\x3F1', '\x3F0', 
		'\x3', '\x2', '\x2', '\x2', '\x3F1', '\x3F2', '\x3', '\x2', '\x2', '\x2', 
		'\x3F2', '\x3F3', '\x3', '\x2', '\x2', '\x2', '\x3F3', '\x40A', '\x5', 
		'\x66', '\x34', '\x2', '\x3F4', '\x3F6', '\x5', '\xD8', 'm', '\x2', '\x3F5', 
		'\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F5', '\x3F6', '\x3', '\x2', '\x2', 
		'\x2', '\x3F6', '\x3F7', '\x3', '\x2', '\x2', '\x2', '\x3F7', '\x40A', 
		'\x5', 'h', '\x35', '\x2', '\x3F8', '\x3FA', '\x5', '\xD8', 'm', '\x2', 
		'\x3F9', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3FA', '\x3', 
		'\x2', '\x2', '\x2', '\x3FA', '\x3FB', '\x3', '\x2', '\x2', '\x2', '\x3FB', 
		'\x40A', '\x5', 'l', '\x37', '\x2', '\x3FC', '\x3FE', '\x5', '\xD8', 'm', 
		'\x2', '\x3FD', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FD', '\x3FE', 
		'\x3', '\x2', '\x2', '\x2', '\x3FE', '\x3FF', '\x3', '\x2', '\x2', '\x2', 
		'\x3FF', '\x40A', '\x5', 'p', '\x39', '\x2', '\x400', '\x402', '\x5', 
		'\xD8', 'm', '\x2', '\x401', '\x400', '\x3', '\x2', '\x2', '\x2', '\x401', 
		'\x402', '\x3', '\x2', '\x2', '\x2', '\x402', '\x403', '\x3', '\x2', '\x2', 
		'\x2', '\x403', '\x40A', '\x5', 'x', '=', '\x2', '\x404', '\x40A', '\x5', 
		'z', '>', '\x2', '\x405', '\x407', '\x5', '\xD8', 'm', '\x2', '\x406', 
		'\x405', '\x3', '\x2', '\x2', '\x2', '\x406', '\x407', '\x3', '\x2', '\x2', 
		'\x2', '\x407', '\x408', '\x3', '\x2', '\x2', '\x2', '\x408', '\x40A', 
		'\x5', '\x176', '\xBC', '\x2', '\x409', '\x3EF', '\x3', '\x2', '\x2', 
		'\x2', '\x409', '\x3F1', '\x3', '\x2', '\x2', '\x2', '\x409', '\x3F5', 
		'\x3', '\x2', '\x2', '\x2', '\x409', '\x3F9', '\x3', '\x2', '\x2', '\x2', 
		'\x409', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x409', '\x401', '\x3', 
		'\x2', '\x2', '\x2', '\x409', '\x404', '\x3', '\x2', '\x2', '\x2', '\x409', 
		'\x406', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x40B', '\x40D', '\x5', '\xD8', 'm', '\x2', '\x40C', '\x40B', 
		'\x3', '\x2', '\x2', '\x2', '\x40C', '\x40D', '\x3', '\x2', '\x2', '\x2', 
		'\x40D', '\x40E', '\x3', '\x2', '\x2', '\x2', '\x40E', '\x40F', '\a', 
		'\x86', '\x2', '\x2', '\x40F', '\x410', '\a', '\x80', '\x2', '\x2', '\x410', 
		'\x420', '\x5', '\x62', '\x32', '\x2', '\x411', '\x413', '\x5', '\xD8', 
		'm', '\x2', '\x412', '\x411', '\x3', '\x2', '\x2', '\x2', '\x412', '\x413', 
		'\x3', '\x2', '\x2', '\x2', '\x413', '\x414', '\x3', '\x2', '\x2', '\x2', 
		'\x414', '\x415', '\a', '\x11', '\x2', '\x2', '\x415', '\x416', '\x5', 
		'`', '\x31', '\x2', '\x416', '\x417', '\a', '\x80', '\x2', '\x2', '\x417', 
		'\x418', '\x5', '\x62', '\x32', '\x2', '\x418', '\x420', '\x3', '\x2', 
		'\x2', '\x2', '\x419', '\x41B', '\x5', '\xD8', 'm', '\x2', '\x41A', '\x419', 
		'\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', '\x3', '\x2', '\x2', '\x2', 
		'\x41B', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x41C', '\x41D', '\a', 
		'\x1C', '\x2', '\x2', '\x41D', '\x41E', '\a', '\x80', '\x2', '\x2', '\x41E', 
		'\x420', '\x5', '\x62', '\x32', '\x2', '\x41F', '\x40C', '\x3', '\x2', 
		'\x2', '\x2', '\x41F', '\x412', '\x3', '\x2', '\x2', '\x2', '\x41F', '\x41A', 
		'\x3', '\x2', '\x2', '\x2', '\x420', '\x65', '\x3', '\x2', '\x2', '\x2', 
		'\x421', '\x423', '\x5', '^', '\x30', '\x2', '\x422', '\x421', '\x3', 
		'\x2', '\x2', '\x2', '\x422', '\x423', '\x3', '\x2', '\x2', '\x2', '\x423', 
		'\x424', '\x3', '\x2', '\x2', '\x2', '\x424', '\x425', '\a', '\x82', '\x2', 
		'\x2', '\x425', 'g', '\x3', '\x2', '\x2', '\x2', '\x426', '\x428', '\a', 
		'[', '\x2', '\x2', '\x427', '\x429', '\x5', 'j', '\x36', '\x2', '\x428', 
		'\x427', '\x3', '\x2', '\x2', '\x2', '\x428', '\x429', '\x3', '\x2', '\x2', 
		'\x2', '\x429', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x42A', '\x42B', 
		'\a', '\\', '\x2', '\x2', '\x42B', 'i', '\x3', '\x2', '\x2', '\x2', '\x42C', 
		'\x42D', '\b', '\x36', '\x1', '\x2', '\x42D', '\x42E', '\x5', '\x62', 
		'\x32', '\x2', '\x42E', '\x433', '\x3', '\x2', '\x2', '\x2', '\x42F', 
		'\x430', '\f', '\x3', '\x2', '\x2', '\x430', '\x432', '\x5', '\x62', '\x32', 
		'\x2', '\x431', '\x42F', '\x3', '\x2', '\x2', '\x2', '\x432', '\x435', 
		'\x3', '\x2', '\x2', '\x2', '\x433', '\x431', '\x3', '\x2', '\x2', '\x2', 
		'\x433', '\x434', '\x3', '\x2', '\x2', '\x2', '\x434', 'k', '\x3', '\x2', 
		'\x2', '\x2', '\x435', '\x433', '\x3', '\x2', '\x2', '\x2', '\x436', '\x437', 
		'\a', ',', '\x2', '\x2', '\x437', '\x438', '\a', 'W', '\x2', '\x2', '\x438', 
		'\x439', '\x5', 'n', '\x38', '\x2', '\x439', '\x43A', '\a', 'X', '\x2', 
		'\x2', '\x43A', '\x43B', '\x5', '\x62', '\x32', '\x2', '\x43B', '\x44B', 
		'\x3', '\x2', '\x2', '\x2', '\x43C', '\x43D', '\a', ',', '\x2', '\x2', 
		'\x43D', '\x43E', '\a', 'W', '\x2', '\x2', '\x43E', '\x43F', '\x5', 'n', 
		'\x38', '\x2', '\x43F', '\x440', '\a', 'X', '\x2', '\x2', '\x440', '\x441', 
		'\x5', '\x62', '\x32', '\x2', '\x441', '\x442', '\a', '!', '\x2', '\x2', 
		'\x442', '\x443', '\x5', '\x62', '\x32', '\x2', '\x443', '\x44B', '\x3', 
		'\x2', '\x2', '\x2', '\x444', '\x445', '\a', '\x45', '\x2', '\x2', '\x445', 
		'\x446', '\a', 'W', '\x2', '\x2', '\x446', '\x447', '\x5', 'n', '\x38', 
		'\x2', '\x447', '\x448', '\a', 'X', '\x2', '\x2', '\x448', '\x449', '\x5', 
		'\x62', '\x32', '\x2', '\x449', '\x44B', '\x3', '\x2', '\x2', '\x2', '\x44A', 
		'\x436', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x43C', '\x3', '\x2', '\x2', 
		'\x2', '\x44A', '\x444', '\x3', '\x2', '\x2', '\x2', '\x44B', 'm', '\x3', 
		'\x2', '\x2', '\x2', '\x44C', '\x45D', '\x5', '^', '\x30', '\x2', '\x44D', 
		'\x44F', '\x5', '\xD8', 'm', '\x2', '\x44E', '\x44D', '\x3', '\x2', '\x2', 
		'\x2', '\x44E', '\x44F', '\x3', '\x2', '\x2', '\x2', '\x44F', '\x450', 
		'\x3', '\x2', '\x2', '\x2', '\x450', '\x451', '\x5', '\x90', 'I', '\x2', 
		'\x451', '\x452', '\x5', '\xF2', 'z', '\x2', '\x452', '\x453', '\a', 'g', 
		'\x2', '\x2', '\x453', '\x454', '\x5', '\x120', '\x91', '\x2', '\x454', 
		'\x45D', '\x3', '\x2', '\x2', '\x2', '\x455', '\x457', '\x5', '\xD8', 
		'm', '\x2', '\x456', '\x455', '\x3', '\x2', '\x2', '\x2', '\x456', '\x457', 
		'\x3', '\x2', '\x2', '\x2', '\x457', '\x458', '\x3', '\x2', '\x2', '\x2', 
		'\x458', '\x459', '\x5', '\x90', 'I', '\x2', '\x459', '\x45A', '\x5', 
		'\xF2', 'z', '\x2', '\x45A', '\x45B', '\x5', '\x124', '\x93', '\x2', '\x45B', 
		'\x45D', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x44C', '\x3', '\x2', '\x2', 
		'\x2', '\x45C', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x45C', '\x456', 
		'\x3', '\x2', '\x2', '\x2', '\x45D', 'o', '\x3', '\x2', '\x2', '\x2', 
		'\x45E', '\x45F', '\a', 'V', '\x2', '\x2', '\x45F', '\x460', '\a', 'W', 
		'\x2', '\x2', '\x460', '\x461', '\x5', 'n', '\x38', '\x2', '\x461', '\x462', 
		'\a', 'X', '\x2', '\x2', '\x462', '\x463', '\x5', '\x62', '\x32', '\x2', 
		'\x463', '\x482', '\x3', '\x2', '\x2', '\x2', '\x464', '\x465', '\a', 
		'\x1E', '\x2', '\x2', '\x465', '\x466', '\x5', '\x62', '\x32', '\x2', 
		'\x466', '\x467', '\a', 'V', '\x2', '\x2', '\x467', '\x468', '\a', 'W', 
		'\x2', '\x2', '\x468', '\x469', '\x5', '^', '\x30', '\x2', '\x469', '\x46A', 
		'\a', 'X', '\x2', '\x2', '\x46A', '\x46B', '\a', '\x82', '\x2', '\x2', 
		'\x46B', '\x482', '\x3', '\x2', '\x2', '\x2', '\x46C', '\x46D', '\a', 
		')', '\x2', '\x2', '\x46D', '\x46E', '\a', 'W', '\x2', '\x2', '\x46E', 
		'\x470', '\x5', 'r', ':', '\x2', '\x46F', '\x471', '\x5', 'n', '\x38', 
		'\x2', '\x470', '\x46F', '\x3', '\x2', '\x2', '\x2', '\x470', '\x471', 
		'\x3', '\x2', '\x2', '\x2', '\x471', '\x472', '\x3', '\x2', '\x2', '\x2', 
		'\x472', '\x474', '\a', '\x82', '\x2', '\x2', '\x473', '\x475', '\x5', 
		'^', '\x30', '\x2', '\x474', '\x473', '\x3', '\x2', '\x2', '\x2', '\x474', 
		'\x475', '\x3', '\x2', '\x2', '\x2', '\x475', '\x476', '\x3', '\x2', '\x2', 
		'\x2', '\x476', '\x477', '\a', 'X', '\x2', '\x2', '\x477', '\x478', '\x5', 
		'\x62', '\x32', '\x2', '\x478', '\x482', '\x3', '\x2', '\x2', '\x2', '\x479', 
		'\x47A', '\a', ')', '\x2', '\x2', '\x47A', '\x47B', '\a', 'W', '\x2', 
		'\x2', '\x47B', '\x47C', '\x5', 't', ';', '\x2', '\x47C', '\x47D', '\a', 
		'\x80', '\x2', '\x2', '\x47D', '\x47E', '\x5', 'v', '<', '\x2', '\x47E', 
		'\x47F', '\a', 'X', '\x2', '\x2', '\x47F', '\x480', '\x5', '\x62', '\x32', 
		'\x2', '\x480', '\x482', '\x3', '\x2', '\x2', '\x2', '\x481', '\x45E', 
		'\x3', '\x2', '\x2', '\x2', '\x481', '\x464', '\x3', '\x2', '\x2', '\x2', 
		'\x481', '\x46C', '\x3', '\x2', '\x2', '\x2', '\x481', '\x479', '\x3', 
		'\x2', '\x2', '\x2', '\x482', 'q', '\x3', '\x2', '\x2', '\x2', '\x483', 
		'\x486', '\x5', '\x66', '\x34', '\x2', '\x484', '\x486', '\x5', '\x84', 
		'\x43', '\x2', '\x485', '\x483', '\x3', '\x2', '\x2', '\x2', '\x485', 
		'\x484', '\x3', '\x2', '\x2', '\x2', '\x486', 's', '\x3', '\x2', '\x2', 
		'\x2', '\x487', '\x489', '\x5', '\xD8', 'm', '\x2', '\x488', '\x487', 
		'\x3', '\x2', '\x2', '\x2', '\x488', '\x489', '\x3', '\x2', '\x2', '\x2', 
		'\x489', '\x48A', '\x3', '\x2', '\x2', '\x2', '\x48A', '\x48B', '\x5', 
		'\x90', 'I', '\x2', '\x48B', '\x48C', '\x5', '\xF2', 'z', '\x2', '\x48C', 
		'u', '\x3', '\x2', '\x2', '\x2', '\x48D', '\x490', '\x5', '^', '\x30', 
		'\x2', '\x48E', '\x490', '\x5', '\x124', '\x93', '\x2', '\x48F', '\x48D', 
		'\x3', '\x2', '\x2', '\x2', '\x48F', '\x48E', '\x3', '\x2', '\x2', '\x2', 
		'\x490', 'w', '\x3', '\x2', '\x2', '\x2', '\x491', '\x492', '\a', '\x10', 
		'\x2', '\x2', '\x492', '\x4A2', '\a', '\x82', '\x2', '\x2', '\x493', '\x494', 
		'\a', '\x1A', '\x2', '\x2', '\x494', '\x4A2', '\a', '\x82', '\x2', '\x2', 
		'\x495', '\x497', '\a', '=', '\x2', '\x2', '\x496', '\x498', '\x5', '^', 
		'\x30', '\x2', '\x497', '\x496', '\x3', '\x2', '\x2', '\x2', '\x497', 
		'\x498', '\x3', '\x2', '\x2', '\x2', '\x498', '\x499', '\x3', '\x2', '\x2', 
		'\x2', '\x499', '\x4A2', '\a', '\x82', '\x2', '\x2', '\x49A', '\x49B', 
		'\a', '=', '\x2', '\x2', '\x49B', '\x49C', '\x5', '\x124', '\x93', '\x2', 
		'\x49C', '\x49D', '\a', '\x82', '\x2', '\x2', '\x49D', '\x4A2', '\x3', 
		'\x2', '\x2', '\x2', '\x49E', '\x49F', '\a', '+', '\x2', '\x2', '\x49F', 
		'\x4A0', '\a', '\x86', '\x2', '\x2', '\x4A0', '\x4A2', '\a', '\x82', '\x2', 
		'\x2', '\x4A1', '\x491', '\x3', '\x2', '\x2', '\x2', '\x4A1', '\x493', 
		'\x3', '\x2', '\x2', '\x2', '\x4A1', '\x495', '\x3', '\x2', '\x2', '\x2', 
		'\x4A1', '\x49A', '\x3', '\x2', '\x2', '\x2', '\x4A1', '\x49E', '\x3', 
		'\x2', '\x2', '\x2', '\x4A2', 'y', '\x3', '\x2', '\x2', '\x2', '\x4A3', 
		'\x4A4', '\x5', '\x80', '\x41', '\x2', '\x4A4', '{', '\x3', '\x2', '\x2', 
		'\x2', '\x4A5', '\x4A6', '\b', '?', '\x1', '\x2', '\x4A6', '\x4A7', '\x5', 
		'~', '@', '\x2', '\x4A7', '\x4AC', '\x3', '\x2', '\x2', '\x2', '\x4A8', 
		'\x4A9', '\f', '\x3', '\x2', '\x2', '\x4A9', '\x4AB', '\x5', '~', '@', 
		'\x2', '\x4AA', '\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4AB', '\x4AE', 
		'\x3', '\x2', '\x2', '\x2', '\x4AC', '\x4AA', '\x3', '\x2', '\x2', '\x2', 
		'\x4AC', '\x4AD', '\x3', '\x2', '\x2', '\x2', '\x4AD', '}', '\x3', '\x2', 
		'\x2', '\x2', '\x4AE', '\x4AC', '\x3', '\x2', '\x2', '\x2', '\x4AF', '\x4B9', 
		'\x5', '\x80', '\x41', '\x2', '\x4B0', '\x4B9', '\x5', '\x118', '\x8D', 
		'\x2', '\x4B1', '\x4B9', '\x5', '\x15E', '\xB0', '\x2', '\x4B2', '\x4B9', 
		'\x5', '\x172', '\xBA', '\x2', '\x4B3', '\x4B9', '\x5', '\x174', '\xBB', 
		'\x2', '\x4B4', '\x4B9', '\x5', '\xD6', 'l', '\x2', '\x4B5', '\x4B9', 
		'\x5', '\xBE', '`', '\x2', '\x4B6', '\x4B9', '\x5', '\x8A', '\x46', '\x2', 
		'\x4B7', '\x4B9', '\x5', '\x8C', 'G', '\x2', '\x4B8', '\x4AF', '\x3', 
		'\x2', '\x2', '\x2', '\x4B8', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4B8', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B2', '\x3', '\x2', '\x2', 
		'\x2', '\x4B8', '\x4B3', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B4', 
		'\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B5', '\x3', '\x2', '\x2', '\x2', 
		'\x4B8', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\x4B8', '\x4B7', '\x3', 
		'\x2', '\x2', '\x2', '\x4B9', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x4BA', 
		'\x4C3', '\x5', '\x84', '\x43', '\x2', '\x4BB', '\x4C3', '\x5', '\xD4', 
		'k', '\x2', '\x4BC', '\x4C3', '\x5', '\xCC', 'g', '\x2', '\x4BD', '\x4C3', 
		'\x5', '\xD0', 'i', '\x2', '\x4BE', '\x4C3', '\x5', '\xD2', 'j', '\x2', 
		'\x4BF', '\x4C3', '\x5', '\x88', '\x45', '\x2', '\x4C0', '\x4C3', '\x5', 
		'\x82', '\x42', '\x2', '\x4C1', '\x4C3', '\x5', '\xAE', 'X', '\x2', '\x4C2', 
		'\x4BA', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4BB', '\x3', '\x2', '\x2', 
		'\x2', '\x4C2', '\x4BC', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4BD', 
		'\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4BE', '\x3', '\x2', '\x2', '\x2', 
		'\x4C2', '\x4BF', '\x3', '\x2', '\x2', '\x2', '\x4C2', '\x4C0', '\x3', 
		'\x2', '\x2', '\x2', '\x4C2', '\x4C1', '\x3', '\x2', '\x2', '\x2', '\x4C3', 
		'\x81', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C5', '\a', 'Q', '\x2', 
		'\x2', '\x4C5', '\x4C7', '\a', '\x86', '\x2', '\x2', '\x4C6', '\x4C8', 
		'\x5', '\xD8', 'm', '\x2', '\x4C7', '\x4C6', '\x3', '\x2', '\x2', '\x2', 
		'\x4C7', '\x4C8', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4C9', '\x3', 
		'\x2', '\x2', '\x2', '\x4C9', '\x4CA', '\a', 'g', '\x2', '\x2', '\x4CA', 
		'\x4CB', '\x5', '\x106', '\x84', '\x2', '\x4CB', '\x4CC', '\a', '\x82', 
		'\x2', '\x2', '\x4CC', '\x83', '\x3', '\x2', '\x2', '\x2', '\x4CD', '\x4CF', 
		'\x5', '\x90', 'I', '\x2', '\x4CE', '\x4CD', '\x3', '\x2', '\x2', '\x2', 
		'\x4CE', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4D1', '\x3', 
		'\x2', '\x2', '\x2', '\x4D0', '\x4D2', '\x5', '\xEE', 'x', '\x2', '\x4D1', 
		'\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D2', '\x3', '\x2', '\x2', 
		'\x2', '\x4D2', '\x4D3', '\x3', '\x2', '\x2', '\x2', '\x4D3', '\x4DC', 
		'\a', '\x82', '\x2', '\x2', '\x4D4', '\x4D6', '\x5', '\xD8', 'm', '\x2', 
		'\x4D5', '\x4D7', '\x5', '\x90', 'I', '\x2', '\x4D6', '\x4D5', '\x3', 
		'\x2', '\x2', '\x2', '\x4D6', '\x4D7', '\x3', '\x2', '\x2', '\x2', '\x4D7', 
		'\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4D8', '\x4D9', '\x5', '\xEE', 
		'x', '\x2', '\x4D9', '\x4DA', '\a', '\x82', '\x2', '\x2', '\x4DA', '\x4DC', 
		'\x3', '\x2', '\x2', '\x2', '\x4DB', '\x4CE', '\x3', '\x2', '\x2', '\x2', 
		'\x4DB', '\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4DC', '\x85', '\x3', 
		'\x2', '\x2', '\x2', '\x4DD', '\x4DF', '\a', '\x8F', '\x2', '\x2', '\x4DE', 
		'\x4DD', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E0', '\x3', '\x2', '\x2', 
		'\x2', '\x4E0', '\x4DE', '\x3', '\x2', '\x2', '\x2', '\x4E0', '\x4E1', 
		'\x3', '\x2', '\x2', '\x2', '\x4E1', '\x87', '\x3', '\x2', '\x2', '\x2', 
		'\x4E2', '\x4E3', '\a', '\x42', '\x2', '\x2', '\x4E3', '\x4E4', '\a', 
		'W', '\x2', '\x2', '\x4E4', '\x4E5', '\x5', '`', '\x31', '\x2', '\x4E5', 
		'\x4E6', '\a', '|', '\x2', '\x2', '\x4E6', '\x4E7', '\x5', '\x86', '\x44', 
		'\x2', '\x4E7', '\x4E8', '\a', 'X', '\x2', '\x2', '\x4E8', '\x4E9', '\a', 
		'\x82', '\x2', '\x2', '\x4E9', '\x89', '\x3', '\x2', '\x2', '\x2', '\x4EA', 
		'\x4EB', '\a', '\x82', '\x2', '\x2', '\x4EB', '\x8B', '\x3', '\x2', '\x2', 
		'\x2', '\x4EC', '\x4ED', '\x5', '\xD8', 'm', '\x2', '\x4ED', '\x4EE', 
		'\a', '\x82', '\x2', '\x2', '\x4EE', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x4EF', '\x4F6', '\x5', '\x92', 'J', '\x2', '\x4F0', '\x4F6', '\x5', 
		'\x98', 'M', '\x2', '\x4F1', '\x4F6', '\x5', '\x94', 'K', '\x2', '\x4F2', 
		'\x4F6', '\a', '*', '\x2', '\x2', '\x4F3', '\x4F6', '\a', 'L', '\x2', 
		'\x2', '\x4F4', '\x4F6', '\a', '\x18', '\x2', '\x2', '\x4F5', '\x4EF', 
		'\x3', '\x2', '\x2', '\x2', '\x4F5', '\x4F0', '\x3', '\x2', '\x2', '\x2', 
		'\x4F5', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F5', '\x4F2', '\x3', 
		'\x2', '\x2', '\x2', '\x4F5', '\x4F3', '\x3', '\x2', '\x2', '\x2', '\x4F5', 
		'\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\x8F', '\x3', '\x2', '\x2', 
		'\x2', '\x4F7', '\x4F9', '\x5', '\x8E', 'H', '\x2', '\x4F8', '\x4FA', 
		'\x5', '\xD8', 'm', '\x2', '\x4F9', '\x4F8', '\x3', '\x2', '\x2', '\x2', 
		'\x4F9', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FF', '\x3', 
		'\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x5', '\x8E', 'H', '\x2', '\x4FC', 
		'\x4FD', '\x5', '\x90', 'I', '\x2', '\x4FD', '\x4FF', '\x3', '\x2', '\x2', 
		'\x2', '\x4FE', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\x4FE', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x4FF', '\x91', '\x3', '\x2', '\x2', '\x2', 
		'\x500', '\x501', '\t', '\x4', '\x2', '\x2', '\x501', '\x93', '\x3', '\x2', 
		'\x2', '\x2', '\x502', '\x503', '\t', '\x5', '\x2', '\x2', '\x503', '\x95', 
		'\x3', '\x2', '\x2', '\x2', '\x504', '\x505', '\a', '\x86', '\x2', '\x2', 
		'\x505', '\x97', '\x3', '\x2', '\x2', '\x2', '\x506', '\x50A', '\x5', 
		'\x9A', 'N', '\x2', '\x507', '\x50A', '\x5', '\x128', '\x95', '\x2', '\x508', 
		'\x50A', '\x5', '\xAA', 'V', '\x2', '\x509', '\x506', '\x3', '\x2', '\x2', 
		'\x2', '\x509', '\x507', '\x3', '\x2', '\x2', '\x2', '\x509', '\x508', 
		'\x3', '\x2', '\x2', '\x2', '\x50A', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x50B', '\x510', '\x5', '\xA0', 'Q', '\x2', '\x50C', '\x510', '\x5', 
		'\xA6', 'T', '\x2', '\x50D', '\x510', '\x5', '\x170', '\xB9', '\x2', '\x50E', 
		'\x510', '\x5', '\x100', '\x81', '\x2', '\x50F', '\x50B', '\x3', '\x2', 
		'\x2', '\x2', '\x50F', '\x50C', '\x3', '\x2', '\x2', '\x2', '\x50F', '\x50D', 
		'\x3', '\x2', '\x2', '\x2', '\x50F', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x510', '\x9B', '\x3', '\x2', '\x2', '\x2', '\x511', '\x513', '\x5', 
		'\x98', 'M', '\x2', '\x512', '\x514', '\x5', '\xD8', 'm', '\x2', '\x513', 
		'\x512', '\x3', '\x2', '\x2', '\x2', '\x513', '\x514', '\x3', '\x2', '\x2', 
		'\x2', '\x514', '\x519', '\x3', '\x2', '\x2', '\x2', '\x515', '\x516', 
		'\x5', '\x98', 'M', '\x2', '\x516', '\x517', '\x5', '\x9C', 'O', '\x2', 
		'\x517', '\x519', '\x3', '\x2', '\x2', '\x2', '\x518', '\x511', '\x3', 
		'\x2', '\x2', '\x2', '\x518', '\x515', '\x3', '\x2', '\x2', '\x2', '\x519', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x51A', '\x51C', '\x5', '\x9A', 'N', 
		'\x2', '\x51B', '\x51D', '\x5', '\xD8', 'm', '\x2', '\x51C', '\x51B', 
		'\x3', '\x2', '\x2', '\x2', '\x51C', '\x51D', '\x3', '\x2', '\x2', '\x2', 
		'\x51D', '\x522', '\x3', '\x2', '\x2', '\x2', '\x51E', '\x51F', '\x5', 
		'\x9A', 'N', '\x2', '\x51F', '\x520', '\x5', '\x9E', 'P', '\x2', '\x520', 
		'\x522', '\x3', '\x2', '\x2', '\x2', '\x521', '\x51A', '\x3', '\x2', '\x2', 
		'\x2', '\x521', '\x51E', '\x3', '\x2', '\x2', '\x2', '\x522', '\x9F', 
		'\x3', '\x2', '\x2', '\x2', '\x523', '\x525', '\x5', '\f', '\a', '\x2', 
		'\x524', '\x523', '\x3', '\x2', '\x2', '\x2', '\x524', '\x525', '\x3', 
		'\x2', '\x2', '\x2', '\x525', '\x526', '\x3', '\x2', '\x2', '\x2', '\x526', 
		'\x53B', '\x5', '\xA2', 'R', '\x2', '\x527', '\x528', '\x5', '\f', '\a', 
		'\x2', '\x528', '\x529', '\a', '\x46', '\x2', '\x2', '\x529', '\x52A', 
		'\x5', '\x166', '\xB4', '\x2', '\x52A', '\x53B', '\x3', '\x2', '\x2', 
		'\x2', '\x52B', '\x53B', '\a', '\x13', '\x2', '\x2', '\x52C', '\x53B', 
		'\a', '\x14', '\x2', '\x2', '\x52D', '\x53B', '\a', '\x15', '\x2', '\x2', 
		'\x52E', '\x53B', '\a', 'U', '\x2', '\x2', '\x52F', '\x53B', '\a', '\xF', 
		'\x2', '\x2', '\x530', '\x53B', '\a', '>', '\x2', '\x2', '\x531', '\x53B', 
		'\a', '.', '\x2', '\x2', '\x532', '\x53B', '\a', '/', '\x2', '\x2', '\x533', 
		'\x53B', '\a', '?', '\x2', '\x2', '\x534', '\x53B', '\a', 'P', '\x2', 
		'\x2', '\x535', '\x53B', '\a', '(', '\x2', '\x2', '\x536', '\x53B', '\a', 
		'\x1F', '\x2', '\x2', '\x537', '\x53B', '\a', 'S', '\x2', '\x2', '\x538', 
		'\x53B', '\a', '\xE', '\x2', '\x2', '\x539', '\x53B', '\x5', '\xA4', 'S', 
		'\x2', '\x53A', '\x524', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x527', 
		'\x3', '\x2', '\x2', '\x2', '\x53A', '\x52B', '\x3', '\x2', '\x2', '\x2', 
		'\x53A', '\x52C', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x52D', '\x3', 
		'\x2', '\x2', '\x2', '\x53A', '\x52E', '\x3', '\x2', '\x2', '\x2', '\x53A', 
		'\x52F', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x530', '\x3', '\x2', '\x2', 
		'\x2', '\x53A', '\x531', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x532', 
		'\x3', '\x2', '\x2', '\x2', '\x53A', '\x533', '\x3', '\x2', '\x2', '\x2', 
		'\x53A', '\x534', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x535', '\x3', 
		'\x2', '\x2', '\x2', '\x53A', '\x536', '\x3', '\x2', '\x2', '\x2', '\x53A', 
		'\x537', '\x3', '\x2', '\x2', '\x2', '\x53A', '\x538', '\x3', '\x2', '\x2', 
		'\x2', '\x53A', '\x539', '\x3', '\x2', '\x2', '\x2', '\x53B', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '\x53C', '\x541', '\x5', '\x126', '\x94', 
		'\x2', '\x53D', '\x541', '\x5', '\xA8', 'U', '\x2', '\x53E', '\x541', 
		'\x5', '\x96', 'L', '\x2', '\x53F', '\x541', '\x5', '\x166', '\xB4', '\x2', 
		'\x540', '\x53C', '\x3', '\x2', '\x2', '\x2', '\x540', '\x53D', '\x3', 
		'\x2', '\x2', '\x2', '\x540', '\x53E', '\x3', '\x2', '\x2', '\x2', '\x540', 
		'\x53F', '\x3', '\x2', '\x2', '\x2', '\x541', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x542', '\x543', '\a', '\x1B', '\x2', '\x2', '\x543', '\x544', 
		'\a', 'W', '\x2', '\x2', '\x544', '\x545', '\x5', '^', '\x30', '\x2', 
		'\x545', '\x546', '\a', 'X', '\x2', '\x2', '\x546', '\x54C', '\x3', '\x2', 
		'\x2', '\x2', '\x547', '\x548', '\a', '\x1B', '\x2', '\x2', '\x548', '\x549', 
		'\a', 'W', '\x2', '\x2', '\x549', '\x54A', '\a', '\xE', '\x2', '\x2', 
		'\x54A', '\x54C', '\a', 'X', '\x2', '\x2', '\x54B', '\x542', '\x3', '\x2', 
		'\x2', '\x2', '\x54B', '\x547', '\x3', '\x2', '\x2', '\x2', '\x54C', '\xA5', 
		'\x3', '\x2', '\x2', '\x2', '\x54D', '\x54F', '\x5', '\x130', '\x99', 
		'\x2', '\x54E', '\x550', '\x5', '\xD8', 'm', '\x2', '\x54F', '\x54E', 
		'\x3', '\x2', '\x2', '\x2', '\x54F', '\x550', '\x3', '\x2', '\x2', '\x2', 
		'\x550', '\x552', '\x3', '\x2', '\x2', '\x2', '\x551', '\x553', '\x5', 
		'\f', '\a', '\x2', '\x552', '\x551', '\x3', '\x2', '\x2', '\x2', '\x552', 
		'\x553', '\x3', '\x2', '\x2', '\x2', '\x553', '\x554', '\x3', '\x2', '\x2', 
		'\x2', '\x554', '\x555', '\a', '\x86', '\x2', '\x2', '\x555', '\x566', 
		'\x3', '\x2', '\x2', '\x2', '\x556', '\x557', '\x5', '\x130', '\x99', 
		'\x2', '\x557', '\x558', '\x5', '\x166', '\xB4', '\x2', '\x558', '\x566', 
		'\x3', '\x2', '\x2', '\x2', '\x559', '\x55A', '\x5', '\x130', '\x99', 
		'\x2', '\x55A', '\x55C', '\x5', '\f', '\a', '\x2', '\x55B', '\x55D', '\a', 
		'\x46', '\x2', '\x2', '\x55C', '\x55B', '\x3', '\x2', '\x2', '\x2', '\x55C', 
		'\x55D', '\x3', '\x2', '\x2', '\x2', '\x55D', '\x55E', '\x3', '\x2', '\x2', 
		'\x2', '\x55E', '\x55F', '\x5', '\x166', '\xB4', '\x2', '\x55F', '\x566', 
		'\x3', '\x2', '\x2', '\x2', '\x560', '\x562', '\a', '\"', '\x2', '\x2', 
		'\x561', '\x563', '\x5', '\f', '\a', '\x2', '\x562', '\x561', '\x3', '\x2', 
		'\x2', '\x2', '\x562', '\x563', '\x3', '\x2', '\x2', '\x2', '\x563', '\x564', 
		'\x3', '\x2', '\x2', '\x2', '\x564', '\x566', '\a', '\x86', '\x2', '\x2', 
		'\x565', '\x54D', '\x3', '\x2', '\x2', '\x2', '\x565', '\x556', '\x3', 
		'\x2', '\x2', '\x2', '\x565', '\x559', '\x3', '\x2', '\x2', '\x2', '\x565', 
		'\x560', '\x3', '\x2', '\x2', '\x2', '\x566', '\xA7', '\x3', '\x2', '\x2', 
		'\x2', '\x567', '\x568', '\a', '\x86', '\x2', '\x2', '\x568', '\xA9', 
		'\x3', '\x2', '\x2', '\x2', '\x569', '\x56A', '\x5', '\xAC', 'W', '\x2', 
		'\x56A', '\x56C', '\a', '[', '\x2', '\x2', '\x56B', '\x56D', '\x5', '\xB4', 
		'[', '\x2', '\x56C', '\x56B', '\x3', '\x2', '\x2', '\x2', '\x56C', '\x56D', 
		'\x3', '\x2', '\x2', '\x2', '\x56D', '\x56E', '\x3', '\x2', '\x2', '\x2', 
		'\x56E', '\x56F', '\a', '\\', '\x2', '\x2', '\x56F', '\x577', '\x3', '\x2', 
		'\x2', '\x2', '\x570', '\x571', '\x5', '\xAC', 'W', '\x2', '\x571', '\x572', 
		'\a', '[', '\x2', '\x2', '\x572', '\x573', '\x5', '\xB4', '[', '\x2', 
		'\x573', '\x574', '\a', '|', '\x2', '\x2', '\x574', '\x575', '\a', '\\', 
		'\x2', '\x2', '\x575', '\x577', '\x3', '\x2', '\x2', '\x2', '\x576', '\x569', 
		'\x3', '\x2', '\x2', '\x2', '\x576', '\x570', '\x3', '\x2', '\x2', '\x2', 
		'\x577', '\xAB', '\x3', '\x2', '\x2', '\x2', '\x578', '\x57A', '\x5', 
		'\xB0', 'Y', '\x2', '\x579', '\x57B', '\x5', '\xD8', 'm', '\x2', '\x57A', 
		'\x579', '\x3', '\x2', '\x2', '\x2', '\x57A', '\x57B', '\x3', '\x2', '\x2', 
		'\x2', '\x57B', '\x57D', '\x3', '\x2', '\x2', '\x2', '\x57C', '\x57E', 
		'\a', '\x86', '\x2', '\x2', '\x57D', '\x57C', '\x3', '\x2', '\x2', '\x2', 
		'\x57D', '\x57E', '\x3', '\x2', '\x2', '\x2', '\x57E', '\x580', '\x3', 
		'\x2', '\x2', '\x2', '\x57F', '\x581', '\x5', '\xB2', 'Z', '\x2', '\x580', 
		'\x57F', '\x3', '\x2', '\x2', '\x2', '\x580', '\x581', '\x3', '\x2', '\x2', 
		'\x2', '\x581', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x582', '\x584', 
		'\x5', '\xB0', 'Y', '\x2', '\x583', '\x585', '\x5', '\xD8', 'm', '\x2', 
		'\x584', '\x583', '\x3', '\x2', '\x2', '\x2', '\x584', '\x585', '\x3', 
		'\x2', '\x2', '\x2', '\x585', '\x586', '\x3', '\x2', '\x2', '\x2', '\x586', 
		'\x587', '\x5', '\f', '\a', '\x2', '\x587', '\x589', '\a', '\x86', '\x2', 
		'\x2', '\x588', '\x58A', '\x5', '\xB2', 'Z', '\x2', '\x589', '\x588', 
		'\x3', '\x2', '\x2', '\x2', '\x589', '\x58A', '\x3', '\x2', '\x2', '\x2', 
		'\x58A', '\x58C', '\x3', '\x2', '\x2', '\x2', '\x58B', '\x578', '\x3', 
		'\x2', '\x2', '\x2', '\x58B', '\x582', '\x3', '\x2', '\x2', '\x2', '\x58C', 
		'\xAD', '\x3', '\x2', '\x2', '\x2', '\x58D', '\x58F', '\x5', '\xB0', 'Y', 
		'\x2', '\x58E', '\x590', '\x5', '\xD8', 'm', '\x2', '\x58F', '\x58E', 
		'\x3', '\x2', '\x2', '\x2', '\x58F', '\x590', '\x3', '\x2', '\x2', '\x2', 
		'\x590', '\x591', '\x3', '\x2', '\x2', '\x2', '\x591', '\x593', '\a', 
		'\x86', '\x2', '\x2', '\x592', '\x594', '\x5', '\xB2', 'Z', '\x2', '\x593', 
		'\x592', '\x3', '\x2', '\x2', '\x2', '\x593', '\x594', '\x3', '\x2', '\x2', 
		'\x2', '\x594', '\x595', '\x3', '\x2', '\x2', '\x2', '\x595', '\x596', 
		'\a', '\x82', '\x2', '\x2', '\x596', '\xAF', '\x3', '\x2', '\x2', '\x2', 
		'\x597', '\x59D', '\a', '\"', '\x2', '\x2', '\x598', '\x599', '\a', '\"', 
		'\x2', '\x2', '\x599', '\x59D', '\a', '\x16', '\x2', '\x2', '\x59A', '\x59B', 
		'\a', '\"', '\x2', '\x2', '\x59B', '\x59D', '\a', '\x44', '\x2', '\x2', 
		'\x59C', '\x597', '\x3', '\x2', '\x2', '\x2', '\x59C', '\x598', '\x3', 
		'\x2', '\x2', '\x2', '\x59C', '\x59A', '\x3', '\x2', '\x2', '\x2', '\x59D', 
		'\xB1', '\x3', '\x2', '\x2', '\x2', '\x59E', '\x59F', '\a', '\x80', '\x2', 
		'\x2', '\x59F', '\x5A0', '\x5', '\x9C', 'O', '\x2', '\x5A0', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x5A1', '\x5A2', '\b', '[', '\x1', '\x2', '\x5A2', 
		'\x5A3', '\x5', '\xB6', '\\', '\x2', '\x5A3', '\x5A9', '\x3', '\x2', '\x2', 
		'\x2', '\x5A4', '\x5A5', '\f', '\x3', '\x2', '\x2', '\x5A5', '\x5A6', 
		'\a', '|', '\x2', '\x2', '\x5A6', '\x5A8', '\x5', '\xB6', '\\', '\x2', 
		'\x5A7', '\x5A4', '\x3', '\x2', '\x2', '\x2', '\x5A8', '\x5AB', '\x3', 
		'\x2', '\x2', '\x2', '\x5A9', '\x5A7', '\x3', '\x2', '\x2', '\x2', '\x5A9', 
		'\x5AA', '\x3', '\x2', '\x2', '\x2', '\x5AA', '\xB5', '\x3', '\x2', '\x2', 
		'\x2', '\x5AB', '\x5A9', '\x3', '\x2', '\x2', '\x2', '\x5AC', '\x5B2', 
		'\x5', '\xB8', ']', '\x2', '\x5AD', '\x5AE', '\x5', '\xB8', ']', '\x2', 
		'\x5AE', '\x5AF', '\a', 'g', '\x2', '\x2', '\x5AF', '\x5B0', '\x5', '`', 
		'\x31', '\x2', '\x5B0', '\x5B2', '\x3', '\x2', '\x2', '\x2', '\x5B1', 
		'\x5AC', '\x3', '\x2', '\x2', '\x2', '\x5B1', '\x5AD', '\x3', '\x2', '\x2', 
		'\x2', '\x5B2', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x5B3', '\x5B4', 
		'\a', '\x86', '\x2', '\x2', '\x5B4', '\xB9', '\x3', '\x2', '\x2', '\x2', 
		'\x5B5', '\x5B8', '\x5', '\xBC', '_', '\x2', '\x5B6', '\x5B8', '\x5', 
		'\xCA', '\x66', '\x2', '\x5B7', '\x5B5', '\x3', '\x2', '\x2', '\x2', '\x5B7', 
		'\x5B6', '\x3', '\x2', '\x2', '\x2', '\x5B8', '\xBB', '\x3', '\x2', '\x2', 
		'\x2', '\x5B9', '\x5BA', '\a', '\x86', '\x2', '\x2', '\x5BA', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\x5BB', '\x5BE', '\x5', '\xC0', '\x61', '\x2', 
		'\x5BC', '\x5BE', '\x5', '\xC6', '\x64', '\x2', '\x5BD', '\x5BB', '\x3', 
		'\x2', '\x2', '\x2', '\x5BD', '\x5BC', '\x3', '\x2', '\x2', '\x2', '\x5BE', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\x5BF', '\x5C2', '\x5', '\xC2', '\x62', 
		'\x2', '\x5C0', '\x5C2', '\x5', '\xC4', '\x63', '\x2', '\x5C1', '\x5BF', 
		'\x3', '\x2', '\x2', '\x2', '\x5C1', '\x5C0', '\x3', '\x2', '\x2', '\x2', 
		'\x5C2', '\xC1', '\x3', '\x2', '\x2', '\x2', '\x5C3', '\x5C5', '\a', '-', 
		'\x2', '\x2', '\x5C4', '\x5C3', '\x3', '\x2', '\x2', '\x2', '\x5C4', '\x5C5', 
		'\x3', '\x2', '\x2', '\x2', '\x5C5', '\x5C6', '\x3', '\x2', '\x2', '\x2', 
		'\x5C6', '\x5C7', '\a', '\x31', '\x2', '\x2', '\x5C7', '\x5C8', '\a', 
		'\x86', '\x2', '\x2', '\x5C8', '\x5C9', '\a', '[', '\x2', '\x2', '\x5C9', 
		'\x5CA', '\x5', '\xC8', '\x65', '\x2', '\x5CA', '\x5CB', '\a', '\\', '\x2', 
		'\x2', '\x5CB', '\xC3', '\x3', '\x2', '\x2', '\x2', '\x5CC', '\x5CE', 
		'\a', '-', '\x2', '\x2', '\x5CD', '\x5CC', '\x3', '\x2', '\x2', '\x2', 
		'\x5CD', '\x5CE', '\x3', '\x2', '\x2', '\x2', '\x5CE', '\x5CF', '\x3', 
		'\x2', '\x2', '\x2', '\x5CF', '\x5D0', '\a', '\x31', '\x2', '\x2', '\x5D0', 
		'\x5D1', '\x5', '\xBC', '_', '\x2', '\x5D1', '\x5D2', '\a', '[', '\x2', 
		'\x2', '\x5D2', '\x5D3', '\x5', '\xC8', '\x65', '\x2', '\x5D3', '\x5D4', 
		'\a', '\\', '\x2', '\x2', '\x5D4', '\xC5', '\x3', '\x2', '\x2', '\x2', 
		'\x5D5', '\x5D7', '\a', '-', '\x2', '\x2', '\x5D6', '\x5D5', '\x3', '\x2', 
		'\x2', '\x2', '\x5D6', '\x5D7', '\x3', '\x2', '\x2', '\x2', '\x5D7', '\x5D8', 
		'\x3', '\x2', '\x2', '\x2', '\x5D8', '\x5D9', '\a', '\x31', '\x2', '\x2', 
		'\x5D9', '\x5DA', '\a', '[', '\x2', '\x2', '\x5DA', '\x5DB', '\x5', '\xC8', 
		'\x65', '\x2', '\x5DB', '\x5DC', '\a', '\\', '\x2', '\x2', '\x5DC', '\xC7', 
		'\x3', '\x2', '\x2', '\x2', '\x5DD', '\x5DF', '\x5', '|', '?', '\x2', 
		'\x5DE', '\x5DD', '\x3', '\x2', '\x2', '\x2', '\x5DE', '\x5DF', '\x3', 
		'\x2', '\x2', '\x2', '\x5DF', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x5E0', 
		'\x5E1', '\a', '\x86', '\x2', '\x2', '\x5E1', '\xCB', '\x3', '\x2', '\x2', 
		'\x2', '\x5E2', '\x5E3', '\a', '\x31', '\x2', '\x2', '\x5E3', '\x5E4', 
		'\a', '\x86', '\x2', '\x2', '\x5E4', '\x5E5', '\a', 'g', '\x2', '\x2', 
		'\x5E5', '\x5E6', '\x5', '\xCE', 'h', '\x2', '\x5E6', '\x5E7', '\a', '\x82', 
		'\x2', '\x2', '\x5E7', '\xCD', '\x3', '\x2', '\x2', '\x2', '\x5E8', '\x5EA', 
		'\x5', '\f', '\a', '\x2', '\x5E9', '\x5E8', '\x3', '\x2', '\x2', '\x2', 
		'\x5E9', '\x5EA', '\x3', '\x2', '\x2', '\x2', '\x5EA', '\x5EB', '\x3', 
		'\x2', '\x2', '\x2', '\x5EB', '\x5EC', '\x5', '\xBA', '^', '\x2', '\x5EC', 
		'\xCF', '\x3', '\x2', '\x2', '\x2', '\x5ED', '\x5EF', '\a', 'Q', '\x2', 
		'\x2', '\x5EE', '\x5F0', '\a', 'N', '\x2', '\x2', '\x5EF', '\x5EE', '\x3', 
		'\x2', '\x2', '\x2', '\x5EF', '\x5F0', '\x3', '\x2', '\x2', '\x2', '\x5F0', 
		'\x5F1', '\x3', '\x2', '\x2', '\x2', '\x5F1', '\x5F2', '\x5', '\f', '\a', 
		'\x2', '\x5F2', '\x5F3', '\x5', '\b', '\x5', '\x2', '\x5F3', '\x5F4', 
		'\a', '\x82', '\x2', '\x2', '\x5F4', '\x5FB', '\x3', '\x2', '\x2', '\x2', 
		'\x5F5', '\x5F6', '\a', 'Q', '\x2', '\x2', '\x5F6', '\x5F7', '\a', '\x81', 
		'\x2', '\x2', '\x5F7', '\x5F8', '\x5', '\b', '\x5', '\x2', '\x5F8', '\x5F9', 
		'\a', '\x82', '\x2', '\x2', '\x5F9', '\x5FB', '\x3', '\x2', '\x2', '\x2', 
		'\x5FA', '\x5ED', '\x3', '\x2', '\x2', '\x2', '\x5FA', '\x5F5', '\x3', 
		'\x2', '\x2', '\x2', '\x5FB', '\xD1', '\x3', '\x2', '\x2', '\x2', '\x5FC', 
		'\x5FE', '\x5', '\xD8', 'm', '\x2', '\x5FD', '\x5FC', '\x3', '\x2', '\x2', 
		'\x2', '\x5FD', '\x5FE', '\x3', '\x2', '\x2', '\x2', '\x5FE', '\x5FF', 
		'\x3', '\x2', '\x2', '\x2', '\x5FF', '\x600', '\a', 'Q', '\x2', '\x2', 
		'\x600', '\x602', '\a', '\x31', '\x2', '\x2', '\x601', '\x603', '\x5', 
		'\f', '\a', '\x2', '\x602', '\x601', '\x3', '\x2', '\x2', '\x2', '\x602', 
		'\x603', '\x3', '\x2', '\x2', '\x2', '\x603', '\x604', '\x3', '\x2', '\x2', 
		'\x2', '\x604', '\x605', '\x5', '\xBA', '^', '\x2', '\x605', '\x606', 
		'\a', '\x82', '\x2', '\x2', '\x606', '\xD3', '\x3', '\x2', '\x2', '\x2', 
		'\x607', '\x608', '\a', '\r', '\x2', '\x2', '\x608', '\x609', '\a', 'W', 
		'\x2', '\x2', '\x609', '\x60A', '\x5', '\x86', '\x44', '\x2', '\x60A', 
		'\x60B', '\a', 'X', '\x2', '\x2', '\x60B', '\x60C', '\a', '\x82', '\x2', 
		'\x2', '\x60C', '\xD5', '\x3', '\x2', '\x2', '\x2', '\x60D', '\x60E', 
		'\a', '%', '\x2', '\x2', '\x60E', '\x60F', '\a', '\x8F', '\x2', '\x2', 
		'\x60F', '\x611', '\a', '[', '\x2', '\x2', '\x610', '\x612', '\x5', '|', 
		'?', '\x2', '\x611', '\x610', '\x3', '\x2', '\x2', '\x2', '\x611', '\x612', 
		'\x3', '\x2', '\x2', '\x2', '\x612', '\x613', '\x3', '\x2', '\x2', '\x2', 
		'\x613', '\x618', '\a', '\\', '\x2', '\x2', '\x614', '\x615', '\a', '%', 
		'\x2', '\x2', '\x615', '\x616', '\a', '\x8F', '\x2', '\x2', '\x616', '\x618', 
		'\x5', '~', '@', '\x2', '\x617', '\x60D', '\x3', '\x2', '\x2', '\x2', 
		'\x617', '\x614', '\x3', '\x2', '\x2', '\x2', '\x618', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\x619', '\x61A', '\b', 'm', '\x1', '\x2', '\x61A', 
		'\x61B', '\x5', '\xDA', 'n', '\x2', '\x61B', '\x620', '\x3', '\x2', '\x2', 
		'\x2', '\x61C', '\x61D', '\f', '\x3', '\x2', '\x2', '\x61D', '\x61F', 
		'\x5', '\xDA', 'n', '\x2', '\x61E', '\x61C', '\x3', '\x2', '\x2', '\x2', 
		'\x61F', '\x622', '\x3', '\x2', '\x2', '\x2', '\x620', '\x61E', '\x3', 
		'\x2', '\x2', '\x2', '\x620', '\x621', '\x3', '\x2', '\x2', '\x2', '\x621', 
		'\xD9', '\x3', '\x2', '\x2', '\x2', '\x622', '\x620', '\x3', '\x2', '\x2', 
		'\x2', '\x623', '\x624', '\a', 'Y', '\x2', '\x2', '\x624', '\x625', '\a', 
		'Y', '\x2', '\x2', '\x625', '\x626', '\x5', '\xDE', 'p', '\x2', '\x626', 
		'\x627', '\a', 'Z', '\x2', '\x2', '\x627', '\x628', '\a', 'Z', '\x2', 
		'\x2', '\x628', '\x62B', '\x3', '\x2', '\x2', '\x2', '\x629', '\x62B', 
		'\x5', '\xDC', 'o', '\x2', '\x62A', '\x623', '\x3', '\x2', '\x2', '\x2', 
		'\x62A', '\x629', '\x3', '\x2', '\x2', '\x2', '\x62B', '\xDB', '\x3', 
		'\x2', '\x2', '\x2', '\x62C', '\x62D', '\a', '\v', '\x2', '\x2', '\x62D', 
		'\x62E', '\a', 'W', '\x2', '\x2', '\x62E', '\x630', '\x5', '\x106', '\x84', 
		'\x2', '\x62F', '\x631', '\a', '\x85', '\x2', '\x2', '\x630', '\x62F', 
		'\x3', '\x2', '\x2', '\x2', '\x630', '\x631', '\x3', '\x2', '\x2', '\x2', 
		'\x631', '\x632', '\x3', '\x2', '\x2', '\x2', '\x632', '\x633', '\a', 
		'X', '\x2', '\x2', '\x633', '\x63D', '\x3', '\x2', '\x2', '\x2', '\x634', 
		'\x635', '\a', '\v', '\x2', '\x2', '\x635', '\x636', '\a', 'W', '\x2', 
		'\x2', '\x636', '\x638', '\x5', '`', '\x31', '\x2', '\x637', '\x639', 
		'\a', '\x85', '\x2', '\x2', '\x638', '\x637', '\x3', '\x2', '\x2', '\x2', 
		'\x638', '\x639', '\x3', '\x2', '\x2', '\x2', '\x639', '\x63A', '\x3', 
		'\x2', '\x2', '\x2', '\x63A', '\x63B', '\a', 'X', '\x2', '\x2', '\x63B', 
		'\x63D', '\x3', '\x2', '\x2', '\x2', '\x63C', '\x62C', '\x3', '\x2', '\x2', 
		'\x2', '\x63C', '\x634', '\x3', '\x2', '\x2', '\x2', '\x63D', '\xDD', 
		'\x3', '\x2', '\x2', '\x2', '\x63E', '\x640', '\b', 'p', '\x1', '\x2', 
		'\x63F', '\x641', '\x5', '\xE0', 'q', '\x2', '\x640', '\x63F', '\x3', 
		'\x2', '\x2', '\x2', '\x640', '\x641', '\x3', '\x2', '\x2', '\x2', '\x641', 
		'\x646', '\x3', '\x2', '\x2', '\x2', '\x642', '\x643', '\x5', '\xE0', 
		'q', '\x2', '\x643', '\x644', '\a', '\x85', '\x2', '\x2', '\x644', '\x646', 
		'\x3', '\x2', '\x2', '\x2', '\x645', '\x63E', '\x3', '\x2', '\x2', '\x2', 
		'\x645', '\x642', '\x3', '\x2', '\x2', '\x2', '\x646', '\x653', '\x3', 
		'\x2', '\x2', '\x2', '\x647', '\x648', '\f', '\x5', '\x2', '\x2', '\x648', 
		'\x64A', '\a', '|', '\x2', '\x2', '\x649', '\x64B', '\x5', '\xE0', 'q', 
		'\x2', '\x64A', '\x649', '\x3', '\x2', '\x2', '\x2', '\x64A', '\x64B', 
		'\x3', '\x2', '\x2', '\x2', '\x64B', '\x652', '\x3', '\x2', '\x2', '\x2', 
		'\x64C', '\x64D', '\f', '\x3', '\x2', '\x2', '\x64D', '\x64E', '\a', '|', 
		'\x2', '\x2', '\x64E', '\x64F', '\x5', '\xE0', 'q', '\x2', '\x64F', '\x650', 
		'\a', '\x85', '\x2', '\x2', '\x650', '\x652', '\x3', '\x2', '\x2', '\x2', 
		'\x651', '\x647', '\x3', '\x2', '\x2', '\x2', '\x651', '\x64C', '\x3', 
		'\x2', '\x2', '\x2', '\x652', '\x655', '\x3', '\x2', '\x2', '\x2', '\x653', 
		'\x651', '\x3', '\x2', '\x2', '\x2', '\x653', '\x654', '\x3', '\x2', '\x2', 
		'\x2', '\x654', '\xDF', '\x3', '\x2', '\x2', '\x2', '\x655', '\x653', 
		'\x3', '\x2', '\x2', '\x2', '\x656', '\x658', '\x5', '\xE2', 'r', '\x2', 
		'\x657', '\x659', '\x5', '\xE8', 'u', '\x2', '\x658', '\x657', '\x3', 
		'\x2', '\x2', '\x2', '\x658', '\x659', '\x3', '\x2', '\x2', '\x2', '\x659', 
		'\xE1', '\x3', '\x2', '\x2', '\x2', '\x65A', '\x65D', '\a', '\x86', '\x2', 
		'\x2', '\x65B', '\x65D', '\x5', '\xE4', 's', '\x2', '\x65C', '\x65A', 
		'\x3', '\x2', '\x2', '\x2', '\x65C', '\x65B', '\x3', '\x2', '\x2', '\x2', 
		'\x65D', '\xE3', '\x3', '\x2', '\x2', '\x2', '\x65E', '\x65F', '\x5', 
		'\xE6', 't', '\x2', '\x65F', '\x660', '\a', '\x81', '\x2', '\x2', '\x660', 
		'\x661', '\a', '\x86', '\x2', '\x2', '\x661', '\xE5', '\x3', '\x2', '\x2', 
		'\x2', '\x662', '\x663', '\a', '\x86', '\x2', '\x2', '\x663', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\x664', '\x665', '\a', 'W', '\x2', '\x2', 
		'\x665', '\x666', '\x5', '\xEA', 'v', '\x2', '\x666', '\x667', '\a', 'X', 
		'\x2', '\x2', '\x667', '\xE9', '\x3', '\x2', '\x2', '\x2', '\x668', '\x66A', 
		'\b', 'v', '\x1', '\x2', '\x669', '\x66B', '\x5', '\xEC', 'w', '\x2', 
		'\x66A', '\x669', '\x3', '\x2', '\x2', '\x2', '\x66A', '\x66B', '\x3', 
		'\x2', '\x2', '\x2', '\x66B', '\x670', '\x3', '\x2', '\x2', '\x2', '\x66C', 
		'\x66D', '\f', '\x3', '\x2', '\x2', '\x66D', '\x66F', '\x5', '\xEC', 'w', 
		'\x2', '\x66E', '\x66C', '\x3', '\x2', '\x2', '\x2', '\x66F', '\x672', 
		'\x3', '\x2', '\x2', '\x2', '\x670', '\x66E', '\x3', '\x2', '\x2', '\x2', 
		'\x670', '\x671', '\x3', '\x2', '\x2', '\x2', '\x671', '\xEB', '\x3', 
		'\x2', '\x2', '\x2', '\x672', '\x670', '\x3', '\x2', '\x2', '\x2', '\x673', 
		'\x674', '\a', 'W', '\x2', '\x2', '\x674', '\x675', '\x5', '\xEA', 'v', 
		'\x2', '\x675', '\x676', '\a', 'X', '\x2', '\x2', '\x676', '\x685', '\x3', 
		'\x2', '\x2', '\x2', '\x677', '\x678', '\a', 'Y', '\x2', '\x2', '\x678', 
		'\x679', '\x5', '\xEA', 'v', '\x2', '\x679', '\x67A', '\a', 'Z', '\x2', 
		'\x2', '\x67A', '\x685', '\x3', '\x2', '\x2', '\x2', '\x67B', '\x67C', 
		'\a', '[', '\x2', '\x2', '\x67C', '\x67D', '\x5', '\xEA', 'v', '\x2', 
		'\x67D', '\x67E', '\a', '\\', '\x2', '\x2', '\x67E', '\x685', '\x3', '\x2', 
		'\x2', '\x2', '\x67F', '\x681', '\n', '\x6', '\x2', '\x2', '\x680', '\x67F', 
		'\x3', '\x2', '\x2', '\x2', '\x681', '\x682', '\x3', '\x2', '\x2', '\x2', 
		'\x682', '\x680', '\x3', '\x2', '\x2', '\x2', '\x682', '\x683', '\x3', 
		'\x2', '\x2', '\x2', '\x683', '\x685', '\x3', '\x2', '\x2', '\x2', '\x684', 
		'\x673', '\x3', '\x2', '\x2', '\x2', '\x684', '\x677', '\x3', '\x2', '\x2', 
		'\x2', '\x684', '\x67B', '\x3', '\x2', '\x2', '\x2', '\x684', '\x680', 
		'\x3', '\x2', '\x2', '\x2', '\x685', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\x686', '\x687', '\b', 'x', '\x1', '\x2', '\x687', '\x688', '\x5', '\xF0', 
		'y', '\x2', '\x688', '\x68E', '\x3', '\x2', '\x2', '\x2', '\x689', '\x68A', 
		'\f', '\x3', '\x2', '\x2', '\x68A', '\x68B', '\a', '|', '\x2', '\x2', 
		'\x68B', '\x68D', '\x5', '\xF0', 'y', '\x2', '\x68C', '\x689', '\x3', 
		'\x2', '\x2', '\x2', '\x68D', '\x690', '\x3', '\x2', '\x2', '\x2', '\x68E', 
		'\x68C', '\x3', '\x2', '\x2', '\x2', '\x68E', '\x68F', '\x3', '\x2', '\x2', 
		'\x2', '\x68F', '\xEF', '\x3', '\x2', '\x2', '\x2', '\x690', '\x68E', 
		'\x3', '\x2', '\x2', '\x2', '\x691', '\x693', '\x5', '\xF2', 'z', '\x2', 
		'\x692', '\x694', '\x5', '\x11C', '\x8F', '\x2', '\x693', '\x692', '\x3', 
		'\x2', '\x2', '\x2', '\x693', '\x694', '\x3', '\x2', '\x2', '\x2', '\x694', 
		'\xF1', '\x3', '\x2', '\x2', '\x2', '\x695', '\x69B', '\x5', '\xF4', '{', 
		'\x2', '\x696', '\x697', '\x5', '\xF6', '|', '\x2', '\x697', '\x698', 
		'\x5', '\xF8', '}', '\x2', '\x698', '\x699', '\x5', '\xFA', '~', '\x2', 
		'\x699', '\x69B', '\x3', '\x2', '\x2', '\x2', '\x69A', '\x695', '\x3', 
		'\x2', '\x2', '\x2', '\x69A', '\x696', '\x3', '\x2', '\x2', '\x2', '\x69B', 
		'\xF3', '\x3', '\x2', '\x2', '\x2', '\x69C', '\x6A1', '\x5', '\xF6', '|', 
		'\x2', '\x69D', '\x69E', '\x5', '\xFC', '\x7F', '\x2', '\x69E', '\x69F', 
		'\x5', '\xF4', '{', '\x2', '\x69F', '\x6A1', '\x3', '\x2', '\x2', '\x2', 
		'\x6A0', '\x69C', '\x3', '\x2', '\x2', '\x2', '\x6A0', '\x69D', '\x3', 
		'\x2', '\x2', '\x2', '\x6A1', '\xF5', '\x3', '\x2', '\x2', '\x2', '\x6A2', 
		'\x6A3', '\b', '|', '\x1', '\x2', '\x6A3', '\x6A5', '\x5', '\x104', '\x83', 
		'\x2', '\x6A4', '\x6A6', '\x5', '\xD8', 'm', '\x2', '\x6A5', '\x6A4', 
		'\x3', '\x2', '\x2', '\x2', '\x6A5', '\x6A6', '\x3', '\x2', '\x2', '\x2', 
		'\x6A6', '\x6AC', '\x3', '\x2', '\x2', '\x2', '\x6A7', '\x6A8', '\a', 
		'W', '\x2', '\x2', '\x6A8', '\x6A9', '\x5', '\xF4', '{', '\x2', '\x6A9', 
		'\x6AA', '\a', 'X', '\x2', '\x2', '\x6AA', '\x6AC', '\x3', '\x2', '\x2', 
		'\x2', '\x6AB', '\x6A2', '\x3', '\x2', '\x2', '\x2', '\x6AB', '\x6A7', 
		'\x3', '\x2', '\x2', '\x2', '\x6AC', '\x6BA', '\x3', '\x2', '\x2', '\x2', 
		'\x6AD', '\x6AE', '\f', '\x5', '\x2', '\x2', '\x6AE', '\x6B9', '\x5', 
		'\xF8', '}', '\x2', '\x6AF', '\x6B0', '\f', '\x4', '\x2', '\x2', '\x6B0', 
		'\x6B2', '\a', 'Y', '\x2', '\x2', '\x6B1', '\x6B3', '\x5', '`', '\x31', 
		'\x2', '\x6B2', '\x6B1', '\x3', '\x2', '\x2', '\x2', '\x6B2', '\x6B3', 
		'\x3', '\x2', '\x2', '\x2', '\x6B3', '\x6B4', '\x3', '\x2', '\x2', '\x2', 
		'\x6B4', '\x6B6', '\a', 'Z', '\x2', '\x2', '\x6B5', '\x6B7', '\x5', '\xD8', 
		'm', '\x2', '\x6B6', '\x6B5', '\x3', '\x2', '\x2', '\x2', '\x6B6', '\x6B7', 
		'\x3', '\x2', '\x2', '\x2', '\x6B7', '\x6B9', '\x3', '\x2', '\x2', '\x2', 
		'\x6B8', '\x6AD', '\x3', '\x2', '\x2', '\x2', '\x6B8', '\x6AF', '\x3', 
		'\x2', '\x2', '\x2', '\x6B9', '\x6BC', '\x3', '\x2', '\x2', '\x2', '\x6BA', 
		'\x6B8', '\x3', '\x2', '\x2', '\x2', '\x6BA', '\x6BB', '\x3', '\x2', '\x2', 
		'\x2', '\x6BB', '\xF7', '\x3', '\x2', '\x2', '\x2', '\x6BC', '\x6BA', 
		'\x3', '\x2', '\x2', '\x2', '\x6BD', '\x6BE', '\a', 'W', '\x2', '\x2', 
		'\x6BE', '\x6BF', '\x5', '\x112', '\x8A', '\x2', '\x6BF', '\x6C1', '\a', 
		'X', '\x2', '\x2', '\x6C0', '\x6C2', '\x5', '\xFE', '\x80', '\x2', '\x6C1', 
		'\x6C0', '\x3', '\x2', '\x2', '\x2', '\x6C1', '\x6C2', '\x3', '\x2', '\x2', 
		'\x2', '\x6C2', '\x6C4', '\x3', '\x2', '\x2', '\x2', '\x6C3', '\x6C5', 
		'\x5', '\x102', '\x82', '\x2', '\x6C4', '\x6C3', '\x3', '\x2', '\x2', 
		'\x2', '\x6C4', '\x6C5', '\x3', '\x2', '\x2', '\x2', '\x6C5', '\x6C7', 
		'\x3', '\x2', '\x2', '\x2', '\x6C6', '\x6C8', '\x5', '\x182', '\xC2', 
		'\x2', '\x6C7', '\x6C6', '\x3', '\x2', '\x2', '\x2', '\x6C7', '\x6C8', 
		'\x3', '\x2', '\x2', '\x2', '\x6C8', '\x6CA', '\x3', '\x2', '\x2', '\x2', 
		'\x6C9', '\x6CB', '\x5', '\xD8', 'm', '\x2', '\x6CA', '\x6C9', '\x3', 
		'\x2', '\x2', '\x2', '\x6CA', '\x6CB', '\x3', '\x2', '\x2', '\x2', '\x6CB', 
		'\xF9', '\x3', '\x2', '\x2', '\x2', '\x6CC', '\x6CD', '\a', '~', '\x2', 
		'\x2', '\x6CD', '\x6CF', '\x5', '\x9E', 'P', '\x2', '\x6CE', '\x6D0', 
		'\x5', '\x108', '\x85', '\x2', '\x6CF', '\x6CE', '\x3', '\x2', '\x2', 
		'\x2', '\x6CF', '\x6D0', '\x3', '\x2', '\x2', '\x2', '\x6D0', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\x6D1', '\x6D3', '\a', '_', '\x2', '\x2', 
		'\x6D2', '\x6D4', '\x5', '\xD8', 'm', '\x2', '\x6D3', '\x6D2', '\x3', 
		'\x2', '\x2', '\x2', '\x6D3', '\x6D4', '\x3', '\x2', '\x2', '\x2', '\x6D4', 
		'\x6D6', '\x3', '\x2', '\x2', '\x2', '\x6D5', '\x6D7', '\x5', '\xFE', 
		'\x80', '\x2', '\x6D6', '\x6D5', '\x3', '\x2', '\x2', '\x2', '\x6D6', 
		'\x6D7', '\x3', '\x2', '\x2', '\x2', '\x6D7', '\x6E9', '\x3', '\x2', '\x2', 
		'\x2', '\x6D8', '\x6DA', '\a', '\x63', '\x2', '\x2', '\x6D9', '\x6DB', 
		'\x5', '\xD8', 'm', '\x2', '\x6DA', '\x6D9', '\x3', '\x2', '\x2', '\x2', 
		'\x6DA', '\x6DB', '\x3', '\x2', '\x2', '\x2', '\x6DB', '\x6E9', '\x3', 
		'\x2', '\x2', '\x2', '\x6DC', '\x6DE', '\a', '\x5', '\x2', '\x2', '\x6DD', 
		'\x6DF', '\x5', '\xD8', 'm', '\x2', '\x6DE', '\x6DD', '\x3', '\x2', '\x2', 
		'\x2', '\x6DE', '\x6DF', '\x3', '\x2', '\x2', '\x2', '\x6DF', '\x6E9', 
		'\x3', '\x2', '\x2', '\x2', '\x6E0', '\x6E1', '\x5', '\f', '\a', '\x2', 
		'\x6E1', '\x6E3', '\a', '_', '\x2', '\x2', '\x6E2', '\x6E4', '\x5', '\xD8', 
		'm', '\x2', '\x6E3', '\x6E2', '\x3', '\x2', '\x2', '\x2', '\x6E3', '\x6E4', 
		'\x3', '\x2', '\x2', '\x2', '\x6E4', '\x6E6', '\x3', '\x2', '\x2', '\x2', 
		'\x6E5', '\x6E7', '\x5', '\xFE', '\x80', '\x2', '\x6E6', '\x6E5', '\x3', 
		'\x2', '\x2', '\x2', '\x6E6', '\x6E7', '\x3', '\x2', '\x2', '\x2', '\x6E7', 
		'\x6E9', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6D1', '\x3', '\x2', '\x2', 
		'\x2', '\x6E8', '\x6D8', '\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6DC', 
		'\x3', '\x2', '\x2', '\x2', '\x6E8', '\x6E0', '\x3', '\x2', '\x2', '\x2', 
		'\x6E9', '\xFD', '\x3', '\x2', '\x2', '\x2', '\x6EA', '\x6EC', '\x5', 
		'\x100', '\x81', '\x2', '\x6EB', '\x6ED', '\x5', '\xFE', '\x80', '\x2', 
		'\x6EC', '\x6EB', '\x3', '\x2', '\x2', '\x2', '\x6EC', '\x6ED', '\x3', 
		'\x2', '\x2', '\x2', '\x6ED', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x6EE', 
		'\x6EF', '\t', '\a', '\x2', '\x2', '\x6EF', '\x101', '\x3', '\x2', '\x2', 
		'\x2', '\x6F0', '\x6F1', '\t', '\b', '\x2', '\x2', '\x6F1', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x6F2', '\x6F4', '\a', '\x85', '\x2', '\x2', '\x6F3', 
		'\x6F2', '\x3', '\x2', '\x2', '\x2', '\x6F3', '\x6F4', '\x3', '\x2', '\x2', 
		'\x2', '\x6F4', '\x6F5', '\x3', '\x2', '\x2', '\x2', '\x6F5', '\x6F6', 
		'\x5', '\x6', '\x4', '\x2', '\x6F6', '\x105', '\x3', '\x2', '\x2', '\x2', 
		'\x6F7', '\x6F9', '\x5', '\x9C', 'O', '\x2', '\x6F8', '\x6FA', '\x5', 
		'\x108', '\x85', '\x2', '\x6F9', '\x6F8', '\x3', '\x2', '\x2', '\x2', 
		'\x6F9', '\x6FA', '\x3', '\x2', '\x2', '\x2', '\x6FA', '\x107', '\x3', 
		'\x2', '\x2', '\x2', '\x6FB', '\x704', '\x5', '\x10A', '\x86', '\x2', 
		'\x6FC', '\x6FE', '\x5', '\x10C', '\x87', '\x2', '\x6FD', '\x6FC', '\x3', 
		'\x2', '\x2', '\x2', '\x6FD', '\x6FE', '\x3', '\x2', '\x2', '\x2', '\x6FE', 
		'\x6FF', '\x3', '\x2', '\x2', '\x2', '\x6FF', '\x700', '\x5', '\xF8', 
		'}', '\x2', '\x700', '\x701', '\x5', '\xFA', '~', '\x2', '\x701', '\x704', 
		'\x3', '\x2', '\x2', '\x2', '\x702', '\x704', '\x5', '\x10E', '\x88', 
		'\x2', '\x703', '\x6FB', '\x3', '\x2', '\x2', '\x2', '\x703', '\x6FD', 
		'\x3', '\x2', '\x2', '\x2', '\x703', '\x702', '\x3', '\x2', '\x2', '\x2', 
		'\x704', '\x109', '\x3', '\x2', '\x2', '\x2', '\x705', '\x70B', '\x5', 
		'\x10C', '\x87', '\x2', '\x706', '\x708', '\x5', '\xFC', '\x7F', '\x2', 
		'\x707', '\x709', '\x5', '\x10A', '\x86', '\x2', '\x708', '\x707', '\x3', 
		'\x2', '\x2', '\x2', '\x708', '\x709', '\x3', '\x2', '\x2', '\x2', '\x709', 
		'\x70B', '\x3', '\x2', '\x2', '\x2', '\x70A', '\x705', '\x3', '\x2', '\x2', 
		'\x2', '\x70A', '\x706', '\x3', '\x2', '\x2', '\x2', '\x70B', '\x10B', 
		'\x3', '\x2', '\x2', '\x2', '\x70C', '\x70D', '\b', '\x87', '\x1', '\x2', 
		'\x70D', '\x71B', '\x5', '\xF8', '}', '\x2', '\x70E', '\x710', '\a', 'Y', 
		'\x2', '\x2', '\x70F', '\x711', '\x5', '`', '\x31', '\x2', '\x710', '\x70F', 
		'\x3', '\x2', '\x2', '\x2', '\x710', '\x711', '\x3', '\x2', '\x2', '\x2', 
		'\x711', '\x712', '\x3', '\x2', '\x2', '\x2', '\x712', '\x714', '\a', 
		'Z', '\x2', '\x2', '\x713', '\x715', '\x5', '\xD8', 'm', '\x2', '\x714', 
		'\x713', '\x3', '\x2', '\x2', '\x2', '\x714', '\x715', '\x3', '\x2', '\x2', 
		'\x2', '\x715', '\x71B', '\x3', '\x2', '\x2', '\x2', '\x716', '\x717', 
		'\a', 'W', '\x2', '\x2', '\x717', '\x718', '\x5', '\x10A', '\x86', '\x2', 
		'\x718', '\x719', '\a', 'X', '\x2', '\x2', '\x719', '\x71B', '\x3', '\x2', 
		'\x2', '\x2', '\x71A', '\x70C', '\x3', '\x2', '\x2', '\x2', '\x71A', '\x70E', 
		'\x3', '\x2', '\x2', '\x2', '\x71A', '\x716', '\x3', '\x2', '\x2', '\x2', 
		'\x71B', '\x729', '\x3', '\x2', '\x2', '\x2', '\x71C', '\x71D', '\f', 
		'\a', '\x2', '\x2', '\x71D', '\x728', '\x5', '\xF8', '}', '\x2', '\x71E', 
		'\x71F', '\f', '\x5', '\x2', '\x2', '\x71F', '\x721', '\a', 'Y', '\x2', 
		'\x2', '\x720', '\x722', '\x5', '`', '\x31', '\x2', '\x721', '\x720', 
		'\x3', '\x2', '\x2', '\x2', '\x721', '\x722', '\x3', '\x2', '\x2', '\x2', 
		'\x722', '\x723', '\x3', '\x2', '\x2', '\x2', '\x723', '\x725', '\a', 
		'Z', '\x2', '\x2', '\x724', '\x726', '\x5', '\xD8', 'm', '\x2', '\x725', 
		'\x724', '\x3', '\x2', '\x2', '\x2', '\x725', '\x726', '\x3', '\x2', '\x2', 
		'\x2', '\x726', '\x728', '\x3', '\x2', '\x2', '\x2', '\x727', '\x71C', 
		'\x3', '\x2', '\x2', '\x2', '\x727', '\x71E', '\x3', '\x2', '\x2', '\x2', 
		'\x728', '\x72B', '\x3', '\x2', '\x2', '\x2', '\x729', '\x727', '\x3', 
		'\x2', '\x2', '\x2', '\x729', '\x72A', '\x3', '\x2', '\x2', '\x2', '\x72A', 
		'\x10D', '\x3', '\x2', '\x2', '\x2', '\x72B', '\x729', '\x3', '\x2', '\x2', 
		'\x2', '\x72C', '\x731', '\x5', '\x110', '\x89', '\x2', '\x72D', '\x72E', 
		'\x5', '\xFC', '\x7F', '\x2', '\x72E', '\x72F', '\x5', '\x10E', '\x88', 
		'\x2', '\x72F', '\x731', '\x3', '\x2', '\x2', '\x2', '\x730', '\x72C', 
		'\x3', '\x2', '\x2', '\x2', '\x730', '\x72D', '\x3', '\x2', '\x2', '\x2', 
		'\x731', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x732', '\x733', '\b', 
		'\x89', '\x1', '\x2', '\x733', '\x734', '\a', '\x85', '\x2', '\x2', '\x734', 
		'\x742', '\x3', '\x2', '\x2', '\x2', '\x735', '\x736', '\f', '\x5', '\x2', 
		'\x2', '\x736', '\x741', '\x5', '\xF8', '}', '\x2', '\x737', '\x738', 
		'\f', '\x4', '\x2', '\x2', '\x738', '\x73A', '\a', 'Y', '\x2', '\x2', 
		'\x739', '\x73B', '\x5', '`', '\x31', '\x2', '\x73A', '\x739', '\x3', 
		'\x2', '\x2', '\x2', '\x73A', '\x73B', '\x3', '\x2', '\x2', '\x2', '\x73B', 
		'\x73C', '\x3', '\x2', '\x2', '\x2', '\x73C', '\x73E', '\a', 'Z', '\x2', 
		'\x2', '\x73D', '\x73F', '\x5', '\xD8', 'm', '\x2', '\x73E', '\x73D', 
		'\x3', '\x2', '\x2', '\x2', '\x73E', '\x73F', '\x3', '\x2', '\x2', '\x2', 
		'\x73F', '\x741', '\x3', '\x2', '\x2', '\x2', '\x740', '\x735', '\x3', 
		'\x2', '\x2', '\x2', '\x740', '\x737', '\x3', '\x2', '\x2', '\x2', '\x741', 
		'\x744', '\x3', '\x2', '\x2', '\x2', '\x742', '\x740', '\x3', '\x2', '\x2', 
		'\x2', '\x742', '\x743', '\x3', '\x2', '\x2', '\x2', '\x743', '\x111', 
		'\x3', '\x2', '\x2', '\x2', '\x744', '\x742', '\x3', '\x2', '\x2', '\x2', 
		'\x745', '\x747', '\x5', '\x114', '\x8B', '\x2', '\x746', '\x745', '\x3', 
		'\x2', '\x2', '\x2', '\x746', '\x747', '\x3', '\x2', '\x2', '\x2', '\x747', 
		'\x749', '\x3', '\x2', '\x2', '\x2', '\x748', '\x74A', '\a', '\x85', '\x2', 
		'\x2', '\x749', '\x748', '\x3', '\x2', '\x2', '\x2', '\x749', '\x74A', 
		'\x3', '\x2', '\x2', '\x2', '\x74A', '\x750', '\x3', '\x2', '\x2', '\x2', 
		'\x74B', '\x74C', '\x5', '\x114', '\x8B', '\x2', '\x74C', '\x74D', '\a', 
		'|', '\x2', '\x2', '\x74D', '\x74E', '\a', '\x85', '\x2', '\x2', '\x74E', 
		'\x750', '\x3', '\x2', '\x2', '\x2', '\x74F', '\x746', '\x3', '\x2', '\x2', 
		'\x2', '\x74F', '\x74B', '\x3', '\x2', '\x2', '\x2', '\x750', '\x113', 
		'\x3', '\x2', '\x2', '\x2', '\x751', '\x752', '\b', '\x8B', '\x1', '\x2', 
		'\x752', '\x753', '\x5', '\x116', '\x8C', '\x2', '\x753', '\x759', '\x3', 
		'\x2', '\x2', '\x2', '\x754', '\x755', '\f', '\x3', '\x2', '\x2', '\x755', 
		'\x756', '\a', '|', '\x2', '\x2', '\x756', '\x758', '\x5', '\x116', '\x8C', 
		'\x2', '\x757', '\x754', '\x3', '\x2', '\x2', '\x2', '\x758', '\x75B', 
		'\x3', '\x2', '\x2', '\x2', '\x759', '\x757', '\x3', '\x2', '\x2', '\x2', 
		'\x759', '\x75A', '\x3', '\x2', '\x2', '\x2', '\x75A', '\x115', '\x3', 
		'\x2', '\x2', '\x2', '\x75B', '\x759', '\x3', '\x2', '\x2', '\x2', '\x75C', 
		'\x75E', '\x5', '\xD8', 'm', '\x2', '\x75D', '\x75C', '\x3', '\x2', '\x2', 
		'\x2', '\x75D', '\x75E', '\x3', '\x2', '\x2', '\x2', '\x75E', '\x75F', 
		'\x3', '\x2', '\x2', '\x2', '\x75F', '\x760', '\x5', '\x90', 'I', '\x2', 
		'\x760', '\x761', '\x5', '\xF2', 'z', '\x2', '\x761', '\x77C', '\x3', 
		'\x2', '\x2', '\x2', '\x762', '\x764', '\x5', '\xD8', 'm', '\x2', '\x763', 
		'\x762', '\x3', '\x2', '\x2', '\x2', '\x763', '\x764', '\x3', '\x2', '\x2', 
		'\x2', '\x764', '\x765', '\x3', '\x2', '\x2', '\x2', '\x765', '\x766', 
		'\x5', '\x90', 'I', '\x2', '\x766', '\x767', '\x5', '\xF2', 'z', '\x2', 
		'\x767', '\x768', '\a', 'g', '\x2', '\x2', '\x768', '\x769', '\x5', '\x120', 
		'\x91', '\x2', '\x769', '\x77C', '\x3', '\x2', '\x2', '\x2', '\x76A', 
		'\x76C', '\x5', '\xD8', 'm', '\x2', '\x76B', '\x76A', '\x3', '\x2', '\x2', 
		'\x2', '\x76B', '\x76C', '\x3', '\x2', '\x2', '\x2', '\x76C', '\x76D', 
		'\x3', '\x2', '\x2', '\x2', '\x76D', '\x76F', '\x5', '\x90', 'I', '\x2', 
		'\x76E', '\x770', '\x5', '\x108', '\x85', '\x2', '\x76F', '\x76E', '\x3', 
		'\x2', '\x2', '\x2', '\x76F', '\x770', '\x3', '\x2', '\x2', '\x2', '\x770', 
		'\x77C', '\x3', '\x2', '\x2', '\x2', '\x771', '\x773', '\x5', '\xD8', 
		'm', '\x2', '\x772', '\x771', '\x3', '\x2', '\x2', '\x2', '\x772', '\x773', 
		'\x3', '\x2', '\x2', '\x2', '\x773', '\x774', '\x3', '\x2', '\x2', '\x2', 
		'\x774', '\x776', '\x5', '\x90', 'I', '\x2', '\x775', '\x777', '\x5', 
		'\x108', '\x85', '\x2', '\x776', '\x775', '\x3', '\x2', '\x2', '\x2', 
		'\x776', '\x777', '\x3', '\x2', '\x2', '\x2', '\x777', '\x778', '\x3', 
		'\x2', '\x2', '\x2', '\x778', '\x779', '\a', 'g', '\x2', '\x2', '\x779', 
		'\x77A', '\x5', '\x120', '\x91', '\x2', '\x77A', '\x77C', '\x3', '\x2', 
		'\x2', '\x2', '\x77B', '\x75D', '\x3', '\x2', '\x2', '\x2', '\x77B', '\x763', 
		'\x3', '\x2', '\x2', '\x2', '\x77B', '\x76B', '\x3', '\x2', '\x2', '\x2', 
		'\x77B', '\x772', '\x3', '\x2', '\x2', '\x2', '\x77C', '\x117', '\x3', 
		'\x2', '\x2', '\x2', '\x77D', '\x77F', '\x5', '\xD8', 'm', '\x2', '\x77E', 
		'\x77D', '\x3', '\x2', '\x2', '\x2', '\x77E', '\x77F', '\x3', '\x2', '\x2', 
		'\x2', '\x77F', '\x781', '\x3', '\x2', '\x2', '\x2', '\x780', '\x782', 
		'\x5', '\x90', 'I', '\x2', '\x781', '\x780', '\x3', '\x2', '\x2', '\x2', 
		'\x781', '\x782', '\x3', '\x2', '\x2', '\x2', '\x782', '\x783', '\x3', 
		'\x2', '\x2', '\x2', '\x783', '\x785', '\x5', '\xF2', 'z', '\x2', '\x784', 
		'\x786', '\x5', '\x13A', '\x9E', '\x2', '\x785', '\x784', '\x3', '\x2', 
		'\x2', '\x2', '\x785', '\x786', '\x3', '\x2', '\x2', '\x2', '\x786', '\x787', 
		'\x3', '\x2', '\x2', '\x2', '\x787', '\x788', '\x5', '\x11A', '\x8E', 
		'\x2', '\x788', '\x119', '\x3', '\x2', '\x2', '\x2', '\x789', '\x78B', 
		'\x5', '\x152', '\xAA', '\x2', '\x78A', '\x789', '\x3', '\x2', '\x2', 
		'\x2', '\x78A', '\x78B', '\x3', '\x2', '\x2', '\x2', '\x78B', '\x78C', 
		'\x3', '\x2', '\x2', '\x2', '\x78C', '\x795', '\x5', 'h', '\x35', '\x2', 
		'\x78D', '\x795', '\x5', '\x178', '\xBD', '\x2', '\x78E', '\x78F', '\a', 
		'g', '\x2', '\x2', '\x78F', '\x790', '\a', '\x1C', '\x2', '\x2', '\x790', 
		'\x795', '\a', '\x82', '\x2', '\x2', '\x791', '\x792', '\a', 'g', '\x2', 
		'\x2', '\x792', '\x793', '\a', '\x1D', '\x2', '\x2', '\x793', '\x795', 
		'\a', '\x82', '\x2', '\x2', '\x794', '\x78A', '\x3', '\x2', '\x2', '\x2', 
		'\x794', '\x78D', '\x3', '\x2', '\x2', '\x2', '\x794', '\x78E', '\x3', 
		'\x2', '\x2', '\x2', '\x794', '\x791', '\x3', '\x2', '\x2', '\x2', '\x795', 
		'\x11B', '\x3', '\x2', '\x2', '\x2', '\x796', '\x79C', '\x5', '\x11E', 
		'\x90', '\x2', '\x797', '\x798', '\a', 'W', '\x2', '\x2', '\x798', '\x799', 
		'\x5', '&', '\x14', '\x2', '\x799', '\x79A', '\a', 'X', '\x2', '\x2', 
		'\x79A', '\x79C', '\x3', '\x2', '\x2', '\x2', '\x79B', '\x796', '\x3', 
		'\x2', '\x2', '\x2', '\x79B', '\x797', '\x3', '\x2', '\x2', '\x2', '\x79C', 
		'\x11D', '\x3', '\x2', '\x2', '\x2', '\x79D', '\x79E', '\a', 'g', '\x2', 
		'\x2', '\x79E', '\x7A1', '\x5', '\x120', '\x91', '\x2', '\x79F', '\x7A1', 
		'\x5', '\x124', '\x93', '\x2', '\x7A0', '\x79D', '\x3', '\x2', '\x2', 
		'\x2', '\x7A0', '\x79F', '\x3', '\x2', '\x2', '\x2', '\x7A1', '\x11F', 
		'\x3', '\x2', '\x2', '\x2', '\x7A2', '\x7A5', '\x5', 'Z', '.', '\x2', 
		'\x7A3', '\x7A5', '\x5', '\x124', '\x93', '\x2', '\x7A4', '\x7A2', '\x3', 
		'\x2', '\x2', '\x2', '\x7A4', '\x7A3', '\x3', '\x2', '\x2', '\x2', '\x7A5', 
		'\x121', '\x3', '\x2', '\x2', '\x2', '\x7A6', '\x7A7', '\b', '\x92', '\x1', 
		'\x2', '\x7A7', '\x7A9', '\x5', '\x120', '\x91', '\x2', '\x7A8', '\x7AA', 
		'\a', '\x85', '\x2', '\x2', '\x7A9', '\x7A8', '\x3', '\x2', '\x2', '\x2', 
		'\x7A9', '\x7AA', '\x3', '\x2', '\x2', '\x2', '\x7AA', '\x7B3', '\x3', 
		'\x2', '\x2', '\x2', '\x7AB', '\x7AC', '\f', '\x3', '\x2', '\x2', '\x7AC', 
		'\x7AD', '\a', '|', '\x2', '\x2', '\x7AD', '\x7AF', '\x5', '\x120', '\x91', 
		'\x2', '\x7AE', '\x7B0', '\a', '\x85', '\x2', '\x2', '\x7AF', '\x7AE', 
		'\x3', '\x2', '\x2', '\x2', '\x7AF', '\x7B0', '\x3', '\x2', '\x2', '\x2', 
		'\x7B0', '\x7B2', '\x3', '\x2', '\x2', '\x2', '\x7B1', '\x7AB', '\x3', 
		'\x2', '\x2', '\x2', '\x7B2', '\x7B5', '\x3', '\x2', '\x2', '\x2', '\x7B3', 
		'\x7B1', '\x3', '\x2', '\x2', '\x2', '\x7B3', '\x7B4', '\x3', '\x2', '\x2', 
		'\x2', '\x7B4', '\x123', '\x3', '\x2', '\x2', '\x2', '\x7B5', '\x7B3', 
		'\x3', '\x2', '\x2', '\x2', '\x7B6', '\x7B7', '\a', '[', '\x2', '\x2', 
		'\x7B7', '\x7B9', '\x5', '\x122', '\x92', '\x2', '\x7B8', '\x7BA', '\a', 
		'|', '\x2', '\x2', '\x7B9', '\x7B8', '\x3', '\x2', '\x2', '\x2', '\x7B9', 
		'\x7BA', '\x3', '\x2', '\x2', '\x2', '\x7BA', '\x7BB', '\x3', '\x2', '\x2', 
		'\x2', '\x7BB', '\x7BC', '\a', '\\', '\x2', '\x2', '\x7BC', '\x7C0', '\x3', 
		'\x2', '\x2', '\x2', '\x7BD', '\x7BE', '\a', '[', '\x2', '\x2', '\x7BE', 
		'\x7C0', '\a', '\\', '\x2', '\x2', '\x7BF', '\x7B6', '\x3', '\x2', '\x2', 
		'\x2', '\x7BF', '\x7BD', '\x3', '\x2', '\x2', '\x2', '\x7C0', '\x125', 
		'\x3', '\x2', '\x2', '\x2', '\x7C1', '\x7C4', '\a', '\x86', '\x2', '\x2', 
		'\x7C2', '\x7C4', '\x5', '\x166', '\xB4', '\x2', '\x7C3', '\x7C1', '\x3', 
		'\x2', '\x2', '\x2', '\x7C3', '\x7C2', '\x3', '\x2', '\x2', '\x2', '\x7C4', 
		'\x127', '\x3', '\x2', '\x2', '\x2', '\x7C5', '\x7C6', '\x5', '\x12A', 
		'\x96', '\x2', '\x7C6', '\x7C8', '\a', '[', '\x2', '\x2', '\x7C7', '\x7C9', 
		'\x5', '\x132', '\x9A', '\x2', '\x7C8', '\x7C7', '\x3', '\x2', '\x2', 
		'\x2', '\x7C8', '\x7C9', '\x3', '\x2', '\x2', '\x2', '\x7C9', '\x7CA', 
		'\x3', '\x2', '\x2', '\x2', '\x7CA', '\x7CB', '\a', '\\', '\x2', '\x2', 
		'\x7CB', '\x129', '\x3', '\x2', '\x2', '\x2', '\x7CC', '\x7CE', '\x5', 
		'\x130', '\x99', '\x2', '\x7CD', '\x7CF', '\x5', '\xD8', 'm', '\x2', '\x7CE', 
		'\x7CD', '\x3', '\x2', '\x2', '\x2', '\x7CE', '\x7CF', '\x3', '\x2', '\x2', 
		'\x2', '\x7CF', '\x7D0', '\x3', '\x2', '\x2', '\x2', '\x7D0', '\x7D2', 
		'\x5', '\x12C', '\x97', '\x2', '\x7D1', '\x7D3', '\x5', '\x12E', '\x98', 
		'\x2', '\x7D2', '\x7D1', '\x3', '\x2', '\x2', '\x2', '\x7D2', '\x7D3', 
		'\x3', '\x2', '\x2', '\x2', '\x7D3', '\x7D5', '\x3', '\x2', '\x2', '\x2', 
		'\x7D4', '\x7D6', '\x5', '\x140', '\xA1', '\x2', '\x7D5', '\x7D4', '\x3', 
		'\x2', '\x2', '\x2', '\x7D5', '\x7D6', '\x3', '\x2', '\x2', '\x2', '\x7D6', 
		'\x7DF', '\x3', '\x2', '\x2', '\x2', '\x7D7', '\x7D9', '\x5', '\x130', 
		'\x99', '\x2', '\x7D8', '\x7DA', '\x5', '\xD8', 'm', '\x2', '\x7D9', '\x7D8', 
		'\x3', '\x2', '\x2', '\x2', '\x7D9', '\x7DA', '\x3', '\x2', '\x2', '\x2', 
		'\x7DA', '\x7DC', '\x3', '\x2', '\x2', '\x2', '\x7DB', '\x7DD', '\x5', 
		'\x140', '\xA1', '\x2', '\x7DC', '\x7DB', '\x3', '\x2', '\x2', '\x2', 
		'\x7DC', '\x7DD', '\x3', '\x2', '\x2', '\x2', '\x7DD', '\x7DF', '\x3', 
		'\x2', '\x2', '\x2', '\x7DE', '\x7CC', '\x3', '\x2', '\x2', '\x2', '\x7DE', 
		'\x7D7', '\x3', '\x2', '\x2', '\x2', '\x7DF', '\x12B', '\x3', '\x2', '\x2', 
		'\x2', '\x7E0', '\x7E2', '\x5', '\f', '\a', '\x2', '\x7E1', '\x7E0', '\x3', 
		'\x2', '\x2', '\x2', '\x7E1', '\x7E2', '\x3', '\x2', '\x2', '\x2', '\x7E2', 
		'\x7E3', '\x3', '\x2', '\x2', '\x2', '\x7E3', '\x7E4', '\x5', '\x126', 
		'\x94', '\x2', '\x7E4', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x7E5', 
		'\x7E6', '\a', '\'', '\x2', '\x2', '\x7E6', '\x12F', '\x3', '\x2', '\x2', 
		'\x2', '\x7E7', '\x7E8', '\t', '\t', '\x2', '\x2', '\x7E8', '\x131', '\x3', 
		'\x2', '\x2', '\x2', '\x7E9', '\x7EB', '\x5', '\x134', '\x9B', '\x2', 
		'\x7EA', '\x7EC', '\x5', '\x132', '\x9A', '\x2', '\x7EB', '\x7EA', '\x3', 
		'\x2', '\x2', '\x2', '\x7EB', '\x7EC', '\x3', '\x2', '\x2', '\x2', '\x7EC', 
		'\x7F3', '\x3', '\x2', '\x2', '\x2', '\x7ED', '\x7EE', '\x5', '\x14A', 
		'\xA6', '\x2', '\x7EE', '\x7F0', '\a', '\x80', '\x2', '\x2', '\x7EF', 
		'\x7F1', '\x5', '\x132', '\x9A', '\x2', '\x7F0', '\x7EF', '\x3', '\x2', 
		'\x2', '\x2', '\x7F0', '\x7F1', '\x3', '\x2', '\x2', '\x2', '\x7F1', '\x7F3', 
		'\x3', '\x2', '\x2', '\x2', '\x7F2', '\x7E9', '\x3', '\x2', '\x2', '\x2', 
		'\x7F2', '\x7ED', '\x3', '\x2', '\x2', '\x2', '\x7F3', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x7F4', '\x7F6', '\x5', '\xD8', 'm', '\x2', '\x7F5', 
		'\x7F4', '\x3', '\x2', '\x2', '\x2', '\x7F5', '\x7F6', '\x3', '\x2', '\x2', 
		'\x2', '\x7F6', '\x7F8', '\x3', '\x2', '\x2', '\x2', '\x7F7', '\x7F9', 
		'\x5', '\x90', 'I', '\x2', '\x7F8', '\x7F7', '\x3', '\x2', '\x2', '\x2', 
		'\x7F8', '\x7F9', '\x3', '\x2', '\x2', '\x2', '\x7F9', '\x7FB', '\x3', 
		'\x2', '\x2', '\x2', '\x7FA', '\x7FC', '\x5', '\x136', '\x9C', '\x2', 
		'\x7FB', '\x7FA', '\x3', '\x2', '\x2', '\x2', '\x7FB', '\x7FC', '\x3', 
		'\x2', '\x2', '\x2', '\x7FC', '\x7FD', '\x3', '\x2', '\x2', '\x2', '\x7FD', 
		'\x805', '\a', '\x82', '\x2', '\x2', '\x7FE', '\x805', '\x5', '\x118', 
		'\x8D', '\x2', '\x7FF', '\x805', '\x5', '\xD0', 'i', '\x2', '\x800', '\x805', 
		'\x5', '\x88', '\x45', '\x2', '\x801', '\x805', '\x5', '\x15E', '\xB0', 
		'\x2', '\x802', '\x805', '\x5', '\x82', '\x42', '\x2', '\x803', '\x805', 
		'\x5', '\x8A', '\x46', '\x2', '\x804', '\x7F5', '\x3', '\x2', '\x2', '\x2', 
		'\x804', '\x7FE', '\x3', '\x2', '\x2', '\x2', '\x804', '\x7FF', '\x3', 
		'\x2', '\x2', '\x2', '\x804', '\x800', '\x3', '\x2', '\x2', '\x2', '\x804', 
		'\x801', '\x3', '\x2', '\x2', '\x2', '\x804', '\x802', '\x3', '\x2', '\x2', 
		'\x2', '\x804', '\x803', '\x3', '\x2', '\x2', '\x2', '\x805', '\x135', 
		'\x3', '\x2', '\x2', '\x2', '\x806', '\x807', '\b', '\x9C', '\x1', '\x2', 
		'\x807', '\x808', '\x5', '\x138', '\x9D', '\x2', '\x808', '\x80E', '\x3', 
		'\x2', '\x2', '\x2', '\x809', '\x80A', '\f', '\x3', '\x2', '\x2', '\x80A', 
		'\x80B', '\a', '|', '\x2', '\x2', '\x80B', '\x80D', '\x5', '\x138', '\x9D', 
		'\x2', '\x80C', '\x809', '\x3', '\x2', '\x2', '\x2', '\x80D', '\x810', 
		'\x3', '\x2', '\x2', '\x2', '\x80E', '\x80C', '\x3', '\x2', '\x2', '\x2', 
		'\x80E', '\x80F', '\x3', '\x2', '\x2', '\x2', '\x80F', '\x137', '\x3', 
		'\x2', '\x2', '\x2', '\x810', '\x80E', '\x3', '\x2', '\x2', '\x2', '\x811', 
		'\x813', '\x5', '\xF2', 'z', '\x2', '\x812', '\x814', '\x5', '\x13A', 
		'\x9E', '\x2', '\x813', '\x812', '\x3', '\x2', '\x2', '\x2', '\x813', 
		'\x814', '\x3', '\x2', '\x2', '\x2', '\x814', '\x816', '\x3', '\x2', '\x2', 
		'\x2', '\x815', '\x817', '\x5', '\x13E', '\xA0', '\x2', '\x816', '\x815', 
		'\x3', '\x2', '\x2', '\x2', '\x816', '\x817', '\x3', '\x2', '\x2', '\x2', 
		'\x817', '\x825', '\x3', '\x2', '\x2', '\x2', '\x818', '\x81A', '\x5', 
		'\xF2', 'z', '\x2', '\x819', '\x81B', '\x5', '\x11E', '\x90', '\x2', '\x81A', 
		'\x819', '\x3', '\x2', '\x2', '\x2', '\x81A', '\x81B', '\x3', '\x2', '\x2', 
		'\x2', '\x81B', '\x825', '\x3', '\x2', '\x2', '\x2', '\x81C', '\x81E', 
		'\a', '\x86', '\x2', '\x2', '\x81D', '\x81C', '\x3', '\x2', '\x2', '\x2', 
		'\x81D', '\x81E', '\x3', '\x2', '\x2', '\x2', '\x81E', '\x820', '\x3', 
		'\x2', '\x2', '\x2', '\x81F', '\x821', '\x5', '\xD8', 'm', '\x2', '\x820', 
		'\x81F', '\x3', '\x2', '\x2', '\x2', '\x820', '\x821', '\x3', '\x2', '\x2', 
		'\x2', '\x821', '\x822', '\x3', '\x2', '\x2', '\x2', '\x822', '\x823', 
		'\a', '\x80', '\x2', '\x2', '\x823', '\x825', '\x5', '`', '\x31', '\x2', 
		'\x824', '\x811', '\x3', '\x2', '\x2', '\x2', '\x824', '\x818', '\x3', 
		'\x2', '\x2', '\x2', '\x824', '\x81D', '\x3', '\x2', '\x2', '\x2', '\x825', 
		'\x139', '\x3', '\x2', '\x2', '\x2', '\x826', '\x827', '\b', '\x9E', '\x1', 
		'\x2', '\x827', '\x828', '\x5', '\x13C', '\x9F', '\x2', '\x828', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x829', '\x82A', '\f', '\x3', '\x2', '\x2', 
		'\x82A', '\x82C', '\x5', '\x13C', '\x9F', '\x2', '\x82B', '\x829', '\x3', 
		'\x2', '\x2', '\x2', '\x82C', '\x82F', '\x3', '\x2', '\x2', '\x2', '\x82D', 
		'\x82B', '\x3', '\x2', '\x2', '\x2', '\x82D', '\x82E', '\x3', '\x2', '\x2', 
		'\x2', '\x82E', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x82F', '\x82D', 
		'\x3', '\x2', '\x2', '\x2', '\x830', '\x831', '\t', '\n', '\x2', '\x2', 
		'\x831', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x832', '\x833', '\a', 
		'g', '\x2', '\x2', '\x833', '\x834', '\a', '\x89', '\x2', '\x2', '\x834', 
		'\x835', '\b', '\xA0', '\x1', '\x2', '\x835', '\x13F', '\x3', '\x2', '\x2', 
		'\x2', '\x836', '\x837', '\a', '\x80', '\x2', '\x2', '\x837', '\x838', 
		'\x5', '\x142', '\xA2', '\x2', '\x838', '\x141', '\x3', '\x2', '\x2', 
		'\x2', '\x839', '\x83A', '\b', '\xA2', '\x1', '\x2', '\x83A', '\x83C', 
		'\x5', '\x144', '\xA3', '\x2', '\x83B', '\x83D', '\a', '\x85', '\x2', 
		'\x2', '\x83C', '\x83B', '\x3', '\x2', '\x2', '\x2', '\x83C', '\x83D', 
		'\x3', '\x2', '\x2', '\x2', '\x83D', '\x846', '\x3', '\x2', '\x2', '\x2', 
		'\x83E', '\x83F', '\f', '\x3', '\x2', '\x2', '\x83F', '\x840', '\a', '|', 
		'\x2', '\x2', '\x840', '\x842', '\x5', '\x144', '\xA3', '\x2', '\x841', 
		'\x843', '\a', '\x85', '\x2', '\x2', '\x842', '\x841', '\x3', '\x2', '\x2', 
		'\x2', '\x842', '\x843', '\x3', '\x2', '\x2', '\x2', '\x843', '\x845', 
		'\x3', '\x2', '\x2', '\x2', '\x844', '\x83E', '\x3', '\x2', '\x2', '\x2', 
		'\x845', '\x848', '\x3', '\x2', '\x2', '\x2', '\x846', '\x844', '\x3', 
		'\x2', '\x2', '\x2', '\x846', '\x847', '\x3', '\x2', '\x2', '\x2', '\x847', 
		'\x143', '\x3', '\x2', '\x2', '\x2', '\x848', '\x846', '\x3', '\x2', '\x2', 
		'\x2', '\x849', '\x84B', '\x5', '\xD8', 'm', '\x2', '\x84A', '\x849', 
		'\x3', '\x2', '\x2', '\x2', '\x84A', '\x84B', '\x3', '\x2', '\x2', '\x2', 
		'\x84B', '\x84C', '\x3', '\x2', '\x2', '\x2', '\x84C', '\x85F', '\x5', 
		'\x148', '\xA5', '\x2', '\x84D', '\x84F', '\x5', '\xD8', 'm', '\x2', '\x84E', 
		'\x84D', '\x3', '\x2', '\x2', '\x2', '\x84E', '\x84F', '\x3', '\x2', '\x2', 
		'\x2', '\x84F', '\x850', '\x3', '\x2', '\x2', '\x2', '\x850', '\x852', 
		'\a', 'R', '\x2', '\x2', '\x851', '\x853', '\x5', '\x14A', '\xA6', '\x2', 
		'\x852', '\x851', '\x3', '\x2', '\x2', '\x2', '\x852', '\x853', '\x3', 
		'\x2', '\x2', '\x2', '\x853', '\x854', '\x3', '\x2', '\x2', '\x2', '\x854', 
		'\x85F', '\x5', '\x148', '\xA5', '\x2', '\x855', '\x857', '\x5', '\xD8', 
		'm', '\x2', '\x856', '\x855', '\x3', '\x2', '\x2', '\x2', '\x856', '\x857', 
		'\x3', '\x2', '\x2', '\x2', '\x857', '\x858', '\x3', '\x2', '\x2', '\x2', 
		'\x858', '\x85A', '\x5', '\x14A', '\xA6', '\x2', '\x859', '\x85B', '\a', 
		'R', '\x2', '\x2', '\x85A', '\x859', '\x3', '\x2', '\x2', '\x2', '\x85A', 
		'\x85B', '\x3', '\x2', '\x2', '\x2', '\x85B', '\x85C', '\x3', '\x2', '\x2', 
		'\x2', '\x85C', '\x85D', '\x5', '\x148', '\xA5', '\x2', '\x85D', '\x85F', 
		'\x3', '\x2', '\x2', '\x2', '\x85E', '\x84A', '\x3', '\x2', '\x2', '\x2', 
		'\x85E', '\x84E', '\x3', '\x2', '\x2', '\x2', '\x85E', '\x856', '\x3', 
		'\x2', '\x2', '\x2', '\x85F', '\x145', '\x3', '\x2', '\x2', '\x2', '\x860', 
		'\x862', '\x5', '\f', '\a', '\x2', '\x861', '\x860', '\x3', '\x2', '\x2', 
		'\x2', '\x861', '\x862', '\x3', '\x2', '\x2', '\x2', '\x862', '\x863', 
		'\x3', '\x2', '\x2', '\x2', '\x863', '\x866', '\x5', '\x126', '\x94', 
		'\x2', '\x864', '\x866', '\x5', '\xA4', 'S', '\x2', '\x865', '\x861', 
		'\x3', '\x2', '\x2', '\x2', '\x865', '\x864', '\x3', '\x2', '\x2', '\x2', 
		'\x866', '\x147', '\x3', '\x2', '\x2', '\x2', '\x867', '\x868', '\x5', 
		'\x146', '\xA4', '\x2', '\x868', '\x149', '\x3', '\x2', '\x2', '\x2', 
		'\x869', '\x86A', '\t', '\v', '\x2', '\x2', '\x86A', '\x14B', '\x3', '\x2', 
		'\x2', '\x2', '\x86B', '\x86C', '\a', '\x36', '\x2', '\x2', '\x86C', '\x86D', 
		'\x5', '\x14E', '\xA8', '\x2', '\x86D', '\x14D', '\x3', '\x2', '\x2', 
		'\x2', '\x86E', '\x870', '\x5', '\x9C', 'O', '\x2', '\x86F', '\x871', 
		'\x5', '\x150', '\xA9', '\x2', '\x870', '\x86F', '\x3', '\x2', '\x2', 
		'\x2', '\x870', '\x871', '\x3', '\x2', '\x2', '\x2', '\x871', '\x14F', 
		'\x3', '\x2', '\x2', '\x2', '\x872', '\x874', '\x5', '\xFC', '\x7F', '\x2', 
		'\x873', '\x875', '\x5', '\x150', '\xA9', '\x2', '\x874', '\x873', '\x3', 
		'\x2', '\x2', '\x2', '\x874', '\x875', '\x3', '\x2', '\x2', '\x2', '\x875', 
		'\x151', '\x3', '\x2', '\x2', '\x2', '\x876', '\x877', '\a', '\x80', '\x2', 
		'\x2', '\x877', '\x878', '\x5', '\x154', '\xAB', '\x2', '\x878', '\x153', 
		'\x3', '\x2', '\x2', '\x2', '\x879', '\x87B', '\x5', '\x156', '\xAC', 
		'\x2', '\x87A', '\x87C', '\a', '\x85', '\x2', '\x2', '\x87B', '\x87A', 
		'\x3', '\x2', '\x2', '\x2', '\x87B', '\x87C', '\x3', '\x2', '\x2', '\x2', 
		'\x87C', '\x885', '\x3', '\x2', '\x2', '\x2', '\x87D', '\x87F', '\x5', 
		'\x156', '\xAC', '\x2', '\x87E', '\x880', '\a', '\x85', '\x2', '\x2', 
		'\x87F', '\x87E', '\x3', '\x2', '\x2', '\x2', '\x87F', '\x880', '\x3', 
		'\x2', '\x2', '\x2', '\x880', '\x881', '\x3', '\x2', '\x2', '\x2', '\x881', 
		'\x882', '\a', '|', '\x2', '\x2', '\x882', '\x883', '\x5', '\x154', '\xAB', 
		'\x2', '\x883', '\x885', '\x3', '\x2', '\x2', '\x2', '\x884', '\x879', 
		'\x3', '\x2', '\x2', '\x2', '\x884', '\x87D', '\x3', '\x2', '\x2', '\x2', 
		'\x885', '\x155', '\x3', '\x2', '\x2', '\x2', '\x886', '\x887', '\x5', 
		'\x158', '\xAD', '\x2', '\x887', '\x889', '\a', 'W', '\x2', '\x2', '\x888', 
		'\x88A', '\x5', '&', '\x14', '\x2', '\x889', '\x888', '\x3', '\x2', '\x2', 
		'\x2', '\x889', '\x88A', '\x3', '\x2', '\x2', '\x2', '\x88A', '\x88B', 
		'\x3', '\x2', '\x2', '\x2', '\x88B', '\x88C', '\a', 'X', '\x2', '\x2', 
		'\x88C', '\x891', '\x3', '\x2', '\x2', '\x2', '\x88D', '\x88E', '\x5', 
		'\x158', '\xAD', '\x2', '\x88E', '\x88F', '\x5', '\x124', '\x93', '\x2', 
		'\x88F', '\x891', '\x3', '\x2', '\x2', '\x2', '\x890', '\x886', '\x3', 
		'\x2', '\x2', '\x2', '\x890', '\x88D', '\x3', '\x2', '\x2', '\x2', '\x891', 
		'\x157', '\x3', '\x2', '\x2', '\x2', '\x892', '\x895', '\x5', '\x146', 
		'\xA4', '\x2', '\x893', '\x895', '\a', '\x86', '\x2', '\x2', '\x894', 
		'\x892', '\x3', '\x2', '\x2', '\x2', '\x894', '\x893', '\x3', '\x2', '\x2', 
		'\x2', '\x895', '\x159', '\x3', '\x2', '\x2', '\x2', '\x896', '\x897', 
		'\a', '\x36', '\x2', '\x2', '\x897', '\x898', '\x5', '\x18E', '\xC8', 
		'\x2', '\x898', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x899', '\x89A', 
		'\a', '\x36', '\x2', '\x2', '\x89A', '\x89B', '\a', '\x8F', '\x2', '\x2', 
		'\x89B', '\x89F', '\a', '\x86', '\x2', '\x2', '\x89C', '\x89D', '\a', 
		'\x36', '\x2', '\x2', '\x89D', '\x89F', '\a', '\x92', '\x2', '\x2', '\x89E', 
		'\x899', '\x3', '\x2', '\x2', '\x2', '\x89E', '\x89C', '\x3', '\x2', '\x2', 
		'\x2', '\x89F', '\x15D', '\x3', '\x2', '\x2', '\x2', '\x8A0', '\x8A1', 
		'\a', '\x46', '\x2', '\x2', '\x8A1', '\x8A2', '\a', 'h', '\x2', '\x2', 
		'\x8A2', '\x8A3', '\x5', '\x160', '\xB1', '\x2', '\x8A3', '\x8A4', '\a', 
		'i', '\x2', '\x2', '\x8A4', '\x8A5', '\x5', '~', '@', '\x2', '\x8A5', 
		'\x15F', '\x3', '\x2', '\x2', '\x2', '\x8A6', '\x8A7', '\b', '\xB1', '\x1', 
		'\x2', '\x8A7', '\x8A8', '\x5', '\x162', '\xB2', '\x2', '\x8A8', '\x8AE', 
		'\x3', '\x2', '\x2', '\x2', '\x8A9', '\x8AA', '\f', '\x3', '\x2', '\x2', 
		'\x8AA', '\x8AB', '\a', '|', '\x2', '\x2', '\x8AB', '\x8AD', '\x5', '\x162', 
		'\xB2', '\x2', '\x8AC', '\x8A9', '\x3', '\x2', '\x2', '\x2', '\x8AD', 
		'\x8B0', '\x3', '\x2', '\x2', '\x2', '\x8AE', '\x8AC', '\x3', '\x2', '\x2', 
		'\x2', '\x8AE', '\x8AF', '\x3', '\x2', '\x2', '\x2', '\x8AF', '\x161', 
		'\x3', '\x2', '\x2', '\x2', '\x8B0', '\x8AE', '\x3', '\x2', '\x2', '\x2', 
		'\x8B1', '\x8B4', '\x5', '\x164', '\xB3', '\x2', '\x8B2', '\x8B4', '\x5', 
		'\x116', '\x8C', '\x2', '\x8B3', '\x8B1', '\x3', '\x2', '\x2', '\x2', 
		'\x8B3', '\x8B2', '\x3', '\x2', '\x2', '\x2', '\x8B4', '\x163', '\x3', 
		'\x2', '\x2', '\x2', '\x8B5', '\x8B7', '\a', '\x16', '\x2', '\x2', '\x8B6', 
		'\x8B8', '\a', '\x85', '\x2', '\x2', '\x8B7', '\x8B6', '\x3', '\x2', '\x2', 
		'\x2', '\x8B7', '\x8B8', '\x3', '\x2', '\x2', '\x2', '\x8B8', '\x8BA', 
		'\x3', '\x2', '\x2', '\x2', '\x8B9', '\x8BB', '\a', '\x86', '\x2', '\x2', 
		'\x8BA', '\x8B9', '\x3', '\x2', '\x2', '\x2', '\x8BA', '\x8BB', '\x3', 
		'\x2', '\x2', '\x2', '\x8BB', '\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8BC', 
		'\x8BE', '\a', '\x16', '\x2', '\x2', '\x8BD', '\x8BF', '\a', '\x86', '\x2', 
		'\x2', '\x8BE', '\x8BD', '\x3', '\x2', '\x2', '\x2', '\x8BE', '\x8BF', 
		'\x3', '\x2', '\x2', '\x2', '\x8BF', '\x8C0', '\x3', '\x2', '\x2', '\x2', 
		'\x8C0', '\x8C1', '\a', 'g', '\x2', '\x2', '\x8C1', '\x8E6', '\x5', '\x106', 
		'\x84', '\x2', '\x8C2', '\x8C4', '\a', 'N', '\x2', '\x2', '\x8C3', '\x8C5', 
		'\a', '\x85', '\x2', '\x2', '\x8C4', '\x8C3', '\x3', '\x2', '\x2', '\x2', 
		'\x8C4', '\x8C5', '\x3', '\x2', '\x2', '\x2', '\x8C5', '\x8C7', '\x3', 
		'\x2', '\x2', '\x2', '\x8C6', '\x8C8', '\a', '\x86', '\x2', '\x2', '\x8C7', 
		'\x8C6', '\x3', '\x2', '\x2', '\x2', '\x8C7', '\x8C8', '\x3', '\x2', '\x2', 
		'\x2', '\x8C8', '\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8C9', '\x8CB', 
		'\a', 'N', '\x2', '\x2', '\x8CA', '\x8CC', '\a', '\x86', '\x2', '\x2', 
		'\x8CB', '\x8CA', '\x3', '\x2', '\x2', '\x2', '\x8CB', '\x8CC', '\x3', 
		'\x2', '\x2', '\x2', '\x8CC', '\x8CD', '\x3', '\x2', '\x2', '\x2', '\x8CD', 
		'\x8CE', '\a', 'g', '\x2', '\x2', '\x8CE', '\x8E6', '\x5', '\x106', '\x84', 
		'\x2', '\x8CF', '\x8D0', '\a', '\x46', '\x2', '\x2', '\x8D0', '\x8D1', 
		'\a', 'h', '\x2', '\x2', '\x8D1', '\x8D2', '\x5', '\x160', '\xB1', '\x2', 
		'\x8D2', '\x8D3', '\a', 'i', '\x2', '\x2', '\x8D3', '\x8D5', '\a', '\x16', 
		'\x2', '\x2', '\x8D4', '\x8D6', '\a', '\x85', '\x2', '\x2', '\x8D5', '\x8D4', 
		'\x3', '\x2', '\x2', '\x2', '\x8D5', '\x8D6', '\x3', '\x2', '\x2', '\x2', 
		'\x8D6', '\x8D8', '\x3', '\x2', '\x2', '\x2', '\x8D7', '\x8D9', '\a', 
		'\x86', '\x2', '\x2', '\x8D8', '\x8D7', '\x3', '\x2', '\x2', '\x2', '\x8D8', 
		'\x8D9', '\x3', '\x2', '\x2', '\x2', '\x8D9', '\x8E6', '\x3', '\x2', '\x2', 
		'\x2', '\x8DA', '\x8DB', '\a', '\x46', '\x2', '\x2', '\x8DB', '\x8DC', 
		'\a', 'h', '\x2', '\x2', '\x8DC', '\x8DD', '\x5', '\x160', '\xB1', '\x2', 
		'\x8DD', '\x8DE', '\a', 'i', '\x2', '\x2', '\x8DE', '\x8E0', '\a', '\x16', 
		'\x2', '\x2', '\x8DF', '\x8E1', '\a', '\x86', '\x2', '\x2', '\x8E0', '\x8DF', 
		'\x3', '\x2', '\x2', '\x2', '\x8E0', '\x8E1', '\x3', '\x2', '\x2', '\x2', 
		'\x8E1', '\x8E2', '\x3', '\x2', '\x2', '\x2', '\x8E2', '\x8E3', '\a', 
		'g', '\x2', '\x2', '\x8E3', '\x8E4', '\x5', '\x6', '\x4', '\x2', '\x8E4', 
		'\x8E6', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8B5', '\x3', '\x2', '\x2', 
		'\x2', '\x8E5', '\x8BC', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8C2', 
		'\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8C9', '\x3', '\x2', '\x2', '\x2', 
		'\x8E5', '\x8CF', '\x3', '\x2', '\x2', '\x2', '\x8E5', '\x8DA', '\x3', 
		'\x2', '\x2', '\x2', '\x8E6', '\x165', '\x3', '\x2', '\x2', '\x2', '\x8E7', 
		'\x8E8', '\x5', '\x16A', '\xB6', '\x2', '\x8E8', '\x8EA', '\a', 'h', '\x2', 
		'\x2', '\x8E9', '\x8EB', '\x5', '\x16C', '\xB7', '\x2', '\x8EA', '\x8E9', 
		'\x3', '\x2', '\x2', '\x2', '\x8EA', '\x8EB', '\x3', '\x2', '\x2', '\x2', 
		'\x8EB', '\x8EC', '\x3', '\x2', '\x2', '\x2', '\x8EC', '\x8ED', '\a', 
		'i', '\x2', '\x2', '\x8ED', '\x167', '\x3', '\x2', '\x2', '\x2', '\x8EE', 
		'\x8FE', '\x5', '\x166', '\xB4', '\x2', '\x8EF', '\x8F0', '\x5', '\x15A', 
		'\xAE', '\x2', '\x8F0', '\x8F2', '\a', 'h', '\x2', '\x2', '\x8F1', '\x8F3', 
		'\x5', '\x16C', '\xB7', '\x2', '\x8F2', '\x8F1', '\x3', '\x2', '\x2', 
		'\x2', '\x8F2', '\x8F3', '\x3', '\x2', '\x2', '\x2', '\x8F3', '\x8F4', 
		'\x3', '\x2', '\x2', '\x2', '\x8F4', '\x8F5', '\a', 'i', '\x2', '\x2', 
		'\x8F5', '\x8FE', '\x3', '\x2', '\x2', '\x2', '\x8F6', '\x8F7', '\x5', 
		'\x15C', '\xAF', '\x2', '\x8F7', '\x8F9', '\a', 'h', '\x2', '\x2', '\x8F8', 
		'\x8FA', '\x5', '\x16C', '\xB7', '\x2', '\x8F9', '\x8F8', '\x3', '\x2', 
		'\x2', '\x2', '\x8F9', '\x8FA', '\x3', '\x2', '\x2', '\x2', '\x8FA', '\x8FB', 
		'\x3', '\x2', '\x2', '\x2', '\x8FB', '\x8FC', '\a', 'i', '\x2', '\x2', 
		'\x8FC', '\x8FE', '\x3', '\x2', '\x2', '\x2', '\x8FD', '\x8EE', '\x3', 
		'\x2', '\x2', '\x2', '\x8FD', '\x8EF', '\x3', '\x2', '\x2', '\x2', '\x8FD', 
		'\x8F6', '\x3', '\x2', '\x2', '\x2', '\x8FE', '\x169', '\x3', '\x2', '\x2', 
		'\x2', '\x8FF', '\x900', '\a', '\x86', '\x2', '\x2', '\x900', '\x16B', 
		'\x3', '\x2', '\x2', '\x2', '\x901', '\x902', '\b', '\xB7', '\x1', '\x2', 
		'\x902', '\x904', '\x5', '\x16E', '\xB8', '\x2', '\x903', '\x905', '\a', 
		'\x85', '\x2', '\x2', '\x904', '\x903', '\x3', '\x2', '\x2', '\x2', '\x904', 
		'\x905', '\x3', '\x2', '\x2', '\x2', '\x905', '\x90E', '\x3', '\x2', '\x2', 
		'\x2', '\x906', '\x907', '\f', '\x3', '\x2', '\x2', '\x907', '\x908', 
		'\a', '|', '\x2', '\x2', '\x908', '\x90A', '\x5', '\x16E', '\xB8', '\x2', 
		'\x909', '\x90B', '\a', '\x85', '\x2', '\x2', '\x90A', '\x909', '\x3', 
		'\x2', '\x2', '\x2', '\x90A', '\x90B', '\x3', '\x2', '\x2', '\x2', '\x90B', 
		'\x90D', '\x3', '\x2', '\x2', '\x2', '\x90C', '\x906', '\x3', '\x2', '\x2', 
		'\x2', '\x90D', '\x910', '\x3', '\x2', '\x2', '\x2', '\x90E', '\x90C', 
		'\x3', '\x2', '\x2', '\x2', '\x90E', '\x90F', '\x3', '\x2', '\x2', '\x2', 
		'\x90F', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x910', '\x90E', '\x3', 
		'\x2', '\x2', '\x2', '\x911', '\x915', '\x5', '\x106', '\x84', '\x2', 
		'\x912', '\x915', '\x5', '`', '\x31', '\x2', '\x913', '\x915', '\x5', 
		'\x6', '\x4', '\x2', '\x914', '\x911', '\x3', '\x2', '\x2', '\x2', '\x914', 
		'\x912', '\x3', '\x2', '\x2', '\x2', '\x914', '\x913', '\x3', '\x2', '\x2', 
		'\x2', '\x915', '\x16F', '\x3', '\x2', '\x2', '\x2', '\x916', '\x917', 
		'\a', 'N', '\x2', '\x2', '\x917', '\x918', '\x5', '\f', '\a', '\x2', '\x918', 
		'\x919', '\a', '\x86', '\x2', '\x2', '\x919', '\x922', '\x3', '\x2', '\x2', 
		'\x2', '\x91A', '\x91B', '\a', 'N', '\x2', '\x2', '\x91B', '\x91D', '\x5', 
		'\f', '\a', '\x2', '\x91C', '\x91E', '\a', '\x46', '\x2', '\x2', '\x91D', 
		'\x91C', '\x3', '\x2', '\x2', '\x2', '\x91D', '\x91E', '\x3', '\x2', '\x2', 
		'\x2', '\x91E', '\x91F', '\x3', '\x2', '\x2', '\x2', '\x91F', '\x920', 
		'\x5', '\x166', '\xB4', '\x2', '\x920', '\x922', '\x3', '\x2', '\x2', 
		'\x2', '\x921', '\x916', '\x3', '\x2', '\x2', '\x2', '\x921', '\x91A', 
		'\x3', '\x2', '\x2', '\x2', '\x922', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x923', '\x925', '\a', '%', '\x2', '\x2', '\x924', '\x923', '\x3', '\x2', 
		'\x2', '\x2', '\x924', '\x925', '\x3', '\x2', '\x2', '\x2', '\x925', '\x926', 
		'\x3', '\x2', '\x2', '\x2', '\x926', '\x927', '\a', '\x46', '\x2', '\x2', 
		'\x927', '\x928', '\x5', '~', '@', '\x2', '\x928', '\x173', '\x3', '\x2', 
		'\x2', '\x2', '\x929', '\x92A', '\a', '\x46', '\x2', '\x2', '\x92A', '\x92B', 
		'\a', 'h', '\x2', '\x2', '\x92B', '\x92C', '\a', 'i', '\x2', '\x2', '\x92C', 
		'\x92D', '\x5', '~', '@', '\x2', '\x92D', '\x175', '\x3', '\x2', '\x2', 
		'\x2', '\x92E', '\x92F', '\a', 'K', '\x2', '\x2', '\x92F', '\x930', '\x5', 
		'h', '\x35', '\x2', '\x930', '\x931', '\x5', '\x17A', '\xBE', '\x2', '\x931', 
		'\x177', '\x3', '\x2', '\x2', '\x2', '\x932', '\x934', '\a', 'K', '\x2', 
		'\x2', '\x933', '\x935', '\x5', '\x152', '\xAA', '\x2', '\x934', '\x933', 
		'\x3', '\x2', '\x2', '\x2', '\x934', '\x935', '\x3', '\x2', '\x2', '\x2', 
		'\x935', '\x936', '\x3', '\x2', '\x2', '\x2', '\x936', '\x937', '\x5', 
		'h', '\x35', '\x2', '\x937', '\x938', '\x5', '\x17A', '\xBE', '\x2', '\x938', 
		'\x179', '\x3', '\x2', '\x2', '\x2', '\x939', '\x93B', '\x5', '\x17C', 
		'\xBF', '\x2', '\x93A', '\x93C', '\x5', '\x17A', '\xBE', '\x2', '\x93B', 
		'\x93A', '\x3', '\x2', '\x2', '\x2', '\x93B', '\x93C', '\x3', '\x2', '\x2', 
		'\x2', '\x93C', '\x17B', '\x3', '\x2', '\x2', '\x2', '\x93D', '\x93E', 
		'\a', '\x12', '\x2', '\x2', '\x93E', '\x93F', '\a', 'W', '\x2', '\x2', 
		'\x93F', '\x940', '\x5', '\x17E', '\xC0', '\x2', '\x940', '\x941', '\a', 
		'X', '\x2', '\x2', '\x941', '\x942', '\x5', 'h', '\x35', '\x2', '\x942', 
		'\x17D', '\x3', '\x2', '\x2', '\x2', '\x943', '\x945', '\x5', '\xD8', 
		'm', '\x2', '\x944', '\x943', '\x3', '\x2', '\x2', '\x2', '\x944', '\x945', 
		'\x3', '\x2', '\x2', '\x2', '\x945', '\x946', '\x3', '\x2', '\x2', '\x2', 
		'\x946', '\x947', '\x5', '\x9C', 'O', '\x2', '\x947', '\x948', '\x5', 
		'\xF2', 'z', '\x2', '\x948', '\x952', '\x3', '\x2', '\x2', '\x2', '\x949', 
		'\x94B', '\x5', '\xD8', 'm', '\x2', '\x94A', '\x949', '\x3', '\x2', '\x2', 
		'\x2', '\x94A', '\x94B', '\x3', '\x2', '\x2', '\x2', '\x94B', '\x94C', 
		'\x3', '\x2', '\x2', '\x2', '\x94C', '\x94E', '\x5', '\x9C', 'O', '\x2', 
		'\x94D', '\x94F', '\x5', '\x108', '\x85', '\x2', '\x94E', '\x94D', '\x3', 
		'\x2', '\x2', '\x2', '\x94E', '\x94F', '\x3', '\x2', '\x2', '\x2', '\x94F', 
		'\x952', '\x3', '\x2', '\x2', '\x2', '\x950', '\x952', '\a', '\x85', '\x2', 
		'\x2', '\x951', '\x944', '\x3', '\x2', '\x2', '\x2', '\x951', '\x94A', 
		'\x3', '\x2', '\x2', '\x2', '\x951', '\x950', '\x3', '\x2', '\x2', '\x2', 
		'\x952', '\x17F', '\x3', '\x2', '\x2', '\x2', '\x953', '\x955', '\a', 
		'I', '\x2', '\x2', '\x954', '\x956', '\x5', 'Z', '.', '\x2', '\x955', 
		'\x954', '\x3', '\x2', '\x2', '\x2', '\x955', '\x956', '\x3', '\x2', '\x2', 
		'\x2', '\x956', '\x181', '\x3', '\x2', '\x2', '\x2', '\x957', '\x95A', 
		'\x5', '\x184', '\xC3', '\x2', '\x958', '\x95A', '\x5', '\x188', '\xC5', 
		'\x2', '\x959', '\x957', '\x3', '\x2', '\x2', '\x2', '\x959', '\x958', 
		'\x3', '\x2', '\x2', '\x2', '\x95A', '\x183', '\x3', '\x2', '\x2', '\x2', 
		'\x95B', '\x95C', '\a', 'I', '\x2', '\x2', '\x95C', '\x95E', '\a', 'W', 
		'\x2', '\x2', '\x95D', '\x95F', '\x5', '\x186', '\xC4', '\x2', '\x95E', 
		'\x95D', '\x3', '\x2', '\x2', '\x2', '\x95E', '\x95F', '\x3', '\x2', '\x2', 
		'\x2', '\x95F', '\x960', '\x3', '\x2', '\x2', '\x2', '\x960', '\x961', 
		'\a', 'X', '\x2', '\x2', '\x961', '\x185', '\x3', '\x2', '\x2', '\x2', 
		'\x962', '\x963', '\b', '\xC4', '\x1', '\x2', '\x963', '\x965', '\x5', 
		'\x106', '\x84', '\x2', '\x964', '\x966', '\a', '\x85', '\x2', '\x2', 
		'\x965', '\x964', '\x3', '\x2', '\x2', '\x2', '\x965', '\x966', '\x3', 
		'\x2', '\x2', '\x2', '\x966', '\x96F', '\x3', '\x2', '\x2', '\x2', '\x967', 
		'\x968', '\f', '\x3', '\x2', '\x2', '\x968', '\x969', '\a', '|', '\x2', 
		'\x2', '\x969', '\x96B', '\x5', '\x106', '\x84', '\x2', '\x96A', '\x96C', 
		'\a', '\x85', '\x2', '\x2', '\x96B', '\x96A', '\x3', '\x2', '\x2', '\x2', 
		'\x96B', '\x96C', '\x3', '\x2', '\x2', '\x2', '\x96C', '\x96E', '\x3', 
		'\x2', '\x2', '\x2', '\x96D', '\x967', '\x3', '\x2', '\x2', '\x2', '\x96E', 
		'\x971', '\x3', '\x2', '\x2', '\x2', '\x96F', '\x96D', '\x3', '\x2', '\x2', 
		'\x2', '\x96F', '\x970', '\x3', '\x2', '\x2', '\x2', '\x970', '\x187', 
		'\x3', '\x2', '\x2', '\x2', '\x971', '\x96F', '\x3', '\x2', '\x2', '\x2', 
		'\x972', '\x973', '\a', '\x33', '\x2', '\x2', '\x973', '\x974', '\a', 
		'W', '\x2', '\x2', '\x974', '\x975', '\x5', '`', '\x31', '\x2', '\x975', 
		'\x976', '\a', 'X', '\x2', '\x2', '\x976', '\x979', '\x3', '\x2', '\x2', 
		'\x2', '\x977', '\x979', '\a', '\x33', '\x2', '\x2', '\x978', '\x972', 
		'\x3', '\x2', '\x2', '\x2', '\x978', '\x977', '\x3', '\x2', '\x2', '\x2', 
		'\x979', '\x189', '\x3', '\x2', '\x2', '\x2', '\x97A', '\x97B', '\a', 
		'i', '\x2', '\x2', '\x97B', '\x97C', '\a', 'i', '\x2', '\x2', '\x97C', 
		'\x97D', '\x6', '\xC6', ';', '\x3', '\x97D', '\x18B', '\x3', '\x2', '\x2', 
		'\x2', '\x97E', '\x97F', '\a', 'i', '\x2', '\x2', '\x97F', '\x980', '\a', 
		'w', '\x2', '\x2', '\x980', '\x981', '\x6', '\xC7', '<', '\x3', '\x981', 
		'\x18D', '\x3', '\x2', '\x2', '\x2', '\x982', '\x9B6', '\a', '\x32', '\x2', 
		'\x2', '\x983', '\x9B6', '\a', '\x1D', '\x2', '\x2', '\x984', '\x985', 
		'\a', '\x32', '\x2', '\x2', '\x985', '\x986', '\a', 'Y', '\x2', '\x2', 
		'\x986', '\x9B6', '\a', 'Z', '\x2', '\x2', '\x987', '\x988', '\a', '\x1D', 
		'\x2', '\x2', '\x988', '\x989', '\a', 'Y', '\x2', '\x2', '\x989', '\x9B6', 
		'\a', 'Z', '\x2', '\x2', '\x98A', '\x9B6', '\a', ']', '\x2', '\x2', '\x98B', 
		'\x9B6', '\a', '^', '\x2', '\x2', '\x98C', '\x9B6', '\a', '_', '\x2', 
		'\x2', '\x98D', '\x9B6', '\a', '`', '\x2', '\x2', '\x98E', '\x9B6', '\a', 
		'\x61', '\x2', '\x2', '\x98F', '\x9B6', '\a', '\x62', '\x2', '\x2', '\x990', 
		'\x9B6', '\a', '\x63', '\x2', '\x2', '\x991', '\x9B6', '\a', '\x64', '\x2', 
		'\x2', '\x992', '\x9B6', '\a', '\x65', '\x2', '\x2', '\x993', '\x9B6', 
		'\a', '\x3', '\x2', '\x2', '\x994', '\x9B6', '\a', '\x4', '\x2', '\x2', 
		'\x995', '\x9B6', '\a', 'g', '\x2', '\x2', '\x996', '\x9B6', '\a', 'h', 
		'\x2', '\x2', '\x997', '\x9B6', '\a', 'i', '\x2', '\x2', '\x998', '\x9B6', 
		'\a', 'j', '\x2', '\x2', '\x999', '\x9B6', '\a', 'k', '\x2', '\x2', '\x99A', 
		'\x9B6', '\a', 'l', '\x2', '\x2', '\x99B', '\x9B6', '\a', 'm', '\x2', 
		'\x2', '\x99C', '\x9B6', '\a', 'n', '\x2', '\x2', '\x99D', '\x9B6', '\a', 
		'o', '\x2', '\x2', '\x99E', '\x9B6', '\a', 'p', '\x2', '\x2', '\x99F', 
		'\x9B6', '\a', 'q', '\x2', '\x2', '\x9A0', '\x9B6', '\a', 'r', '\x2', 
		'\x2', '\x9A1', '\x9B6', '\x5', '\x18A', '\xC6', '\x2', '\x9A2', '\x9B6', 
		'\x5', '\x18C', '\xC7', '\x2', '\x9A3', '\x9B6', '\a', 's', '\x2', '\x2', 
		'\x9A4', '\x9B6', '\a', 't', '\x2', '\x2', '\x9A5', '\x9B6', '\a', 'u', 
		'\x2', '\x2', '\x9A6', '\x9B6', '\a', 'v', '\x2', '\x2', '\x9A7', '\x9B6', 
		'\a', 'w', '\x2', '\x2', '\x9A8', '\x9B6', '\a', '\x5', '\x2', '\x2', 
		'\x9A9', '\x9B6', '\a', '\x6', '\x2', '\x2', '\x9AA', '\x9B6', '\a', '\a', 
		'\x2', '\x2', '\x9AB', '\x9B6', '\a', '\b', '\x2', '\x2', '\x9AC', '\x9B6', 
		'\a', 'z', '\x2', '\x2', '\x9AD', '\x9B6', '\a', '{', '\x2', '\x2', '\x9AE', 
		'\x9B6', '\a', '|', '\x2', '\x2', '\x9AF', '\x9B6', '\a', '}', '\x2', 
		'\x2', '\x9B0', '\x9B6', '\a', '~', '\x2', '\x2', '\x9B1', '\x9B2', '\a', 
		'W', '\x2', '\x2', '\x9B2', '\x9B6', '\a', 'X', '\x2', '\x2', '\x9B3', 
		'\x9B4', '\a', 'Y', '\x2', '\x2', '\x9B4', '\x9B6', '\a', 'Z', '\x2', 
		'\x2', '\x9B5', '\x982', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x983', 
		'\x3', '\x2', '\x2', '\x2', '\x9B5', '\x984', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\x987', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x98A', '\x3', 
		'\x2', '\x2', '\x2', '\x9B5', '\x98B', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x98C', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x98D', '\x3', '\x2', '\x2', 
		'\x2', '\x9B5', '\x98E', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x98F', 
		'\x3', '\x2', '\x2', '\x2', '\x9B5', '\x990', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\x991', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x992', '\x3', 
		'\x2', '\x2', '\x2', '\x9B5', '\x993', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x994', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x995', '\x3', '\x2', '\x2', 
		'\x2', '\x9B5', '\x996', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x997', 
		'\x3', '\x2', '\x2', '\x2', '\x9B5', '\x998', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\x999', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x99A', '\x3', 
		'\x2', '\x2', '\x2', '\x9B5', '\x99B', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x99C', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x99D', '\x3', '\x2', '\x2', 
		'\x2', '\x9B5', '\x99E', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x99F', 
		'\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9A0', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\x9A1', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9A2', '\x3', 
		'\x2', '\x2', '\x2', '\x9B5', '\x9A3', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x9A4', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9A5', '\x3', '\x2', '\x2', 
		'\x2', '\x9B5', '\x9A6', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9A7', 
		'\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9A8', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\x9A9', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9AA', '\x3', 
		'\x2', '\x2', '\x2', '\x9B5', '\x9AB', '\x3', '\x2', '\x2', '\x2', '\x9B5', 
		'\x9AC', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9AD', '\x3', '\x2', '\x2', 
		'\x2', '\x9B5', '\x9AE', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9AF', 
		'\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9B0', '\x3', '\x2', '\x2', '\x2', 
		'\x9B5', '\x9B1', '\x3', '\x2', '\x2', '\x2', '\x9B5', '\x9B3', '\x3', 
		'\x2', '\x2', '\x2', '\x9B6', '\x18F', '\x3', '\x2', '\x2', '\x2', '\x9B7', 
		'\x9BF', '\a', '\x87', '\x2', '\x2', '\x9B8', '\x9BF', '\a', '\x8D', '\x2', 
		'\x2', '\x9B9', '\x9BF', '\a', '\x8E', '\x2', '\x2', '\x9BA', '\x9BF', 
		'\x5', '\x86', '\x44', '\x2', '\x9BB', '\x9BF', '\x5', '\x192', '\xCA', 
		'\x2', '\x9BC', '\x9BF', '\x5', '\x194', '\xCB', '\x2', '\x9BD', '\x9BF', 
		'\x5', '\x196', '\xCC', '\x2', '\x9BE', '\x9B7', '\x3', '\x2', '\x2', 
		'\x2', '\x9BE', '\x9B8', '\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9B9', 
		'\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9BA', '\x3', '\x2', '\x2', '\x2', 
		'\x9BE', '\x9BB', '\x3', '\x2', '\x2', '\x2', '\x9BE', '\x9BC', '\x3', 
		'\x2', '\x2', '\x2', '\x9BE', '\x9BD', '\x3', '\x2', '\x2', '\x2', '\x9BF', 
		'\x191', '\x3', '\x2', '\x2', '\x2', '\x9C0', '\x9C1', '\t', '\f', '\x2', 
		'\x2', '\x9C1', '\x193', '\x3', '\x2', '\x2', '\x2', '\x9C2', '\x9C3', 
		'\t', '\r', '\x2', '\x2', '\x9C3', '\x195', '\x3', '\x2', '\x2', '\x2', 
		'\x9C4', '\x9C5', '\t', '\xE', '\x2', '\x2', '\x9C5', '\x197', '\x3', 
		'\x2', '\x2', '\x2', '\x141', '\x199', '\x1A5', '\x1A9', '\x1B4', '\x1B8', 
		'\x1C7', '\x1CE', '\x1D3', '\x1D5', '\x1DA', '\x1E0', '\x1EA', '\x1F1', 
		'\x1F7', '\x1FB', '\x200', '\x206', '\x20D', '\x213', '\x216', '\x219', 
		'\x21C', '\x223', '\x22A', '\x25E', '\x26D', '\x273', '\x279', '\x286', 
		'\x288', '\x292', '\x2A1', '\x2A7', '\x2C5', '\x2CA', '\x2CE', '\x2D2', 
		'\x2D5', '\x2D9', '\x2DF', '\x2E1', '\x2E9', '\x2ED', '\x2F0', '\x2F7', 
		'\x2FE', '\x302', '\x307', '\x30B', '\x30E', '\x313', '\x319', '\x326', 
		'\x331', '\x333', '\x342', '\x344', '\x350', '\x352', '\x35E', '\x363', 
		'\x374', '\x376', '\x382', '\x384', '\x38F', '\x39A', '\x3A5', '\x3B1', 
		'\x3B3', '\x3BF', '\x3C1', '\x3CB', '\x3D3', '\x3E0', '\x3EA', '\x3F1', 
		'\x3F5', '\x3F9', '\x3FD', '\x401', '\x406', '\x409', '\x40C', '\x412', 
		'\x41A', '\x41F', '\x422', '\x428', '\x433', '\x44A', '\x44E', '\x456', 
		'\x45C', '\x470', '\x474', '\x481', '\x485', '\x488', '\x48F', '\x497', 
		'\x4A1', '\x4AC', '\x4B8', '\x4C2', '\x4C7', '\x4CE', '\x4D1', '\x4D6', 
		'\x4DB', '\x4E0', '\x4F5', '\x4F9', '\x4FE', '\x509', '\x50F', '\x513', 
		'\x518', '\x51C', '\x521', '\x524', '\x53A', '\x540', '\x54B', '\x54F', 
		'\x552', '\x55C', '\x562', '\x565', '\x56C', '\x576', '\x57A', '\x57D', 
		'\x580', '\x584', '\x589', '\x58B', '\x58F', '\x593', '\x59C', '\x5A9', 
		'\x5B1', '\x5B7', '\x5BD', '\x5C1', '\x5C4', '\x5CD', '\x5D6', '\x5DE', 
		'\x5E9', '\x5EF', '\x5FA', '\x5FD', '\x602', '\x611', '\x617', '\x620', 
		'\x62A', '\x630', '\x638', '\x63C', '\x640', '\x645', '\x64A', '\x651', 
		'\x653', '\x658', '\x65C', '\x66A', '\x670', '\x682', '\x684', '\x68E', 
		'\x693', '\x69A', '\x6A0', '\x6A5', '\x6AB', '\x6B2', '\x6B6', '\x6B8', 
		'\x6BA', '\x6C1', '\x6C4', '\x6C7', '\x6CA', '\x6CF', '\x6D3', '\x6D6', 
		'\x6DA', '\x6DE', '\x6E3', '\x6E6', '\x6E8', '\x6EC', '\x6F3', '\x6F9', 
		'\x6FD', '\x703', '\x708', '\x70A', '\x710', '\x714', '\x71A', '\x721', 
		'\x725', '\x727', '\x729', '\x730', '\x73A', '\x73E', '\x740', '\x742', 
		'\x746', '\x749', '\x74F', '\x759', '\x75D', '\x763', '\x76B', '\x76F', 
		'\x772', '\x776', '\x77B', '\x77E', '\x781', '\x785', '\x78A', '\x794', 
		'\x79B', '\x7A0', '\x7A4', '\x7A9', '\x7AF', '\x7B3', '\x7B9', '\x7BF', 
		'\x7C3', '\x7C8', '\x7CE', '\x7D2', '\x7D5', '\x7D9', '\x7DC', '\x7DE', 
		'\x7E1', '\x7EB', '\x7F0', '\x7F2', '\x7F5', '\x7F8', '\x7FB', '\x804', 
		'\x80E', '\x813', '\x816', '\x81A', '\x81D', '\x820', '\x824', '\x82D', 
		'\x83C', '\x842', '\x846', '\x84A', '\x84E', '\x852', '\x856', '\x85A', 
		'\x85E', '\x861', '\x865', '\x870', '\x874', '\x87B', '\x87F', '\x884', 
		'\x889', '\x890', '\x894', '\x89E', '\x8AE', '\x8B3', '\x8B7', '\x8BA', 
		'\x8BE', '\x8C4', '\x8C7', '\x8CB', '\x8D5', '\x8D8', '\x8E0', '\x8E5', 
		'\x8EA', '\x8F2', '\x8F9', '\x8FD', '\x904', '\x90A', '\x90E', '\x914', 
		'\x91D', '\x921', '\x924', '\x934', '\x93B', '\x944', '\x94A', '\x94E', 
		'\x951', '\x955', '\x959', '\x95E', '\x965', '\x96B', '\x96F', '\x978', 
		'\x9B5', '\x9BE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Antlr4.Grammar.Cpp
